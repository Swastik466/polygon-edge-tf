{
  "version": 4,
  "terraform_version": "1.2.9",
  "serial": 1048,
  "lineage": "a2ff5678-a344-b86a-a7be-f6fc6ff4a65a",
  "outputs": {},
  "resources": [
    {
      "module": "module.test-main",
      "mode": "data",
      "type": "aws_availability_zones",
      "name": "current",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "all_availability_zones": null,
            "exclude_names": null,
            "exclude_zone_ids": null,
            "filter": null,
            "group_names": [
              "us-west-2"
            ],
            "id": "us-west-2",
            "names": [
              "us-west-2a",
              "us-west-2b",
              "us-west-2c",
              "us-west-2d"
            ],
            "state": null,
            "timeouts": null,
            "zone_ids": [
              "usw2-az2",
              "usw2-az1",
              "usw2-az3",
              "usw2-az4"
            ]
          },
          "sensitive_attributes": []
        }
      ]
    },
    {
      "module": "module.test-main",
      "mode": "data",
      "type": "aws_caller_identity",
      "name": "current",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "account_id": "897347591745",
            "arn": "arn:aws:iam::897347591745:user/swas466",
            "id": "897347591745",
            "user_id": "AIDA5B3QVTZA3ZFVRZORF"
          },
          "sensitive_attributes": []
        }
      ]
    },
    {
      "module": "module.test-main",
      "mode": "data",
      "type": "aws_iam_policy_document",
      "name": "genesis_s3",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "id": "2143847469",
            "json": "{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Sid\": \"\",\n      \"Effect\": \"Allow\",\n      \"Action\": [\n        \"s3:PutObject\",\n        \"s3:ListBucket\",\n        \"s3:GetObject\"\n      ],\n      \"Resource\": [\n        \"arn:aws:s3:::polygon-edge-shared-20221123172544133800000005/*\",\n        \"arn:aws:s3:::polygon-edge-shared-20221123172544133800000005\"\n      ]\n    }\n  ]\n}",
            "override_json": null,
            "override_policy_documents": null,
            "policy_id": null,
            "source_json": null,
            "source_policy_documents": null,
            "statement": [
              {
                "actions": [
                  "s3:GetObject",
                  "s3:ListBucket",
                  "s3:PutObject"
                ],
                "condition": [],
                "effect": "Allow",
                "not_actions": [],
                "not_principals": [],
                "not_resources": [],
                "principals": [],
                "resources": [
                  "arn:aws:s3:::polygon-edge-shared-20221123172544133800000005",
                  "arn:aws:s3:::polygon-edge-shared-20221123172544133800000005/*"
                ],
                "sid": ""
              }
            ],
            "version": "2012-10-17"
          },
          "sensitive_attributes": []
        }
      ]
    },
    {
      "module": "module.test-main",
      "mode": "data",
      "type": "aws_iam_policy_document",
      "name": "genesis_ssm",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "id": "2209377236",
            "json": "{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Sid\": \"\",\n      \"Effect\": \"Allow\",\n      \"Action\": [\n        \"ssm:GetParametersByPath\",\n        \"ssm:GetParameters\",\n        \"ssm:GetParameter\"\n      ],\n      \"Resource\": \"arn:aws:ssm:us-west-2:897347591745:parameter/polygon-edge-validators/*\"\n    }\n  ]\n}",
            "override_json": null,
            "override_policy_documents": null,
            "policy_id": null,
            "source_json": null,
            "source_policy_documents": null,
            "statement": [
              {
                "actions": [
                  "ssm:GetParameter",
                  "ssm:GetParameters",
                  "ssm:GetParametersByPath"
                ],
                "condition": [],
                "effect": "Allow",
                "not_actions": [],
                "not_principals": [],
                "not_resources": [],
                "principals": [],
                "resources": [
                  "arn:aws:ssm:us-west-2:897347591745:parameter/polygon-edge-validators/*"
                ],
                "sid": ""
              }
            ],
            "version": "2012-10-17"
          },
          "sensitive_attributes": []
        }
      ]
    },
    {
      "module": "module.test-main",
      "mode": "data",
      "type": "aws_region",
      "name": "current",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "description": "US West (Oregon)",
            "endpoint": "ec2.us-west-2.amazonaws.com",
            "id": "us-west-2",
            "name": "us-west-2"
          },
          "sensitive_attributes": []
        }
      ]
    },
    {
      "module": "module.test-main.module.alb",
      "mode": "managed",
      "type": "aws_lb",
      "name": "polygon_nodes",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "access_logs": [
              {
                "bucket": "",
                "enabled": false,
                "prefix": ""
              }
            ],
            "arn": "arn:aws:elasticloadbalancing:us-west-2:897347591745:loadbalancer/app/jrpc-20221123172638397600000010/72a2fad7a223c9c4",
            "arn_suffix": "app/jrpc-20221123172638397600000010/72a2fad7a223c9c4",
            "customer_owned_ipv4_pool": "",
            "desync_mitigation_mode": "defensive",
            "dns_name": "jrpc-20221123172638397600000010-1056415161.us-west-2.elb.amazonaws.com",
            "drop_invalid_header_fields": true,
            "enable_cross_zone_load_balancing": true,
            "enable_deletion_protection": false,
            "enable_http2": true,
            "enable_waf_fail_open": false,
            "id": "arn:aws:elasticloadbalancing:us-west-2:897347591745:loadbalancer/app/jrpc-20221123172638397600000010/72a2fad7a223c9c4",
            "idle_timeout": 60,
            "internal": false,
            "ip_address_type": "ipv4",
            "load_balancer_type": "application",
            "name": "jrpc-20221123172638397600000010",
            "name_prefix": "jrpc-",
            "preserve_host_header": false,
            "security_groups": [
              "sg-0d35a8f852a337cf1"
            ],
            "subnet_mapping": [
              {
                "allocation_id": "",
                "ipv6_address": "",
                "outpost_id": "",
                "private_ipv4_address": "",
                "subnet_id": "subnet-01702216d0cbcc097"
              },
              {
                "allocation_id": "",
                "ipv6_address": "",
                "outpost_id": "",
                "private_ipv4_address": "",
                "subnet_id": "subnet-01f1d9f368e1727b5"
              },
              {
                "allocation_id": "",
                "ipv6_address": "",
                "outpost_id": "",
                "private_ipv4_address": "",
                "subnet_id": "subnet-0d48961594339d9c4"
              },
              {
                "allocation_id": "",
                "ipv6_address": "",
                "outpost_id": "",
                "private_ipv4_address": "",
                "subnet_id": "subnet-0f5298afee86ec355"
              }
            ],
            "subnets": [
              "subnet-01702216d0cbcc097",
              "subnet-01f1d9f368e1727b5",
              "subnet-0d48961594339d9c4",
              "subnet-0f5298afee86ec355"
            ],
            "tags": {
              "Name": "Polygon Edge JSON-RPC ALB"
            },
            "tags_all": {
              "Name": "Polygon Edge JSON-RPC ALB"
            },
            "timeouts": null,
            "vpc_id": "vpc-07e09592f822fc612",
            "zone_id": "Z1H1FL5HABSF5"
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMDAsImRlbGV0ZSI6NjAwMDAwMDAwMDAwLCJ1cGRhdGUiOjYwMDAwMDAwMDAwMH19",
          "dependencies": [
            "module.test-main.module.security.aws_security_group.json_rpc_alb",
            "module.test-main.module.vpc.aws_subnet.public",
            "module.test-main.module.vpc.aws_vpc.main",
            "module.test-main.module.vpc.data.aws_availability_zones.current",
            "module.test-main.module.vpc.data.aws_vpc_ipam_preview_next_cidr.main",
            "module.test-main.module.vpc.data.awscc_ec2_vpc.main"
          ]
        }
      ]
    },
    {
      "module": "module.test-main.module.alb",
      "mode": "managed",
      "type": "aws_lb_listener",
      "name": "polygon_nodes_http",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "alpn_policy": null,
            "arn": "arn:aws:elasticloadbalancing:us-west-2:897347591745:listener/app/jrpc-20221123172638397600000010/72a2fad7a223c9c4/3e9d9b646e0fc41d",
            "certificate_arn": null,
            "default_action": [
              {
                "authenticate_cognito": [],
                "authenticate_oidc": [],
                "fixed_response": [],
                "forward": [],
                "order": 1,
                "redirect": [],
                "target_group_arn": "arn:aws:elasticloadbalancing:us-west-2:897347591745:targetgroup/jrpc-2022112317261907860000000d/fe90097b45db130f",
                "type": "forward"
              }
            ],
            "id": "arn:aws:elasticloadbalancing:us-west-2:897347591745:listener/app/jrpc-20221123172638397600000010/72a2fad7a223c9c4/3e9d9b646e0fc41d",
            "load_balancer_arn": "arn:aws:elasticloadbalancing:us-west-2:897347591745:loadbalancer/app/jrpc-20221123172638397600000010/72a2fad7a223c9c4",
            "port": 80,
            "protocol": "HTTP",
            "ssl_policy": "",
            "tags": null,
            "tags_all": {},
            "timeouts": null
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsicmVhZCI6NjAwMDAwMDAwMDAwfX0=",
          "dependencies": [
            "module.test-main.module.alb.aws_lb.polygon_nodes",
            "module.test-main.module.alb.aws_lb_target_group.polygon_nodes",
            "module.test-main.module.security.aws_security_group.json_rpc_alb",
            "module.test-main.module.vpc.aws_subnet.public",
            "module.test-main.module.vpc.aws_vpc.main",
            "module.test-main.module.vpc.data.aws_availability_zones.current",
            "module.test-main.module.vpc.data.aws_vpc_ipam_preview_next_cidr.main",
            "module.test-main.module.vpc.data.awscc_ec2_vpc.main"
          ]
        }
      ]
    },
    {
      "module": "module.test-main.module.alb",
      "mode": "managed",
      "type": "aws_lb_target_group",
      "name": "polygon_nodes",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "arn": "arn:aws:elasticloadbalancing:us-west-2:897347591745:targetgroup/jrpc-2022112317261907860000000d/fe90097b45db130f",
            "arn_suffix": "targetgroup/jrpc-2022112317261907860000000d/fe90097b45db130f",
            "connection_termination": false,
            "deregistration_delay": "300",
            "health_check": [
              {
                "enabled": true,
                "healthy_threshold": 5,
                "interval": 30,
                "matcher": "200",
                "path": "/",
                "port": "traffic-port",
                "protocol": "HTTP",
                "timeout": 5,
                "unhealthy_threshold": 2
              }
            ],
            "id": "arn:aws:elasticloadbalancing:us-west-2:897347591745:targetgroup/jrpc-2022112317261907860000000d/fe90097b45db130f",
            "ip_address_type": "ipv4",
            "lambda_multi_value_headers_enabled": false,
            "load_balancing_algorithm_type": "round_robin",
            "name": "jrpc-2022112317261907860000000d",
            "name_prefix": "jrpc-",
            "port": 8545,
            "preserve_client_ip": null,
            "protocol": "HTTP",
            "protocol_version": "HTTP1",
            "proxy_protocol_v2": false,
            "slow_start": 0,
            "stickiness": [
              {
                "cookie_duration": 86400,
                "cookie_name": "",
                "enabled": false,
                "type": "lb_cookie"
              }
            ],
            "tags": null,
            "tags_all": {},
            "target_type": "instance",
            "vpc_id": "vpc-07e09592f822fc612"
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "module.test-main.module.vpc.aws_vpc.main",
            "module.test-main.module.vpc.data.aws_vpc_ipam_preview_next_cidr.main",
            "module.test-main.module.vpc.data.awscc_ec2_vpc.main"
          ]
        }
      ]
    },
    {
      "module": "module.test-main.module.alb",
      "mode": "managed",
      "type": "aws_lb_target_group_attachment",
      "name": "polygon_nodes",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "index_key": 0,
          "schema_version": 0,
          "attributes": {
            "availability_zone": null,
            "id": "arn:aws:elasticloadbalancing:us-west-2:897347591745:targetgroup/jrpc-2022112317261907860000000d/fe90097b45db130f-20221123172746816000000011",
            "port": 8545,
            "target_group_arn": "arn:aws:elasticloadbalancing:us-west-2:897347591745:targetgroup/jrpc-2022112317261907860000000d/fe90097b45db130f",
            "target_id": "i-0492174b0af6ff719"
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "module.test-main.data.aws_availability_zones.current",
            "module.test-main.data.aws_iam_policy_document.genesis_s3",
            "module.test-main.data.aws_iam_policy_document.genesis_ssm",
            "module.test-main.data.aws_region.current",
            "module.test-main.module.alb.aws_lb_target_group.polygon_nodes",
            "module.test-main.module.instances.aws_ebs_volume.chain_data",
            "module.test-main.module.instances.aws_instance.polygon_edge_instance",
            "module.test-main.module.instances.aws_network_interface.instance_interface",
            "module.test-main.module.instances.aws_volume_attachment.attach_chain_data",
            "module.test-main.module.instances.data.aws_ami.ubuntu_20_04",
            "module.test-main.module.lambda.aws_cloudwatch_log_group.lambda",
            "module.test-main.module.lambda.aws_iam_policy.additional_inline",
            "module.test-main.module.lambda.aws_iam_policy.additional_json",
            "module.test-main.module.lambda.aws_iam_policy.additional_jsons",
            "module.test-main.module.lambda.aws_iam_policy.async",
            "module.test-main.module.lambda.aws_iam_policy.dead_letter",
            "module.test-main.module.lambda.aws_iam_policy.logs",
            "module.test-main.module.lambda.aws_iam_policy.tracing",
            "module.test-main.module.lambda.aws_iam_policy.vpc",
            "module.test-main.module.lambda.aws_iam_role.lambda",
            "module.test-main.module.lambda.aws_iam_role_policy_attachment.additional_inline",
            "module.test-main.module.lambda.aws_iam_role_policy_attachment.additional_json",
            "module.test-main.module.lambda.aws_iam_role_policy_attachment.additional_jsons",
            "module.test-main.module.lambda.aws_iam_role_policy_attachment.additional_many",
            "module.test-main.module.lambda.aws_iam_role_policy_attachment.additional_one",
            "module.test-main.module.lambda.aws_iam_role_policy_attachment.async",
            "module.test-main.module.lambda.aws_iam_role_policy_attachment.dead_letter",
            "module.test-main.module.lambda.aws_iam_role_policy_attachment.logs",
            "module.test-main.module.lambda.aws_iam_role_policy_attachment.tracing",
            "module.test-main.module.lambda.aws_iam_role_policy_attachment.vpc",
            "module.test-main.module.lambda.aws_lambda_event_source_mapping.this",
            "module.test-main.module.lambda.aws_lambda_function.this",
            "module.test-main.module.lambda.aws_lambda_function_event_invoke_config.this",
            "module.test-main.module.lambda.aws_lambda_function_url.this",
            "module.test-main.module.lambda.aws_lambda_layer_version.this",
            "module.test-main.module.lambda.aws_lambda_permission.current_version_triggers",
            "module.test-main.module.lambda.aws_lambda_permission.unqualified_alias_triggers",
            "module.test-main.module.lambda.aws_lambda_provisioned_concurrency_config.current_version",
            "module.test-main.module.lambda.aws_s3_object.lambda_package",
            "module.test-main.module.lambda.data.aws_arn.log_group_arn",
            "module.test-main.module.lambda.data.aws_cloudwatch_log_group.lambda",
            "module.test-main.module.lambda.data.aws_iam_policy.tracing",
            "module.test-main.module.lambda.data.aws_iam_policy.vpc",
            "module.test-main.module.lambda.data.aws_iam_policy_document.additional_inline",
            "module.test-main.module.lambda.data.aws_iam_policy_document.assume_role",
            "module.test-main.module.lambda.data.aws_iam_policy_document.async",
            "module.test-main.module.lambda.data.aws_iam_policy_document.dead_letter",
            "module.test-main.module.lambda.data.aws_iam_policy_document.logs",
            "module.test-main.module.lambda.data.aws_partition.current",
            "module.test-main.module.lambda.data.external.archive_prepare",
            "module.test-main.module.lambda.local_file.archive_plan",
            "module.test-main.module.lambda.null_resource.archive",
            "module.test-main.module.s3.aws_s3_bucket.this",
            "module.test-main.module.s3.aws_s3_bucket_policy.this",
            "module.test-main.module.security.aws_iam_instance_profile.polygon_edge_node",
            "module.test-main.module.security.aws_iam_role.polygon_edge_node",
            "module.test-main.module.security.aws_security_group.polygon_internal",
            "module.test-main.module.security.data.aws_iam_policy_document.ec2_trust",
            "module.test-main.module.user_data.data.template_cloudinit_config.polygon_edge",
            "module.test-main.module.user_data.data.template_file.polygon_edge_node",
            "module.test-main.module.user_data.data.template_file.polygon_edge_server",
            "module.test-main.module.vpc.aws_subnet.private",
            "module.test-main.module.vpc.aws_vpc.main",
            "module.test-main.module.vpc.aws_vpc_ipv4_cidr_block_association.secondary",
            "module.test-main.module.vpc.data.aws_availability_zones.current",
            "module.test-main.module.vpc.data.aws_vpc_ipam_preview_next_cidr.main",
            "module.test-main.module.vpc.data.awscc_ec2_vpc.main"
          ]
        },
        {
          "index_key": 1,
          "schema_version": 0,
          "attributes": {
            "availability_zone": null,
            "id": "arn:aws:elasticloadbalancing:us-west-2:897347591745:targetgroup/jrpc-2022112317261907860000000d/fe90097b45db130f-20221123172747917600000014",
            "port": 8545,
            "target_group_arn": "arn:aws:elasticloadbalancing:us-west-2:897347591745:targetgroup/jrpc-2022112317261907860000000d/fe90097b45db130f",
            "target_id": "i-07678f282df195df2"
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "module.test-main.data.aws_availability_zones.current",
            "module.test-main.data.aws_iam_policy_document.genesis_s3",
            "module.test-main.data.aws_iam_policy_document.genesis_ssm",
            "module.test-main.data.aws_region.current",
            "module.test-main.module.alb.aws_lb_target_group.polygon_nodes",
            "module.test-main.module.instances.aws_ebs_volume.chain_data",
            "module.test-main.module.instances.aws_instance.polygon_edge_instance",
            "module.test-main.module.instances.aws_network_interface.instance_interface",
            "module.test-main.module.instances.aws_volume_attachment.attach_chain_data",
            "module.test-main.module.instances.data.aws_ami.ubuntu_20_04",
            "module.test-main.module.lambda.aws_cloudwatch_log_group.lambda",
            "module.test-main.module.lambda.aws_iam_policy.additional_inline",
            "module.test-main.module.lambda.aws_iam_policy.additional_json",
            "module.test-main.module.lambda.aws_iam_policy.additional_jsons",
            "module.test-main.module.lambda.aws_iam_policy.async",
            "module.test-main.module.lambda.aws_iam_policy.dead_letter",
            "module.test-main.module.lambda.aws_iam_policy.logs",
            "module.test-main.module.lambda.aws_iam_policy.tracing",
            "module.test-main.module.lambda.aws_iam_policy.vpc",
            "module.test-main.module.lambda.aws_iam_role.lambda",
            "module.test-main.module.lambda.aws_iam_role_policy_attachment.additional_inline",
            "module.test-main.module.lambda.aws_iam_role_policy_attachment.additional_json",
            "module.test-main.module.lambda.aws_iam_role_policy_attachment.additional_jsons",
            "module.test-main.module.lambda.aws_iam_role_policy_attachment.additional_many",
            "module.test-main.module.lambda.aws_iam_role_policy_attachment.additional_one",
            "module.test-main.module.lambda.aws_iam_role_policy_attachment.async",
            "module.test-main.module.lambda.aws_iam_role_policy_attachment.dead_letter",
            "module.test-main.module.lambda.aws_iam_role_policy_attachment.logs",
            "module.test-main.module.lambda.aws_iam_role_policy_attachment.tracing",
            "module.test-main.module.lambda.aws_iam_role_policy_attachment.vpc",
            "module.test-main.module.lambda.aws_lambda_event_source_mapping.this",
            "module.test-main.module.lambda.aws_lambda_function.this",
            "module.test-main.module.lambda.aws_lambda_function_event_invoke_config.this",
            "module.test-main.module.lambda.aws_lambda_function_url.this",
            "module.test-main.module.lambda.aws_lambda_layer_version.this",
            "module.test-main.module.lambda.aws_lambda_permission.current_version_triggers",
            "module.test-main.module.lambda.aws_lambda_permission.unqualified_alias_triggers",
            "module.test-main.module.lambda.aws_lambda_provisioned_concurrency_config.current_version",
            "module.test-main.module.lambda.aws_s3_object.lambda_package",
            "module.test-main.module.lambda.data.aws_arn.log_group_arn",
            "module.test-main.module.lambda.data.aws_cloudwatch_log_group.lambda",
            "module.test-main.module.lambda.data.aws_iam_policy.tracing",
            "module.test-main.module.lambda.data.aws_iam_policy.vpc",
            "module.test-main.module.lambda.data.aws_iam_policy_document.additional_inline",
            "module.test-main.module.lambda.data.aws_iam_policy_document.assume_role",
            "module.test-main.module.lambda.data.aws_iam_policy_document.async",
            "module.test-main.module.lambda.data.aws_iam_policy_document.dead_letter",
            "module.test-main.module.lambda.data.aws_iam_policy_document.logs",
            "module.test-main.module.lambda.data.aws_partition.current",
            "module.test-main.module.lambda.data.external.archive_prepare",
            "module.test-main.module.lambda.local_file.archive_plan",
            "module.test-main.module.lambda.null_resource.archive",
            "module.test-main.module.s3.aws_s3_bucket.this",
            "module.test-main.module.s3.aws_s3_bucket_policy.this",
            "module.test-main.module.security.aws_iam_instance_profile.polygon_edge_node",
            "module.test-main.module.security.aws_iam_role.polygon_edge_node",
            "module.test-main.module.security.aws_security_group.polygon_internal",
            "module.test-main.module.security.data.aws_iam_policy_document.ec2_trust",
            "module.test-main.module.user_data.data.template_cloudinit_config.polygon_edge",
            "module.test-main.module.user_data.data.template_file.polygon_edge_node",
            "module.test-main.module.user_data.data.template_file.polygon_edge_server",
            "module.test-main.module.vpc.aws_subnet.private",
            "module.test-main.module.vpc.aws_vpc.main",
            "module.test-main.module.vpc.aws_vpc_ipv4_cidr_block_association.secondary",
            "module.test-main.module.vpc.data.aws_availability_zones.current",
            "module.test-main.module.vpc.data.aws_vpc_ipam_preview_next_cidr.main",
            "module.test-main.module.vpc.data.awscc_ec2_vpc.main"
          ]
        },
        {
          "index_key": 2,
          "schema_version": 0,
          "attributes": {
            "availability_zone": null,
            "id": "arn:aws:elasticloadbalancing:us-west-2:897347591745:targetgroup/jrpc-2022112317261907860000000d/fe90097b45db130f-20221123172747579500000013",
            "port": 8545,
            "target_group_arn": "arn:aws:elasticloadbalancing:us-west-2:897347591745:targetgroup/jrpc-2022112317261907860000000d/fe90097b45db130f",
            "target_id": "i-0e0d090e6e84219cd"
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "module.test-main.data.aws_availability_zones.current",
            "module.test-main.data.aws_iam_policy_document.genesis_s3",
            "module.test-main.data.aws_iam_policy_document.genesis_ssm",
            "module.test-main.data.aws_region.current",
            "module.test-main.module.alb.aws_lb_target_group.polygon_nodes",
            "module.test-main.module.instances.aws_ebs_volume.chain_data",
            "module.test-main.module.instances.aws_instance.polygon_edge_instance",
            "module.test-main.module.instances.aws_network_interface.instance_interface",
            "module.test-main.module.instances.aws_volume_attachment.attach_chain_data",
            "module.test-main.module.instances.data.aws_ami.ubuntu_20_04",
            "module.test-main.module.lambda.aws_cloudwatch_log_group.lambda",
            "module.test-main.module.lambda.aws_iam_policy.additional_inline",
            "module.test-main.module.lambda.aws_iam_policy.additional_json",
            "module.test-main.module.lambda.aws_iam_policy.additional_jsons",
            "module.test-main.module.lambda.aws_iam_policy.async",
            "module.test-main.module.lambda.aws_iam_policy.dead_letter",
            "module.test-main.module.lambda.aws_iam_policy.logs",
            "module.test-main.module.lambda.aws_iam_policy.tracing",
            "module.test-main.module.lambda.aws_iam_policy.vpc",
            "module.test-main.module.lambda.aws_iam_role.lambda",
            "module.test-main.module.lambda.aws_iam_role_policy_attachment.additional_inline",
            "module.test-main.module.lambda.aws_iam_role_policy_attachment.additional_json",
            "module.test-main.module.lambda.aws_iam_role_policy_attachment.additional_jsons",
            "module.test-main.module.lambda.aws_iam_role_policy_attachment.additional_many",
            "module.test-main.module.lambda.aws_iam_role_policy_attachment.additional_one",
            "module.test-main.module.lambda.aws_iam_role_policy_attachment.async",
            "module.test-main.module.lambda.aws_iam_role_policy_attachment.dead_letter",
            "module.test-main.module.lambda.aws_iam_role_policy_attachment.logs",
            "module.test-main.module.lambda.aws_iam_role_policy_attachment.tracing",
            "module.test-main.module.lambda.aws_iam_role_policy_attachment.vpc",
            "module.test-main.module.lambda.aws_lambda_event_source_mapping.this",
            "module.test-main.module.lambda.aws_lambda_function.this",
            "module.test-main.module.lambda.aws_lambda_function_event_invoke_config.this",
            "module.test-main.module.lambda.aws_lambda_function_url.this",
            "module.test-main.module.lambda.aws_lambda_layer_version.this",
            "module.test-main.module.lambda.aws_lambda_permission.current_version_triggers",
            "module.test-main.module.lambda.aws_lambda_permission.unqualified_alias_triggers",
            "module.test-main.module.lambda.aws_lambda_provisioned_concurrency_config.current_version",
            "module.test-main.module.lambda.aws_s3_object.lambda_package",
            "module.test-main.module.lambda.data.aws_arn.log_group_arn",
            "module.test-main.module.lambda.data.aws_cloudwatch_log_group.lambda",
            "module.test-main.module.lambda.data.aws_iam_policy.tracing",
            "module.test-main.module.lambda.data.aws_iam_policy.vpc",
            "module.test-main.module.lambda.data.aws_iam_policy_document.additional_inline",
            "module.test-main.module.lambda.data.aws_iam_policy_document.assume_role",
            "module.test-main.module.lambda.data.aws_iam_policy_document.async",
            "module.test-main.module.lambda.data.aws_iam_policy_document.dead_letter",
            "module.test-main.module.lambda.data.aws_iam_policy_document.logs",
            "module.test-main.module.lambda.data.aws_partition.current",
            "module.test-main.module.lambda.data.external.archive_prepare",
            "module.test-main.module.lambda.local_file.archive_plan",
            "module.test-main.module.lambda.null_resource.archive",
            "module.test-main.module.s3.aws_s3_bucket.this",
            "module.test-main.module.s3.aws_s3_bucket_policy.this",
            "module.test-main.module.security.aws_iam_instance_profile.polygon_edge_node",
            "module.test-main.module.security.aws_iam_role.polygon_edge_node",
            "module.test-main.module.security.aws_security_group.polygon_internal",
            "module.test-main.module.security.data.aws_iam_policy_document.ec2_trust",
            "module.test-main.module.user_data.data.template_cloudinit_config.polygon_edge",
            "module.test-main.module.user_data.data.template_file.polygon_edge_node",
            "module.test-main.module.user_data.data.template_file.polygon_edge_server",
            "module.test-main.module.vpc.aws_subnet.private",
            "module.test-main.module.vpc.aws_vpc.main",
            "module.test-main.module.vpc.aws_vpc_ipv4_cidr_block_association.secondary",
            "module.test-main.module.vpc.data.aws_availability_zones.current",
            "module.test-main.module.vpc.data.aws_vpc_ipam_preview_next_cidr.main",
            "module.test-main.module.vpc.data.awscc_ec2_vpc.main"
          ]
        },
        {
          "index_key": 3,
          "schema_version": 0,
          "attributes": {
            "availability_zone": null,
            "id": "arn:aws:elasticloadbalancing:us-west-2:897347591745:targetgroup/jrpc-2022112317261907860000000d/fe90097b45db130f-20221123172747265600000012",
            "port": 8545,
            "target_group_arn": "arn:aws:elasticloadbalancing:us-west-2:897347591745:targetgroup/jrpc-2022112317261907860000000d/fe90097b45db130f",
            "target_id": "i-032105f1dbbb50add"
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "module.test-main.data.aws_availability_zones.current",
            "module.test-main.data.aws_iam_policy_document.genesis_s3",
            "module.test-main.data.aws_iam_policy_document.genesis_ssm",
            "module.test-main.data.aws_region.current",
            "module.test-main.module.alb.aws_lb_target_group.polygon_nodes",
            "module.test-main.module.instances.aws_ebs_volume.chain_data",
            "module.test-main.module.instances.aws_instance.polygon_edge_instance",
            "module.test-main.module.instances.aws_network_interface.instance_interface",
            "module.test-main.module.instances.aws_volume_attachment.attach_chain_data",
            "module.test-main.module.instances.data.aws_ami.ubuntu_20_04",
            "module.test-main.module.lambda.aws_cloudwatch_log_group.lambda",
            "module.test-main.module.lambda.aws_iam_policy.additional_inline",
            "module.test-main.module.lambda.aws_iam_policy.additional_json",
            "module.test-main.module.lambda.aws_iam_policy.additional_jsons",
            "module.test-main.module.lambda.aws_iam_policy.async",
            "module.test-main.module.lambda.aws_iam_policy.dead_letter",
            "module.test-main.module.lambda.aws_iam_policy.logs",
            "module.test-main.module.lambda.aws_iam_policy.tracing",
            "module.test-main.module.lambda.aws_iam_policy.vpc",
            "module.test-main.module.lambda.aws_iam_role.lambda",
            "module.test-main.module.lambda.aws_iam_role_policy_attachment.additional_inline",
            "module.test-main.module.lambda.aws_iam_role_policy_attachment.additional_json",
            "module.test-main.module.lambda.aws_iam_role_policy_attachment.additional_jsons",
            "module.test-main.module.lambda.aws_iam_role_policy_attachment.additional_many",
            "module.test-main.module.lambda.aws_iam_role_policy_attachment.additional_one",
            "module.test-main.module.lambda.aws_iam_role_policy_attachment.async",
            "module.test-main.module.lambda.aws_iam_role_policy_attachment.dead_letter",
            "module.test-main.module.lambda.aws_iam_role_policy_attachment.logs",
            "module.test-main.module.lambda.aws_iam_role_policy_attachment.tracing",
            "module.test-main.module.lambda.aws_iam_role_policy_attachment.vpc",
            "module.test-main.module.lambda.aws_lambda_event_source_mapping.this",
            "module.test-main.module.lambda.aws_lambda_function.this",
            "module.test-main.module.lambda.aws_lambda_function_event_invoke_config.this",
            "module.test-main.module.lambda.aws_lambda_function_url.this",
            "module.test-main.module.lambda.aws_lambda_layer_version.this",
            "module.test-main.module.lambda.aws_lambda_permission.current_version_triggers",
            "module.test-main.module.lambda.aws_lambda_permission.unqualified_alias_triggers",
            "module.test-main.module.lambda.aws_lambda_provisioned_concurrency_config.current_version",
            "module.test-main.module.lambda.aws_s3_object.lambda_package",
            "module.test-main.module.lambda.data.aws_arn.log_group_arn",
            "module.test-main.module.lambda.data.aws_cloudwatch_log_group.lambda",
            "module.test-main.module.lambda.data.aws_iam_policy.tracing",
            "module.test-main.module.lambda.data.aws_iam_policy.vpc",
            "module.test-main.module.lambda.data.aws_iam_policy_document.additional_inline",
            "module.test-main.module.lambda.data.aws_iam_policy_document.assume_role",
            "module.test-main.module.lambda.data.aws_iam_policy_document.async",
            "module.test-main.module.lambda.data.aws_iam_policy_document.dead_letter",
            "module.test-main.module.lambda.data.aws_iam_policy_document.logs",
            "module.test-main.module.lambda.data.aws_partition.current",
            "module.test-main.module.lambda.data.external.archive_prepare",
            "module.test-main.module.lambda.local_file.archive_plan",
            "module.test-main.module.lambda.null_resource.archive",
            "module.test-main.module.s3.aws_s3_bucket.this",
            "module.test-main.module.s3.aws_s3_bucket_policy.this",
            "module.test-main.module.security.aws_iam_instance_profile.polygon_edge_node",
            "module.test-main.module.security.aws_iam_role.polygon_edge_node",
            "module.test-main.module.security.aws_security_group.polygon_internal",
            "module.test-main.module.security.data.aws_iam_policy_document.ec2_trust",
            "module.test-main.module.user_data.data.template_cloudinit_config.polygon_edge",
            "module.test-main.module.user_data.data.template_file.polygon_edge_node",
            "module.test-main.module.user_data.data.template_file.polygon_edge_server",
            "module.test-main.module.vpc.aws_subnet.private",
            "module.test-main.module.vpc.aws_vpc.main",
            "module.test-main.module.vpc.aws_vpc_ipv4_cidr_block_association.secondary",
            "module.test-main.module.vpc.data.aws_availability_zones.current",
            "module.test-main.module.vpc.data.aws_vpc_ipam_preview_next_cidr.main",
            "module.test-main.module.vpc.data.awscc_ec2_vpc.main"
          ]
        }
      ]
    },
    {
      "module": "module.test-main.module.instances[\"0\"]",
      "mode": "data",
      "type": "aws_ami",
      "name": "ubuntu_20_04",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "architecture": "x86_64",
            "arn": "arn:aws:ec2:us-west-2::image/ami-0080e1081b2c5aef6",
            "block_device_mappings": [
              {
                "device_name": "/dev/sda1",
                "ebs": {
                  "delete_on_termination": "true",
                  "encrypted": "false",
                  "iops": "0",
                  "snapshot_id": "snap-071e286744ad07ce8",
                  "throughput": "0",
                  "volume_size": "8",
                  "volume_type": "gp2"
                },
                "no_device": "",
                "virtual_name": ""
              },
              {
                "device_name": "/dev/sdb",
                "ebs": {},
                "no_device": "",
                "virtual_name": "ephemeral0"
              },
              {
                "device_name": "/dev/sdc",
                "ebs": {},
                "no_device": "",
                "virtual_name": "ephemeral1"
              }
            ],
            "boot_mode": "",
            "creation_date": "2022-11-16T00:07:24.000Z",
            "deprecation_time": "2024-11-16T00:07:24.000Z",
            "description": "Canonical, Ubuntu, 20.04 LTS, amd64 focal image build on 2022-11-15",
            "ena_support": true,
            "executable_users": null,
            "filter": [
              {
                "name": "name",
                "values": [
                  "ubuntu/images/hvm-ssd/ubuntu-focal-20.04-amd64-server-*"
                ]
              },
              {
                "name": "virtualization-type",
                "values": [
                  "hvm"
                ]
              }
            ],
            "hypervisor": "xen",
            "id": "ami-0080e1081b2c5aef6",
            "image_id": "ami-0080e1081b2c5aef6",
            "image_location": "amazon/ubuntu/images/hvm-ssd/ubuntu-focal-20.04-amd64-server-20221115.1",
            "image_owner_alias": "amazon",
            "image_type": "machine",
            "imds_support": "",
            "include_deprecated": false,
            "kernel_id": "",
            "most_recent": true,
            "name": "ubuntu/images/hvm-ssd/ubuntu-focal-20.04-amd64-server-20221115.1",
            "name_regex": null,
            "owner_id": "099720109477",
            "owners": [
              "099720109477"
            ],
            "platform": "",
            "platform_details": "Linux/UNIX",
            "product_codes": [],
            "public": true,
            "ramdisk_id": "",
            "root_device_name": "/dev/sda1",
            "root_device_type": "ebs",
            "root_snapshot_id": "snap-071e286744ad07ce8",
            "sriov_net_support": "simple",
            "state": "available",
            "state_reason": {
              "code": "UNSET",
              "message": "UNSET"
            },
            "tags": {},
            "timeouts": null,
            "tpm_support": "",
            "usage_operation": "RunInstances",
            "virtualization_type": "hvm"
          },
          "sensitive_attributes": []
        }
      ]
    },
    {
      "module": "module.test-main.module.instances[\"0\"]",
      "mode": "managed",
      "type": "aws_ebs_volume",
      "name": "chain_data",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "arn": "arn:aws:ec2:us-west-2:897347591745:volume/vol-0ab12c8c8d1ef70d0",
            "availability_zone": "us-west-2a",
            "encrypted": true,
            "final_snapshot": false,
            "id": "vol-0ab12c8c8d1ef70d0",
            "iops": 100,
            "kms_key_id": "arn:aws:kms:us-west-2:897347591745:key/40b4ce1c-6898-40c6-a618-0ae0cd6e6924",
            "multi_attach_enabled": false,
            "outpost_arn": "",
            "size": 30,
            "snapshot_id": "",
            "tags": {
              "Name": "Polygon_Edge_chain_data_volume"
            },
            "tags_all": {
              "Name": "Polygon_Edge_chain_data_volume"
            },
            "throughput": 0,
            "timeouts": null,
            "type": "gp2"
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjozMDAwMDAwMDAwMDAsImRlbGV0ZSI6MzAwMDAwMDAwMDAwLCJ1cGRhdGUiOjMwMDAwMDAwMDAwMH19",
          "dependencies": [
            "module.test-main.data.aws_availability_zones.current",
            "module.test-main.data.aws_iam_policy_document.genesis_s3",
            "module.test-main.data.aws_iam_policy_document.genesis_ssm",
            "module.test-main.module.lambda.aws_cloudwatch_log_group.lambda",
            "module.test-main.module.lambda.aws_iam_policy.additional_inline",
            "module.test-main.module.lambda.aws_iam_policy.additional_json",
            "module.test-main.module.lambda.aws_iam_policy.additional_jsons",
            "module.test-main.module.lambda.aws_iam_policy.async",
            "module.test-main.module.lambda.aws_iam_policy.dead_letter",
            "module.test-main.module.lambda.aws_iam_policy.logs",
            "module.test-main.module.lambda.aws_iam_policy.tracing",
            "module.test-main.module.lambda.aws_iam_policy.vpc",
            "module.test-main.module.lambda.aws_iam_role.lambda",
            "module.test-main.module.lambda.aws_iam_role_policy_attachment.additional_inline",
            "module.test-main.module.lambda.aws_iam_role_policy_attachment.additional_json",
            "module.test-main.module.lambda.aws_iam_role_policy_attachment.additional_jsons",
            "module.test-main.module.lambda.aws_iam_role_policy_attachment.additional_many",
            "module.test-main.module.lambda.aws_iam_role_policy_attachment.additional_one",
            "module.test-main.module.lambda.aws_iam_role_policy_attachment.async",
            "module.test-main.module.lambda.aws_iam_role_policy_attachment.dead_letter",
            "module.test-main.module.lambda.aws_iam_role_policy_attachment.logs",
            "module.test-main.module.lambda.aws_iam_role_policy_attachment.tracing",
            "module.test-main.module.lambda.aws_iam_role_policy_attachment.vpc",
            "module.test-main.module.lambda.aws_lambda_event_source_mapping.this",
            "module.test-main.module.lambda.aws_lambda_function.this",
            "module.test-main.module.lambda.aws_lambda_function_event_invoke_config.this",
            "module.test-main.module.lambda.aws_lambda_function_url.this",
            "module.test-main.module.lambda.aws_lambda_layer_version.this",
            "module.test-main.module.lambda.aws_lambda_permission.current_version_triggers",
            "module.test-main.module.lambda.aws_lambda_permission.unqualified_alias_triggers",
            "module.test-main.module.lambda.aws_lambda_provisioned_concurrency_config.current_version",
            "module.test-main.module.lambda.aws_s3_object.lambda_package",
            "module.test-main.module.lambda.data.aws_arn.log_group_arn",
            "module.test-main.module.lambda.data.aws_cloudwatch_log_group.lambda",
            "module.test-main.module.lambda.data.aws_iam_policy.tracing",
            "module.test-main.module.lambda.data.aws_iam_policy.vpc",
            "module.test-main.module.lambda.data.aws_iam_policy_document.additional_inline",
            "module.test-main.module.lambda.data.aws_iam_policy_document.assume_role",
            "module.test-main.module.lambda.data.aws_iam_policy_document.async",
            "module.test-main.module.lambda.data.aws_iam_policy_document.dead_letter",
            "module.test-main.module.lambda.data.aws_iam_policy_document.logs",
            "module.test-main.module.lambda.data.aws_partition.current",
            "module.test-main.module.lambda.data.external.archive_prepare",
            "module.test-main.module.lambda.local_file.archive_plan",
            "module.test-main.module.lambda.null_resource.archive",
            "module.test-main.module.s3.aws_s3_bucket.this"
          ]
        }
      ]
    },
    {
      "module": "module.test-main.module.instances[\"0\"]",
      "mode": "managed",
      "type": "aws_instance",
      "name": "polygon_edge_instance",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 1,
          "attributes": {
            "ami": "ami-0080e1081b2c5aef6",
            "arn": "arn:aws:ec2:us-west-2:897347591745:instance/i-0492174b0af6ff719",
            "associate_public_ip_address": false,
            "availability_zone": "us-west-2a",
            "capacity_reservation_specification": [
              {
                "capacity_reservation_preference": "open",
                "capacity_reservation_target": []
              }
            ],
            "cpu_core_count": 1,
            "cpu_threads_per_core": 2,
            "credit_specification": [
              {
                "cpu_credits": "unlimited"
              }
            ],
            "disable_api_stop": false,
            "disable_api_termination": false,
            "ebs_block_device": [],
            "ebs_optimized": false,
            "enclave_options": [
              {
                "enabled": false
              }
            ],
            "ephemeral_block_device": [],
            "get_password_data": false,
            "hibernation": false,
            "host_id": null,
            "host_resource_group_arn": null,
            "iam_instance_profile": "polygon-edge-node-20221123172546492000000006",
            "id": "i-0492174b0af6ff719",
            "instance_initiated_shutdown_behavior": "stop",
            "instance_state": "running",
            "instance_type": "t3.medium",
            "ipv6_address_count": 0,
            "ipv6_addresses": [],
            "key_name": "",
            "launch_template": [],
            "maintenance_options": [
              {
                "auto_recovery": "default"
              }
            ],
            "metadata_options": [
              {
                "http_endpoint": "enabled",
                "http_put_response_hop_limit": 1,
                "http_tokens": "required",
                "instance_metadata_tags": "disabled"
              }
            ],
            "monitoring": false,
            "network_interface": [
              {
                "delete_on_termination": false,
                "device_index": 0,
                "network_card_index": 0,
                "network_interface_id": "eni-060cca898216457a6"
              }
            ],
            "outpost_arn": "",
            "password_data": "",
            "placement_group": "",
            "placement_partition_number": null,
            "primary_network_interface_id": "eni-060cca898216457a6",
            "private_dns": "ip-10-250-0-107.us-west-2.compute.internal",
            "private_dns_name_options": [
              {
                "enable_resource_name_dns_a_record": false,
                "enable_resource_name_dns_aaaa_record": false,
                "hostname_type": "ip-name"
              }
            ],
            "private_ip": "10.250.0.107",
            "public_dns": "",
            "public_ip": "",
            "root_block_device": [
              {
                "delete_on_termination": true,
                "device_name": "/dev/sda1",
                "encrypted": true,
                "iops": 100,
                "kms_key_id": "arn:aws:kms:us-west-2:897347591745:key/40b4ce1c-6898-40c6-a618-0ae0cd6e6924",
                "tags": {
                  "Name": "Polygon_Edge_Root_Volume"
                },
                "throughput": 0,
                "volume_id": "vol-0ea16869c860f4f72",
                "volume_size": 8,
                "volume_type": "gp2"
              }
            ],
            "secondary_private_ips": [],
            "security_groups": [],
            "source_dest_check": true,
            "subnet_id": "subnet-0037bee82e69b1ad5",
            "tags": {
              "Name": "Polygon_Edge_Node"
            },
            "tags_all": {
              "Name": "Polygon_Edge_Node"
            },
            "tenancy": "default",
            "timeouts": null,
            "user_data": null,
            "user_data_base64": "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",
            "user_data_replace_on_change": false,
            "volume_tags": null,
            "vpc_security_group_ids": [
              "sg-072527d2b77b17da4"
            ]
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMDAsImRlbGV0ZSI6MTIwMDAwMDAwMDAwMCwidXBkYXRlIjo2MDAwMDAwMDAwMDB9LCJzY2hlbWFfdmVyc2lvbiI6IjEifQ==",
          "dependencies": [
            "module.test-main.data.aws_availability_zones.current",
            "module.test-main.data.aws_iam_policy_document.genesis_s3",
            "module.test-main.data.aws_iam_policy_document.genesis_ssm",
            "module.test-main.data.aws_region.current",
            "module.test-main.module.instances.aws_network_interface.instance_interface",
            "module.test-main.module.instances.data.aws_ami.ubuntu_20_04",
            "module.test-main.module.lambda.aws_cloudwatch_log_group.lambda",
            "module.test-main.module.lambda.aws_iam_policy.additional_inline",
            "module.test-main.module.lambda.aws_iam_policy.additional_json",
            "module.test-main.module.lambda.aws_iam_policy.additional_jsons",
            "module.test-main.module.lambda.aws_iam_policy.async",
            "module.test-main.module.lambda.aws_iam_policy.dead_letter",
            "module.test-main.module.lambda.aws_iam_policy.logs",
            "module.test-main.module.lambda.aws_iam_policy.tracing",
            "module.test-main.module.lambda.aws_iam_policy.vpc",
            "module.test-main.module.lambda.aws_iam_role.lambda",
            "module.test-main.module.lambda.aws_iam_role_policy_attachment.additional_inline",
            "module.test-main.module.lambda.aws_iam_role_policy_attachment.additional_json",
            "module.test-main.module.lambda.aws_iam_role_policy_attachment.additional_jsons",
            "module.test-main.module.lambda.aws_iam_role_policy_attachment.additional_many",
            "module.test-main.module.lambda.aws_iam_role_policy_attachment.additional_one",
            "module.test-main.module.lambda.aws_iam_role_policy_attachment.async",
            "module.test-main.module.lambda.aws_iam_role_policy_attachment.dead_letter",
            "module.test-main.module.lambda.aws_iam_role_policy_attachment.logs",
            "module.test-main.module.lambda.aws_iam_role_policy_attachment.tracing",
            "module.test-main.module.lambda.aws_iam_role_policy_attachment.vpc",
            "module.test-main.module.lambda.aws_lambda_event_source_mapping.this",
            "module.test-main.module.lambda.aws_lambda_function.this",
            "module.test-main.module.lambda.aws_lambda_function_event_invoke_config.this",
            "module.test-main.module.lambda.aws_lambda_function_url.this",
            "module.test-main.module.lambda.aws_lambda_layer_version.this",
            "module.test-main.module.lambda.aws_lambda_permission.current_version_triggers",
            "module.test-main.module.lambda.aws_lambda_permission.unqualified_alias_triggers",
            "module.test-main.module.lambda.aws_lambda_provisioned_concurrency_config.current_version",
            "module.test-main.module.lambda.aws_s3_object.lambda_package",
            "module.test-main.module.lambda.data.aws_arn.log_group_arn",
            "module.test-main.module.lambda.data.aws_cloudwatch_log_group.lambda",
            "module.test-main.module.lambda.data.aws_iam_policy.tracing",
            "module.test-main.module.lambda.data.aws_iam_policy.vpc",
            "module.test-main.module.lambda.data.aws_iam_policy_document.additional_inline",
            "module.test-main.module.lambda.data.aws_iam_policy_document.assume_role",
            "module.test-main.module.lambda.data.aws_iam_policy_document.async",
            "module.test-main.module.lambda.data.aws_iam_policy_document.dead_letter",
            "module.test-main.module.lambda.data.aws_iam_policy_document.logs",
            "module.test-main.module.lambda.data.aws_partition.current",
            "module.test-main.module.lambda.data.external.archive_prepare",
            "module.test-main.module.lambda.local_file.archive_plan",
            "module.test-main.module.lambda.null_resource.archive",
            "module.test-main.module.s3.aws_s3_bucket.this",
            "module.test-main.module.s3.aws_s3_bucket_policy.this",
            "module.test-main.module.security.aws_iam_instance_profile.polygon_edge_node",
            "module.test-main.module.security.aws_iam_role.polygon_edge_node",
            "module.test-main.module.security.aws_security_group.polygon_internal",
            "module.test-main.module.security.data.aws_iam_policy_document.ec2_trust",
            "module.test-main.module.user_data.data.template_cloudinit_config.polygon_edge",
            "module.test-main.module.user_data.data.template_file.polygon_edge_node",
            "module.test-main.module.user_data.data.template_file.polygon_edge_server",
            "module.test-main.module.vpc.aws_subnet.private",
            "module.test-main.module.vpc.aws_vpc.main",
            "module.test-main.module.vpc.aws_vpc_ipv4_cidr_block_association.secondary",
            "module.test-main.module.vpc.data.aws_availability_zones.current",
            "module.test-main.module.vpc.data.aws_vpc_ipam_preview_next_cidr.main",
            "module.test-main.module.vpc.data.awscc_ec2_vpc.main"
          ]
        }
      ]
    },
    {
      "module": "module.test-main.module.instances[\"0\"]",
      "mode": "managed",
      "type": "aws_network_interface",
      "name": "instance_interface",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "arn": "arn:aws:ec2:us-west-2:897347591745:network-interface/eni-060cca898216457a6",
            "attachment": [],
            "description": "",
            "id": "eni-060cca898216457a6",
            "interface_type": "interface",
            "ipv4_prefix_count": 0,
            "ipv4_prefixes": [],
            "ipv6_address_count": 0,
            "ipv6_address_list": [],
            "ipv6_address_list_enabled": false,
            "ipv6_addresses": [],
            "ipv6_prefix_count": 0,
            "ipv6_prefixes": [],
            "mac_address": "06:1f:ff:79:1a:1f",
            "outpost_arn": "",
            "owner_id": "897347591745",
            "private_dns_name": "ip-10-250-0-107.us-west-2.compute.internal",
            "private_ip": "10.250.0.107",
            "private_ip_list": [
              "10.250.0.107"
            ],
            "private_ip_list_enabled": false,
            "private_ips": [
              "10.250.0.107"
            ],
            "private_ips_count": 0,
            "security_groups": [
              "sg-072527d2b77b17da4"
            ],
            "source_dest_check": true,
            "subnet_id": "subnet-0037bee82e69b1ad5",
            "tags": {
              "Name": "Polygon_Edge_Instance_Interface"
            },
            "tags_all": {
              "Name": "Polygon_Edge_Instance_Interface"
            }
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "module.test-main.data.aws_availability_zones.current",
            "module.test-main.data.aws_iam_policy_document.genesis_s3",
            "module.test-main.data.aws_iam_policy_document.genesis_ssm",
            "module.test-main.module.lambda.aws_cloudwatch_log_group.lambda",
            "module.test-main.module.lambda.aws_iam_policy.additional_inline",
            "module.test-main.module.lambda.aws_iam_policy.additional_json",
            "module.test-main.module.lambda.aws_iam_policy.additional_jsons",
            "module.test-main.module.lambda.aws_iam_policy.async",
            "module.test-main.module.lambda.aws_iam_policy.dead_letter",
            "module.test-main.module.lambda.aws_iam_policy.logs",
            "module.test-main.module.lambda.aws_iam_policy.tracing",
            "module.test-main.module.lambda.aws_iam_policy.vpc",
            "module.test-main.module.lambda.aws_iam_role.lambda",
            "module.test-main.module.lambda.aws_iam_role_policy_attachment.additional_inline",
            "module.test-main.module.lambda.aws_iam_role_policy_attachment.additional_json",
            "module.test-main.module.lambda.aws_iam_role_policy_attachment.additional_jsons",
            "module.test-main.module.lambda.aws_iam_role_policy_attachment.additional_many",
            "module.test-main.module.lambda.aws_iam_role_policy_attachment.additional_one",
            "module.test-main.module.lambda.aws_iam_role_policy_attachment.async",
            "module.test-main.module.lambda.aws_iam_role_policy_attachment.dead_letter",
            "module.test-main.module.lambda.aws_iam_role_policy_attachment.logs",
            "module.test-main.module.lambda.aws_iam_role_policy_attachment.tracing",
            "module.test-main.module.lambda.aws_iam_role_policy_attachment.vpc",
            "module.test-main.module.lambda.aws_lambda_event_source_mapping.this",
            "module.test-main.module.lambda.aws_lambda_function.this",
            "module.test-main.module.lambda.aws_lambda_function_event_invoke_config.this",
            "module.test-main.module.lambda.aws_lambda_function_url.this",
            "module.test-main.module.lambda.aws_lambda_layer_version.this",
            "module.test-main.module.lambda.aws_lambda_permission.current_version_triggers",
            "module.test-main.module.lambda.aws_lambda_permission.unqualified_alias_triggers",
            "module.test-main.module.lambda.aws_lambda_provisioned_concurrency_config.current_version",
            "module.test-main.module.lambda.aws_s3_object.lambda_package",
            "module.test-main.module.lambda.data.aws_arn.log_group_arn",
            "module.test-main.module.lambda.data.aws_cloudwatch_log_group.lambda",
            "module.test-main.module.lambda.data.aws_iam_policy.tracing",
            "module.test-main.module.lambda.data.aws_iam_policy.vpc",
            "module.test-main.module.lambda.data.aws_iam_policy_document.additional_inline",
            "module.test-main.module.lambda.data.aws_iam_policy_document.assume_role",
            "module.test-main.module.lambda.data.aws_iam_policy_document.async",
            "module.test-main.module.lambda.data.aws_iam_policy_document.dead_letter",
            "module.test-main.module.lambda.data.aws_iam_policy_document.logs",
            "module.test-main.module.lambda.data.aws_partition.current",
            "module.test-main.module.lambda.data.external.archive_prepare",
            "module.test-main.module.lambda.local_file.archive_plan",
            "module.test-main.module.lambda.null_resource.archive",
            "module.test-main.module.s3.aws_s3_bucket.this",
            "module.test-main.module.security.aws_security_group.polygon_internal",
            "module.test-main.module.vpc.aws_subnet.private",
            "module.test-main.module.vpc.aws_vpc.main",
            "module.test-main.module.vpc.aws_vpc_ipv4_cidr_block_association.secondary",
            "module.test-main.module.vpc.data.aws_availability_zones.current",
            "module.test-main.module.vpc.data.aws_vpc_ipam_preview_next_cidr.main",
            "module.test-main.module.vpc.data.awscc_ec2_vpc.main"
          ]
        }
      ]
    },
    {
      "module": "module.test-main.module.instances[\"0\"]",
      "mode": "managed",
      "type": "aws_volume_attachment",
      "name": "attach_chain_data",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "device_name": "/dev/sdf",
            "force_detach": true,
            "id": "vai-233341999",
            "instance_id": "i-0492174b0af6ff719",
            "skip_destroy": null,
            "stop_instance_before_detaching": null,
            "timeouts": null,
            "volume_id": "vol-0ab12c8c8d1ef70d0"
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjozMDAwMDAwMDAwMDAsImRlbGV0ZSI6MzAwMDAwMDAwMDAwfX0=",
          "dependencies": [
            "module.test-main.data.aws_availability_zones.current",
            "module.test-main.data.aws_iam_policy_document.genesis_s3",
            "module.test-main.data.aws_iam_policy_document.genesis_ssm",
            "module.test-main.data.aws_region.current",
            "module.test-main.module.instances.aws_ebs_volume.chain_data",
            "module.test-main.module.instances.aws_instance.polygon_edge_instance",
            "module.test-main.module.instances.aws_network_interface.instance_interface",
            "module.test-main.module.instances.data.aws_ami.ubuntu_20_04",
            "module.test-main.module.lambda.aws_cloudwatch_log_group.lambda",
            "module.test-main.module.lambda.aws_iam_policy.additional_inline",
            "module.test-main.module.lambda.aws_iam_policy.additional_json",
            "module.test-main.module.lambda.aws_iam_policy.additional_jsons",
            "module.test-main.module.lambda.aws_iam_policy.async",
            "module.test-main.module.lambda.aws_iam_policy.dead_letter",
            "module.test-main.module.lambda.aws_iam_policy.logs",
            "module.test-main.module.lambda.aws_iam_policy.tracing",
            "module.test-main.module.lambda.aws_iam_policy.vpc",
            "module.test-main.module.lambda.aws_iam_role.lambda",
            "module.test-main.module.lambda.aws_iam_role_policy_attachment.additional_inline",
            "module.test-main.module.lambda.aws_iam_role_policy_attachment.additional_json",
            "module.test-main.module.lambda.aws_iam_role_policy_attachment.additional_jsons",
            "module.test-main.module.lambda.aws_iam_role_policy_attachment.additional_many",
            "module.test-main.module.lambda.aws_iam_role_policy_attachment.additional_one",
            "module.test-main.module.lambda.aws_iam_role_policy_attachment.async",
            "module.test-main.module.lambda.aws_iam_role_policy_attachment.dead_letter",
            "module.test-main.module.lambda.aws_iam_role_policy_attachment.logs",
            "module.test-main.module.lambda.aws_iam_role_policy_attachment.tracing",
            "module.test-main.module.lambda.aws_iam_role_policy_attachment.vpc",
            "module.test-main.module.lambda.aws_lambda_event_source_mapping.this",
            "module.test-main.module.lambda.aws_lambda_function.this",
            "module.test-main.module.lambda.aws_lambda_function_event_invoke_config.this",
            "module.test-main.module.lambda.aws_lambda_function_url.this",
            "module.test-main.module.lambda.aws_lambda_layer_version.this",
            "module.test-main.module.lambda.aws_lambda_permission.current_version_triggers",
            "module.test-main.module.lambda.aws_lambda_permission.unqualified_alias_triggers",
            "module.test-main.module.lambda.aws_lambda_provisioned_concurrency_config.current_version",
            "module.test-main.module.lambda.aws_s3_object.lambda_package",
            "module.test-main.module.lambda.data.aws_arn.log_group_arn",
            "module.test-main.module.lambda.data.aws_cloudwatch_log_group.lambda",
            "module.test-main.module.lambda.data.aws_iam_policy.tracing",
            "module.test-main.module.lambda.data.aws_iam_policy.vpc",
            "module.test-main.module.lambda.data.aws_iam_policy_document.additional_inline",
            "module.test-main.module.lambda.data.aws_iam_policy_document.assume_role",
            "module.test-main.module.lambda.data.aws_iam_policy_document.async",
            "module.test-main.module.lambda.data.aws_iam_policy_document.dead_letter",
            "module.test-main.module.lambda.data.aws_iam_policy_document.logs",
            "module.test-main.module.lambda.data.aws_partition.current",
            "module.test-main.module.lambda.data.external.archive_prepare",
            "module.test-main.module.lambda.local_file.archive_plan",
            "module.test-main.module.lambda.null_resource.archive",
            "module.test-main.module.s3.aws_s3_bucket.this",
            "module.test-main.module.s3.aws_s3_bucket_policy.this",
            "module.test-main.module.security.aws_iam_instance_profile.polygon_edge_node",
            "module.test-main.module.security.aws_iam_role.polygon_edge_node",
            "module.test-main.module.security.aws_security_group.polygon_internal",
            "module.test-main.module.security.data.aws_iam_policy_document.ec2_trust",
            "module.test-main.module.user_data.data.template_cloudinit_config.polygon_edge",
            "module.test-main.module.user_data.data.template_file.polygon_edge_node",
            "module.test-main.module.user_data.data.template_file.polygon_edge_server",
            "module.test-main.module.vpc.aws_subnet.private",
            "module.test-main.module.vpc.aws_vpc.main",
            "module.test-main.module.vpc.aws_vpc_ipv4_cidr_block_association.secondary",
            "module.test-main.module.vpc.data.aws_availability_zones.current",
            "module.test-main.module.vpc.data.aws_vpc_ipam_preview_next_cidr.main",
            "module.test-main.module.vpc.data.awscc_ec2_vpc.main"
          ]
        }
      ]
    },
    {
      "module": "module.test-main.module.instances[\"1\"]",
      "mode": "data",
      "type": "aws_ami",
      "name": "ubuntu_20_04",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "architecture": "x86_64",
            "arn": "arn:aws:ec2:us-west-2::image/ami-0080e1081b2c5aef6",
            "block_device_mappings": [
              {
                "device_name": "/dev/sda1",
                "ebs": {
                  "delete_on_termination": "true",
                  "encrypted": "false",
                  "iops": "0",
                  "snapshot_id": "snap-071e286744ad07ce8",
                  "throughput": "0",
                  "volume_size": "8",
                  "volume_type": "gp2"
                },
                "no_device": "",
                "virtual_name": ""
              },
              {
                "device_name": "/dev/sdb",
                "ebs": {},
                "no_device": "",
                "virtual_name": "ephemeral0"
              },
              {
                "device_name": "/dev/sdc",
                "ebs": {},
                "no_device": "",
                "virtual_name": "ephemeral1"
              }
            ],
            "boot_mode": "",
            "creation_date": "2022-11-16T00:07:24.000Z",
            "deprecation_time": "2024-11-16T00:07:24.000Z",
            "description": "Canonical, Ubuntu, 20.04 LTS, amd64 focal image build on 2022-11-15",
            "ena_support": true,
            "executable_users": null,
            "filter": [
              {
                "name": "name",
                "values": [
                  "ubuntu/images/hvm-ssd/ubuntu-focal-20.04-amd64-server-*"
                ]
              },
              {
                "name": "virtualization-type",
                "values": [
                  "hvm"
                ]
              }
            ],
            "hypervisor": "xen",
            "id": "ami-0080e1081b2c5aef6",
            "image_id": "ami-0080e1081b2c5aef6",
            "image_location": "amazon/ubuntu/images/hvm-ssd/ubuntu-focal-20.04-amd64-server-20221115.1",
            "image_owner_alias": "amazon",
            "image_type": "machine",
            "imds_support": "",
            "include_deprecated": false,
            "kernel_id": "",
            "most_recent": true,
            "name": "ubuntu/images/hvm-ssd/ubuntu-focal-20.04-amd64-server-20221115.1",
            "name_regex": null,
            "owner_id": "099720109477",
            "owners": [
              "099720109477"
            ],
            "platform": "",
            "platform_details": "Linux/UNIX",
            "product_codes": [],
            "public": true,
            "ramdisk_id": "",
            "root_device_name": "/dev/sda1",
            "root_device_type": "ebs",
            "root_snapshot_id": "snap-071e286744ad07ce8",
            "sriov_net_support": "simple",
            "state": "available",
            "state_reason": {
              "code": "UNSET",
              "message": "UNSET"
            },
            "tags": {},
            "timeouts": null,
            "tpm_support": "",
            "usage_operation": "RunInstances",
            "virtualization_type": "hvm"
          },
          "sensitive_attributes": []
        }
      ]
    },
    {
      "module": "module.test-main.module.instances[\"1\"]",
      "mode": "managed",
      "type": "aws_ebs_volume",
      "name": "chain_data",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "arn": "arn:aws:ec2:us-west-2:897347591745:volume/vol-0835680a4e5e3ce7e",
            "availability_zone": "us-west-2b",
            "encrypted": true,
            "final_snapshot": false,
            "id": "vol-0835680a4e5e3ce7e",
            "iops": 100,
            "kms_key_id": "arn:aws:kms:us-west-2:897347591745:key/40b4ce1c-6898-40c6-a618-0ae0cd6e6924",
            "multi_attach_enabled": false,
            "outpost_arn": "",
            "size": 30,
            "snapshot_id": "",
            "tags": {
              "Name": "Polygon_Edge_chain_data_volume"
            },
            "tags_all": {
              "Name": "Polygon_Edge_chain_data_volume"
            },
            "throughput": 0,
            "timeouts": null,
            "type": "gp2"
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjozMDAwMDAwMDAwMDAsImRlbGV0ZSI6MzAwMDAwMDAwMDAwLCJ1cGRhdGUiOjMwMDAwMDAwMDAwMH19",
          "dependencies": [
            "module.test-main.data.aws_availability_zones.current",
            "module.test-main.data.aws_iam_policy_document.genesis_s3",
            "module.test-main.data.aws_iam_policy_document.genesis_ssm",
            "module.test-main.module.lambda.aws_cloudwatch_log_group.lambda",
            "module.test-main.module.lambda.aws_iam_policy.additional_inline",
            "module.test-main.module.lambda.aws_iam_policy.additional_json",
            "module.test-main.module.lambda.aws_iam_policy.additional_jsons",
            "module.test-main.module.lambda.aws_iam_policy.async",
            "module.test-main.module.lambda.aws_iam_policy.dead_letter",
            "module.test-main.module.lambda.aws_iam_policy.logs",
            "module.test-main.module.lambda.aws_iam_policy.tracing",
            "module.test-main.module.lambda.aws_iam_policy.vpc",
            "module.test-main.module.lambda.aws_iam_role.lambda",
            "module.test-main.module.lambda.aws_iam_role_policy_attachment.additional_inline",
            "module.test-main.module.lambda.aws_iam_role_policy_attachment.additional_json",
            "module.test-main.module.lambda.aws_iam_role_policy_attachment.additional_jsons",
            "module.test-main.module.lambda.aws_iam_role_policy_attachment.additional_many",
            "module.test-main.module.lambda.aws_iam_role_policy_attachment.additional_one",
            "module.test-main.module.lambda.aws_iam_role_policy_attachment.async",
            "module.test-main.module.lambda.aws_iam_role_policy_attachment.dead_letter",
            "module.test-main.module.lambda.aws_iam_role_policy_attachment.logs",
            "module.test-main.module.lambda.aws_iam_role_policy_attachment.tracing",
            "module.test-main.module.lambda.aws_iam_role_policy_attachment.vpc",
            "module.test-main.module.lambda.aws_lambda_event_source_mapping.this",
            "module.test-main.module.lambda.aws_lambda_function.this",
            "module.test-main.module.lambda.aws_lambda_function_event_invoke_config.this",
            "module.test-main.module.lambda.aws_lambda_function_url.this",
            "module.test-main.module.lambda.aws_lambda_layer_version.this",
            "module.test-main.module.lambda.aws_lambda_permission.current_version_triggers",
            "module.test-main.module.lambda.aws_lambda_permission.unqualified_alias_triggers",
            "module.test-main.module.lambda.aws_lambda_provisioned_concurrency_config.current_version",
            "module.test-main.module.lambda.aws_s3_object.lambda_package",
            "module.test-main.module.lambda.data.aws_arn.log_group_arn",
            "module.test-main.module.lambda.data.aws_cloudwatch_log_group.lambda",
            "module.test-main.module.lambda.data.aws_iam_policy.tracing",
            "module.test-main.module.lambda.data.aws_iam_policy.vpc",
            "module.test-main.module.lambda.data.aws_iam_policy_document.additional_inline",
            "module.test-main.module.lambda.data.aws_iam_policy_document.assume_role",
            "module.test-main.module.lambda.data.aws_iam_policy_document.async",
            "module.test-main.module.lambda.data.aws_iam_policy_document.dead_letter",
            "module.test-main.module.lambda.data.aws_iam_policy_document.logs",
            "module.test-main.module.lambda.data.aws_partition.current",
            "module.test-main.module.lambda.data.external.archive_prepare",
            "module.test-main.module.lambda.local_file.archive_plan",
            "module.test-main.module.lambda.null_resource.archive",
            "module.test-main.module.s3.aws_s3_bucket.this"
          ]
        }
      ]
    },
    {
      "module": "module.test-main.module.instances[\"1\"]",
      "mode": "managed",
      "type": "aws_instance",
      "name": "polygon_edge_instance",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 1,
          "attributes": {
            "ami": "ami-0080e1081b2c5aef6",
            "arn": "arn:aws:ec2:us-west-2:897347591745:instance/i-07678f282df195df2",
            "associate_public_ip_address": false,
            "availability_zone": "us-west-2b",
            "capacity_reservation_specification": [
              {
                "capacity_reservation_preference": "open",
                "capacity_reservation_target": []
              }
            ],
            "cpu_core_count": 1,
            "cpu_threads_per_core": 2,
            "credit_specification": [
              {
                "cpu_credits": "unlimited"
              }
            ],
            "disable_api_stop": false,
            "disable_api_termination": false,
            "ebs_block_device": [],
            "ebs_optimized": false,
            "enclave_options": [
              {
                "enabled": false
              }
            ],
            "ephemeral_block_device": [],
            "get_password_data": false,
            "hibernation": false,
            "host_id": null,
            "host_resource_group_arn": null,
            "iam_instance_profile": "polygon-edge-node-20221123172546492000000006",
            "id": "i-07678f282df195df2",
            "instance_initiated_shutdown_behavior": "stop",
            "instance_state": "running",
            "instance_type": "t3.medium",
            "ipv6_address_count": 0,
            "ipv6_addresses": [],
            "key_name": "",
            "launch_template": [],
            "maintenance_options": [
              {
                "auto_recovery": "default"
              }
            ],
            "metadata_options": [
              {
                "http_endpoint": "enabled",
                "http_put_response_hop_limit": 1,
                "http_tokens": "required",
                "instance_metadata_tags": "disabled"
              }
            ],
            "monitoring": false,
            "network_interface": [
              {
                "delete_on_termination": false,
                "device_index": 0,
                "network_card_index": 0,
                "network_interface_id": "eni-0d99ce1653486cdbd"
              }
            ],
            "outpost_arn": "",
            "password_data": "",
            "placement_group": "",
            "placement_partition_number": null,
            "primary_network_interface_id": "eni-0d99ce1653486cdbd",
            "private_dns": "ip-10-250-1-124.us-west-2.compute.internal",
            "private_dns_name_options": [
              {
                "enable_resource_name_dns_a_record": false,
                "enable_resource_name_dns_aaaa_record": false,
                "hostname_type": "ip-name"
              }
            ],
            "private_ip": "10.250.1.124",
            "public_dns": "",
            "public_ip": "",
            "root_block_device": [
              {
                "delete_on_termination": true,
                "device_name": "/dev/sda1",
                "encrypted": true,
                "iops": 100,
                "kms_key_id": "arn:aws:kms:us-west-2:897347591745:key/40b4ce1c-6898-40c6-a618-0ae0cd6e6924",
                "tags": {
                  "Name": "Polygon_Edge_Root_Volume"
                },
                "throughput": 0,
                "volume_id": "vol-0dc9648adeb3eee50",
                "volume_size": 8,
                "volume_type": "gp2"
              }
            ],
            "secondary_private_ips": [],
            "security_groups": [],
            "source_dest_check": true,
            "subnet_id": "subnet-06b9ebee4df3c4fa2",
            "tags": {
              "Name": "Polygon_Edge_Node"
            },
            "tags_all": {
              "Name": "Polygon_Edge_Node"
            },
            "tenancy": "default",
            "timeouts": null,
            "user_data": null,
            "user_data_base64": "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",
            "user_data_replace_on_change": false,
            "volume_tags": null,
            "vpc_security_group_ids": [
              "sg-072527d2b77b17da4"
            ]
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMDAsImRlbGV0ZSI6MTIwMDAwMDAwMDAwMCwidXBkYXRlIjo2MDAwMDAwMDAwMDB9LCJzY2hlbWFfdmVyc2lvbiI6IjEifQ==",
          "dependencies": [
            "module.test-main.data.aws_availability_zones.current",
            "module.test-main.data.aws_iam_policy_document.genesis_s3",
            "module.test-main.data.aws_iam_policy_document.genesis_ssm",
            "module.test-main.data.aws_region.current",
            "module.test-main.module.instances.aws_network_interface.instance_interface",
            "module.test-main.module.instances.data.aws_ami.ubuntu_20_04",
            "module.test-main.module.lambda.aws_cloudwatch_log_group.lambda",
            "module.test-main.module.lambda.aws_iam_policy.additional_inline",
            "module.test-main.module.lambda.aws_iam_policy.additional_json",
            "module.test-main.module.lambda.aws_iam_policy.additional_jsons",
            "module.test-main.module.lambda.aws_iam_policy.async",
            "module.test-main.module.lambda.aws_iam_policy.dead_letter",
            "module.test-main.module.lambda.aws_iam_policy.logs",
            "module.test-main.module.lambda.aws_iam_policy.tracing",
            "module.test-main.module.lambda.aws_iam_policy.vpc",
            "module.test-main.module.lambda.aws_iam_role.lambda",
            "module.test-main.module.lambda.aws_iam_role_policy_attachment.additional_inline",
            "module.test-main.module.lambda.aws_iam_role_policy_attachment.additional_json",
            "module.test-main.module.lambda.aws_iam_role_policy_attachment.additional_jsons",
            "module.test-main.module.lambda.aws_iam_role_policy_attachment.additional_many",
            "module.test-main.module.lambda.aws_iam_role_policy_attachment.additional_one",
            "module.test-main.module.lambda.aws_iam_role_policy_attachment.async",
            "module.test-main.module.lambda.aws_iam_role_policy_attachment.dead_letter",
            "module.test-main.module.lambda.aws_iam_role_policy_attachment.logs",
            "module.test-main.module.lambda.aws_iam_role_policy_attachment.tracing",
            "module.test-main.module.lambda.aws_iam_role_policy_attachment.vpc",
            "module.test-main.module.lambda.aws_lambda_event_source_mapping.this",
            "module.test-main.module.lambda.aws_lambda_function.this",
            "module.test-main.module.lambda.aws_lambda_function_event_invoke_config.this",
            "module.test-main.module.lambda.aws_lambda_function_url.this",
            "module.test-main.module.lambda.aws_lambda_layer_version.this",
            "module.test-main.module.lambda.aws_lambda_permission.current_version_triggers",
            "module.test-main.module.lambda.aws_lambda_permission.unqualified_alias_triggers",
            "module.test-main.module.lambda.aws_lambda_provisioned_concurrency_config.current_version",
            "module.test-main.module.lambda.aws_s3_object.lambda_package",
            "module.test-main.module.lambda.data.aws_arn.log_group_arn",
            "module.test-main.module.lambda.data.aws_cloudwatch_log_group.lambda",
            "module.test-main.module.lambda.data.aws_iam_policy.tracing",
            "module.test-main.module.lambda.data.aws_iam_policy.vpc",
            "module.test-main.module.lambda.data.aws_iam_policy_document.additional_inline",
            "module.test-main.module.lambda.data.aws_iam_policy_document.assume_role",
            "module.test-main.module.lambda.data.aws_iam_policy_document.async",
            "module.test-main.module.lambda.data.aws_iam_policy_document.dead_letter",
            "module.test-main.module.lambda.data.aws_iam_policy_document.logs",
            "module.test-main.module.lambda.data.aws_partition.current",
            "module.test-main.module.lambda.data.external.archive_prepare",
            "module.test-main.module.lambda.local_file.archive_plan",
            "module.test-main.module.lambda.null_resource.archive",
            "module.test-main.module.s3.aws_s3_bucket.this",
            "module.test-main.module.s3.aws_s3_bucket_policy.this",
            "module.test-main.module.security.aws_iam_instance_profile.polygon_edge_node",
            "module.test-main.module.security.aws_iam_role.polygon_edge_node",
            "module.test-main.module.security.aws_security_group.polygon_internal",
            "module.test-main.module.security.data.aws_iam_policy_document.ec2_trust",
            "module.test-main.module.user_data.data.template_cloudinit_config.polygon_edge",
            "module.test-main.module.user_data.data.template_file.polygon_edge_node",
            "module.test-main.module.user_data.data.template_file.polygon_edge_server",
            "module.test-main.module.vpc.aws_subnet.private",
            "module.test-main.module.vpc.aws_vpc.main",
            "module.test-main.module.vpc.aws_vpc_ipv4_cidr_block_association.secondary",
            "module.test-main.module.vpc.data.aws_availability_zones.current",
            "module.test-main.module.vpc.data.aws_vpc_ipam_preview_next_cidr.main",
            "module.test-main.module.vpc.data.awscc_ec2_vpc.main"
          ]
        }
      ]
    },
    {
      "module": "module.test-main.module.instances[\"1\"]",
      "mode": "managed",
      "type": "aws_network_interface",
      "name": "instance_interface",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "arn": "arn:aws:ec2:us-west-2:897347591745:network-interface/eni-0d99ce1653486cdbd",
            "attachment": [],
            "description": "",
            "id": "eni-0d99ce1653486cdbd",
            "interface_type": "interface",
            "ipv4_prefix_count": 0,
            "ipv4_prefixes": [],
            "ipv6_address_count": 0,
            "ipv6_address_list": [],
            "ipv6_address_list_enabled": false,
            "ipv6_addresses": [],
            "ipv6_prefix_count": 0,
            "ipv6_prefixes": [],
            "mac_address": "02:d0:98:9b:d2:49",
            "outpost_arn": "",
            "owner_id": "897347591745",
            "private_dns_name": "ip-10-250-1-124.us-west-2.compute.internal",
            "private_ip": "10.250.1.124",
            "private_ip_list": [
              "10.250.1.124"
            ],
            "private_ip_list_enabled": false,
            "private_ips": [
              "10.250.1.124"
            ],
            "private_ips_count": 0,
            "security_groups": [
              "sg-072527d2b77b17da4"
            ],
            "source_dest_check": true,
            "subnet_id": "subnet-06b9ebee4df3c4fa2",
            "tags": {
              "Name": "Polygon_Edge_Instance_Interface"
            },
            "tags_all": {
              "Name": "Polygon_Edge_Instance_Interface"
            }
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "module.test-main.data.aws_availability_zones.current",
            "module.test-main.data.aws_iam_policy_document.genesis_s3",
            "module.test-main.data.aws_iam_policy_document.genesis_ssm",
            "module.test-main.module.lambda.aws_cloudwatch_log_group.lambda",
            "module.test-main.module.lambda.aws_iam_policy.additional_inline",
            "module.test-main.module.lambda.aws_iam_policy.additional_json",
            "module.test-main.module.lambda.aws_iam_policy.additional_jsons",
            "module.test-main.module.lambda.aws_iam_policy.async",
            "module.test-main.module.lambda.aws_iam_policy.dead_letter",
            "module.test-main.module.lambda.aws_iam_policy.logs",
            "module.test-main.module.lambda.aws_iam_policy.tracing",
            "module.test-main.module.lambda.aws_iam_policy.vpc",
            "module.test-main.module.lambda.aws_iam_role.lambda",
            "module.test-main.module.lambda.aws_iam_role_policy_attachment.additional_inline",
            "module.test-main.module.lambda.aws_iam_role_policy_attachment.additional_json",
            "module.test-main.module.lambda.aws_iam_role_policy_attachment.additional_jsons",
            "module.test-main.module.lambda.aws_iam_role_policy_attachment.additional_many",
            "module.test-main.module.lambda.aws_iam_role_policy_attachment.additional_one",
            "module.test-main.module.lambda.aws_iam_role_policy_attachment.async",
            "module.test-main.module.lambda.aws_iam_role_policy_attachment.dead_letter",
            "module.test-main.module.lambda.aws_iam_role_policy_attachment.logs",
            "module.test-main.module.lambda.aws_iam_role_policy_attachment.tracing",
            "module.test-main.module.lambda.aws_iam_role_policy_attachment.vpc",
            "module.test-main.module.lambda.aws_lambda_event_source_mapping.this",
            "module.test-main.module.lambda.aws_lambda_function.this",
            "module.test-main.module.lambda.aws_lambda_function_event_invoke_config.this",
            "module.test-main.module.lambda.aws_lambda_function_url.this",
            "module.test-main.module.lambda.aws_lambda_layer_version.this",
            "module.test-main.module.lambda.aws_lambda_permission.current_version_triggers",
            "module.test-main.module.lambda.aws_lambda_permission.unqualified_alias_triggers",
            "module.test-main.module.lambda.aws_lambda_provisioned_concurrency_config.current_version",
            "module.test-main.module.lambda.aws_s3_object.lambda_package",
            "module.test-main.module.lambda.data.aws_arn.log_group_arn",
            "module.test-main.module.lambda.data.aws_cloudwatch_log_group.lambda",
            "module.test-main.module.lambda.data.aws_iam_policy.tracing",
            "module.test-main.module.lambda.data.aws_iam_policy.vpc",
            "module.test-main.module.lambda.data.aws_iam_policy_document.additional_inline",
            "module.test-main.module.lambda.data.aws_iam_policy_document.assume_role",
            "module.test-main.module.lambda.data.aws_iam_policy_document.async",
            "module.test-main.module.lambda.data.aws_iam_policy_document.dead_letter",
            "module.test-main.module.lambda.data.aws_iam_policy_document.logs",
            "module.test-main.module.lambda.data.aws_partition.current",
            "module.test-main.module.lambda.data.external.archive_prepare",
            "module.test-main.module.lambda.local_file.archive_plan",
            "module.test-main.module.lambda.null_resource.archive",
            "module.test-main.module.s3.aws_s3_bucket.this",
            "module.test-main.module.security.aws_security_group.polygon_internal",
            "module.test-main.module.vpc.aws_subnet.private",
            "module.test-main.module.vpc.aws_vpc.main",
            "module.test-main.module.vpc.aws_vpc_ipv4_cidr_block_association.secondary",
            "module.test-main.module.vpc.data.aws_availability_zones.current",
            "module.test-main.module.vpc.data.aws_vpc_ipam_preview_next_cidr.main",
            "module.test-main.module.vpc.data.awscc_ec2_vpc.main"
          ]
        }
      ]
    },
    {
      "module": "module.test-main.module.instances[\"1\"]",
      "mode": "managed",
      "type": "aws_volume_attachment",
      "name": "attach_chain_data",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "device_name": "/dev/sdf",
            "force_detach": true,
            "id": "vai-355341139",
            "instance_id": "i-07678f282df195df2",
            "skip_destroy": null,
            "stop_instance_before_detaching": null,
            "timeouts": null,
            "volume_id": "vol-0835680a4e5e3ce7e"
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjozMDAwMDAwMDAwMDAsImRlbGV0ZSI6MzAwMDAwMDAwMDAwfX0=",
          "dependencies": [
            "module.test-main.data.aws_availability_zones.current",
            "module.test-main.data.aws_iam_policy_document.genesis_s3",
            "module.test-main.data.aws_iam_policy_document.genesis_ssm",
            "module.test-main.data.aws_region.current",
            "module.test-main.module.instances.aws_ebs_volume.chain_data",
            "module.test-main.module.instances.aws_instance.polygon_edge_instance",
            "module.test-main.module.instances.aws_network_interface.instance_interface",
            "module.test-main.module.instances.data.aws_ami.ubuntu_20_04",
            "module.test-main.module.lambda.aws_cloudwatch_log_group.lambda",
            "module.test-main.module.lambda.aws_iam_policy.additional_inline",
            "module.test-main.module.lambda.aws_iam_policy.additional_json",
            "module.test-main.module.lambda.aws_iam_policy.additional_jsons",
            "module.test-main.module.lambda.aws_iam_policy.async",
            "module.test-main.module.lambda.aws_iam_policy.dead_letter",
            "module.test-main.module.lambda.aws_iam_policy.logs",
            "module.test-main.module.lambda.aws_iam_policy.tracing",
            "module.test-main.module.lambda.aws_iam_policy.vpc",
            "module.test-main.module.lambda.aws_iam_role.lambda",
            "module.test-main.module.lambda.aws_iam_role_policy_attachment.additional_inline",
            "module.test-main.module.lambda.aws_iam_role_policy_attachment.additional_json",
            "module.test-main.module.lambda.aws_iam_role_policy_attachment.additional_jsons",
            "module.test-main.module.lambda.aws_iam_role_policy_attachment.additional_many",
            "module.test-main.module.lambda.aws_iam_role_policy_attachment.additional_one",
            "module.test-main.module.lambda.aws_iam_role_policy_attachment.async",
            "module.test-main.module.lambda.aws_iam_role_policy_attachment.dead_letter",
            "module.test-main.module.lambda.aws_iam_role_policy_attachment.logs",
            "module.test-main.module.lambda.aws_iam_role_policy_attachment.tracing",
            "module.test-main.module.lambda.aws_iam_role_policy_attachment.vpc",
            "module.test-main.module.lambda.aws_lambda_event_source_mapping.this",
            "module.test-main.module.lambda.aws_lambda_function.this",
            "module.test-main.module.lambda.aws_lambda_function_event_invoke_config.this",
            "module.test-main.module.lambda.aws_lambda_function_url.this",
            "module.test-main.module.lambda.aws_lambda_layer_version.this",
            "module.test-main.module.lambda.aws_lambda_permission.current_version_triggers",
            "module.test-main.module.lambda.aws_lambda_permission.unqualified_alias_triggers",
            "module.test-main.module.lambda.aws_lambda_provisioned_concurrency_config.current_version",
            "module.test-main.module.lambda.aws_s3_object.lambda_package",
            "module.test-main.module.lambda.data.aws_arn.log_group_arn",
            "module.test-main.module.lambda.data.aws_cloudwatch_log_group.lambda",
            "module.test-main.module.lambda.data.aws_iam_policy.tracing",
            "module.test-main.module.lambda.data.aws_iam_policy.vpc",
            "module.test-main.module.lambda.data.aws_iam_policy_document.additional_inline",
            "module.test-main.module.lambda.data.aws_iam_policy_document.assume_role",
            "module.test-main.module.lambda.data.aws_iam_policy_document.async",
            "module.test-main.module.lambda.data.aws_iam_policy_document.dead_letter",
            "module.test-main.module.lambda.data.aws_iam_policy_document.logs",
            "module.test-main.module.lambda.data.aws_partition.current",
            "module.test-main.module.lambda.data.external.archive_prepare",
            "module.test-main.module.lambda.local_file.archive_plan",
            "module.test-main.module.lambda.null_resource.archive",
            "module.test-main.module.s3.aws_s3_bucket.this",
            "module.test-main.module.s3.aws_s3_bucket_policy.this",
            "module.test-main.module.security.aws_iam_instance_profile.polygon_edge_node",
            "module.test-main.module.security.aws_iam_role.polygon_edge_node",
            "module.test-main.module.security.aws_security_group.polygon_internal",
            "module.test-main.module.security.data.aws_iam_policy_document.ec2_trust",
            "module.test-main.module.user_data.data.template_cloudinit_config.polygon_edge",
            "module.test-main.module.user_data.data.template_file.polygon_edge_node",
            "module.test-main.module.user_data.data.template_file.polygon_edge_server",
            "module.test-main.module.vpc.aws_subnet.private",
            "module.test-main.module.vpc.aws_vpc.main",
            "module.test-main.module.vpc.aws_vpc_ipv4_cidr_block_association.secondary",
            "module.test-main.module.vpc.data.aws_availability_zones.current",
            "module.test-main.module.vpc.data.aws_vpc_ipam_preview_next_cidr.main",
            "module.test-main.module.vpc.data.awscc_ec2_vpc.main"
          ]
        }
      ]
    },
    {
      "module": "module.test-main.module.instances[\"2\"]",
      "mode": "data",
      "type": "aws_ami",
      "name": "ubuntu_20_04",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "architecture": "x86_64",
            "arn": "arn:aws:ec2:us-west-2::image/ami-0080e1081b2c5aef6",
            "block_device_mappings": [
              {
                "device_name": "/dev/sda1",
                "ebs": {
                  "delete_on_termination": "true",
                  "encrypted": "false",
                  "iops": "0",
                  "snapshot_id": "snap-071e286744ad07ce8",
                  "throughput": "0",
                  "volume_size": "8",
                  "volume_type": "gp2"
                },
                "no_device": "",
                "virtual_name": ""
              },
              {
                "device_name": "/dev/sdb",
                "ebs": {},
                "no_device": "",
                "virtual_name": "ephemeral0"
              },
              {
                "device_name": "/dev/sdc",
                "ebs": {},
                "no_device": "",
                "virtual_name": "ephemeral1"
              }
            ],
            "boot_mode": "",
            "creation_date": "2022-11-16T00:07:24.000Z",
            "deprecation_time": "2024-11-16T00:07:24.000Z",
            "description": "Canonical, Ubuntu, 20.04 LTS, amd64 focal image build on 2022-11-15",
            "ena_support": true,
            "executable_users": null,
            "filter": [
              {
                "name": "name",
                "values": [
                  "ubuntu/images/hvm-ssd/ubuntu-focal-20.04-amd64-server-*"
                ]
              },
              {
                "name": "virtualization-type",
                "values": [
                  "hvm"
                ]
              }
            ],
            "hypervisor": "xen",
            "id": "ami-0080e1081b2c5aef6",
            "image_id": "ami-0080e1081b2c5aef6",
            "image_location": "amazon/ubuntu/images/hvm-ssd/ubuntu-focal-20.04-amd64-server-20221115.1",
            "image_owner_alias": "amazon",
            "image_type": "machine",
            "imds_support": "",
            "include_deprecated": false,
            "kernel_id": "",
            "most_recent": true,
            "name": "ubuntu/images/hvm-ssd/ubuntu-focal-20.04-amd64-server-20221115.1",
            "name_regex": null,
            "owner_id": "099720109477",
            "owners": [
              "099720109477"
            ],
            "platform": "",
            "platform_details": "Linux/UNIX",
            "product_codes": [],
            "public": true,
            "ramdisk_id": "",
            "root_device_name": "/dev/sda1",
            "root_device_type": "ebs",
            "root_snapshot_id": "snap-071e286744ad07ce8",
            "sriov_net_support": "simple",
            "state": "available",
            "state_reason": {
              "code": "UNSET",
              "message": "UNSET"
            },
            "tags": {},
            "timeouts": null,
            "tpm_support": "",
            "usage_operation": "RunInstances",
            "virtualization_type": "hvm"
          },
          "sensitive_attributes": []
        }
      ]
    },
    {
      "module": "module.test-main.module.instances[\"2\"]",
      "mode": "managed",
      "type": "aws_ebs_volume",
      "name": "chain_data",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "arn": "arn:aws:ec2:us-west-2:897347591745:volume/vol-019d91b56ed2c5610",
            "availability_zone": "us-west-2c",
            "encrypted": true,
            "final_snapshot": false,
            "id": "vol-019d91b56ed2c5610",
            "iops": 100,
            "kms_key_id": "arn:aws:kms:us-west-2:897347591745:key/40b4ce1c-6898-40c6-a618-0ae0cd6e6924",
            "multi_attach_enabled": false,
            "outpost_arn": "",
            "size": 30,
            "snapshot_id": "",
            "tags": {
              "Name": "Polygon_Edge_chain_data_volume"
            },
            "tags_all": {
              "Name": "Polygon_Edge_chain_data_volume"
            },
            "throughput": 0,
            "timeouts": null,
            "type": "gp2"
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjozMDAwMDAwMDAwMDAsImRlbGV0ZSI6MzAwMDAwMDAwMDAwLCJ1cGRhdGUiOjMwMDAwMDAwMDAwMH19",
          "dependencies": [
            "module.test-main.data.aws_availability_zones.current",
            "module.test-main.data.aws_iam_policy_document.genesis_s3",
            "module.test-main.data.aws_iam_policy_document.genesis_ssm",
            "module.test-main.module.lambda.aws_cloudwatch_log_group.lambda",
            "module.test-main.module.lambda.aws_iam_policy.additional_inline",
            "module.test-main.module.lambda.aws_iam_policy.additional_json",
            "module.test-main.module.lambda.aws_iam_policy.additional_jsons",
            "module.test-main.module.lambda.aws_iam_policy.async",
            "module.test-main.module.lambda.aws_iam_policy.dead_letter",
            "module.test-main.module.lambda.aws_iam_policy.logs",
            "module.test-main.module.lambda.aws_iam_policy.tracing",
            "module.test-main.module.lambda.aws_iam_policy.vpc",
            "module.test-main.module.lambda.aws_iam_role.lambda",
            "module.test-main.module.lambda.aws_iam_role_policy_attachment.additional_inline",
            "module.test-main.module.lambda.aws_iam_role_policy_attachment.additional_json",
            "module.test-main.module.lambda.aws_iam_role_policy_attachment.additional_jsons",
            "module.test-main.module.lambda.aws_iam_role_policy_attachment.additional_many",
            "module.test-main.module.lambda.aws_iam_role_policy_attachment.additional_one",
            "module.test-main.module.lambda.aws_iam_role_policy_attachment.async",
            "module.test-main.module.lambda.aws_iam_role_policy_attachment.dead_letter",
            "module.test-main.module.lambda.aws_iam_role_policy_attachment.logs",
            "module.test-main.module.lambda.aws_iam_role_policy_attachment.tracing",
            "module.test-main.module.lambda.aws_iam_role_policy_attachment.vpc",
            "module.test-main.module.lambda.aws_lambda_event_source_mapping.this",
            "module.test-main.module.lambda.aws_lambda_function.this",
            "module.test-main.module.lambda.aws_lambda_function_event_invoke_config.this",
            "module.test-main.module.lambda.aws_lambda_function_url.this",
            "module.test-main.module.lambda.aws_lambda_layer_version.this",
            "module.test-main.module.lambda.aws_lambda_permission.current_version_triggers",
            "module.test-main.module.lambda.aws_lambda_permission.unqualified_alias_triggers",
            "module.test-main.module.lambda.aws_lambda_provisioned_concurrency_config.current_version",
            "module.test-main.module.lambda.aws_s3_object.lambda_package",
            "module.test-main.module.lambda.data.aws_arn.log_group_arn",
            "module.test-main.module.lambda.data.aws_cloudwatch_log_group.lambda",
            "module.test-main.module.lambda.data.aws_iam_policy.tracing",
            "module.test-main.module.lambda.data.aws_iam_policy.vpc",
            "module.test-main.module.lambda.data.aws_iam_policy_document.additional_inline",
            "module.test-main.module.lambda.data.aws_iam_policy_document.assume_role",
            "module.test-main.module.lambda.data.aws_iam_policy_document.async",
            "module.test-main.module.lambda.data.aws_iam_policy_document.dead_letter",
            "module.test-main.module.lambda.data.aws_iam_policy_document.logs",
            "module.test-main.module.lambda.data.aws_partition.current",
            "module.test-main.module.lambda.data.external.archive_prepare",
            "module.test-main.module.lambda.local_file.archive_plan",
            "module.test-main.module.lambda.null_resource.archive",
            "module.test-main.module.s3.aws_s3_bucket.this"
          ]
        }
      ]
    },
    {
      "module": "module.test-main.module.instances[\"2\"]",
      "mode": "managed",
      "type": "aws_instance",
      "name": "polygon_edge_instance",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 1,
          "attributes": {
            "ami": "ami-0080e1081b2c5aef6",
            "arn": "arn:aws:ec2:us-west-2:897347591745:instance/i-0e0d090e6e84219cd",
            "associate_public_ip_address": false,
            "availability_zone": "us-west-2c",
            "capacity_reservation_specification": [
              {
                "capacity_reservation_preference": "open",
                "capacity_reservation_target": []
              }
            ],
            "cpu_core_count": 1,
            "cpu_threads_per_core": 2,
            "credit_specification": [
              {
                "cpu_credits": "unlimited"
              }
            ],
            "disable_api_stop": false,
            "disable_api_termination": false,
            "ebs_block_device": [],
            "ebs_optimized": false,
            "enclave_options": [
              {
                "enabled": false
              }
            ],
            "ephemeral_block_device": [],
            "get_password_data": false,
            "hibernation": false,
            "host_id": null,
            "host_resource_group_arn": null,
            "iam_instance_profile": "polygon-edge-node-20221123172546492000000006",
            "id": "i-0e0d090e6e84219cd",
            "instance_initiated_shutdown_behavior": "stop",
            "instance_state": "running",
            "instance_type": "t3.medium",
            "ipv6_address_count": 0,
            "ipv6_addresses": [],
            "key_name": "",
            "launch_template": [],
            "maintenance_options": [
              {
                "auto_recovery": "default"
              }
            ],
            "metadata_options": [
              {
                "http_endpoint": "enabled",
                "http_put_response_hop_limit": 1,
                "http_tokens": "required",
                "instance_metadata_tags": "disabled"
              }
            ],
            "monitoring": false,
            "network_interface": [
              {
                "delete_on_termination": false,
                "device_index": 0,
                "network_card_index": 0,
                "network_interface_id": "eni-0c65d6617fe90d311"
              }
            ],
            "outpost_arn": "",
            "password_data": "",
            "placement_group": "",
            "placement_partition_number": null,
            "primary_network_interface_id": "eni-0c65d6617fe90d311",
            "private_dns": "ip-10-250-2-27.us-west-2.compute.internal",
            "private_dns_name_options": [
              {
                "enable_resource_name_dns_a_record": false,
                "enable_resource_name_dns_aaaa_record": false,
                "hostname_type": "ip-name"
              }
            ],
            "private_ip": "10.250.2.27",
            "public_dns": "",
            "public_ip": "",
            "root_block_device": [
              {
                "delete_on_termination": true,
                "device_name": "/dev/sda1",
                "encrypted": true,
                "iops": 100,
                "kms_key_id": "arn:aws:kms:us-west-2:897347591745:key/40b4ce1c-6898-40c6-a618-0ae0cd6e6924",
                "tags": {
                  "Name": "Polygon_Edge_Root_Volume"
                },
                "throughput": 0,
                "volume_id": "vol-0b1b6a08b61a90848",
                "volume_size": 8,
                "volume_type": "gp2"
              }
            ],
            "secondary_private_ips": [],
            "security_groups": [],
            "source_dest_check": true,
            "subnet_id": "subnet-0ba72a769a967726a",
            "tags": {
              "Name": "Polygon_Edge_Node"
            },
            "tags_all": {
              "Name": "Polygon_Edge_Node"
            },
            "tenancy": "default",
            "timeouts": null,
            "user_data": null,
            "user_data_base64": "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",
            "user_data_replace_on_change": false,
            "volume_tags": null,
            "vpc_security_group_ids": [
              "sg-072527d2b77b17da4"
            ]
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMDAsImRlbGV0ZSI6MTIwMDAwMDAwMDAwMCwidXBkYXRlIjo2MDAwMDAwMDAwMDB9LCJzY2hlbWFfdmVyc2lvbiI6IjEifQ==",
          "dependencies": [
            "module.test-main.data.aws_availability_zones.current",
            "module.test-main.data.aws_iam_policy_document.genesis_s3",
            "module.test-main.data.aws_iam_policy_document.genesis_ssm",
            "module.test-main.data.aws_region.current",
            "module.test-main.module.instances.aws_network_interface.instance_interface",
            "module.test-main.module.instances.data.aws_ami.ubuntu_20_04",
            "module.test-main.module.lambda.aws_cloudwatch_log_group.lambda",
            "module.test-main.module.lambda.aws_iam_policy.additional_inline",
            "module.test-main.module.lambda.aws_iam_policy.additional_json",
            "module.test-main.module.lambda.aws_iam_policy.additional_jsons",
            "module.test-main.module.lambda.aws_iam_policy.async",
            "module.test-main.module.lambda.aws_iam_policy.dead_letter",
            "module.test-main.module.lambda.aws_iam_policy.logs",
            "module.test-main.module.lambda.aws_iam_policy.tracing",
            "module.test-main.module.lambda.aws_iam_policy.vpc",
            "module.test-main.module.lambda.aws_iam_role.lambda",
            "module.test-main.module.lambda.aws_iam_role_policy_attachment.additional_inline",
            "module.test-main.module.lambda.aws_iam_role_policy_attachment.additional_json",
            "module.test-main.module.lambda.aws_iam_role_policy_attachment.additional_jsons",
            "module.test-main.module.lambda.aws_iam_role_policy_attachment.additional_many",
            "module.test-main.module.lambda.aws_iam_role_policy_attachment.additional_one",
            "module.test-main.module.lambda.aws_iam_role_policy_attachment.async",
            "module.test-main.module.lambda.aws_iam_role_policy_attachment.dead_letter",
            "module.test-main.module.lambda.aws_iam_role_policy_attachment.logs",
            "module.test-main.module.lambda.aws_iam_role_policy_attachment.tracing",
            "module.test-main.module.lambda.aws_iam_role_policy_attachment.vpc",
            "module.test-main.module.lambda.aws_lambda_event_source_mapping.this",
            "module.test-main.module.lambda.aws_lambda_function.this",
            "module.test-main.module.lambda.aws_lambda_function_event_invoke_config.this",
            "module.test-main.module.lambda.aws_lambda_function_url.this",
            "module.test-main.module.lambda.aws_lambda_layer_version.this",
            "module.test-main.module.lambda.aws_lambda_permission.current_version_triggers",
            "module.test-main.module.lambda.aws_lambda_permission.unqualified_alias_triggers",
            "module.test-main.module.lambda.aws_lambda_provisioned_concurrency_config.current_version",
            "module.test-main.module.lambda.aws_s3_object.lambda_package",
            "module.test-main.module.lambda.data.aws_arn.log_group_arn",
            "module.test-main.module.lambda.data.aws_cloudwatch_log_group.lambda",
            "module.test-main.module.lambda.data.aws_iam_policy.tracing",
            "module.test-main.module.lambda.data.aws_iam_policy.vpc",
            "module.test-main.module.lambda.data.aws_iam_policy_document.additional_inline",
            "module.test-main.module.lambda.data.aws_iam_policy_document.assume_role",
            "module.test-main.module.lambda.data.aws_iam_policy_document.async",
            "module.test-main.module.lambda.data.aws_iam_policy_document.dead_letter",
            "module.test-main.module.lambda.data.aws_iam_policy_document.logs",
            "module.test-main.module.lambda.data.aws_partition.current",
            "module.test-main.module.lambda.data.external.archive_prepare",
            "module.test-main.module.lambda.local_file.archive_plan",
            "module.test-main.module.lambda.null_resource.archive",
            "module.test-main.module.s3.aws_s3_bucket.this",
            "module.test-main.module.s3.aws_s3_bucket_policy.this",
            "module.test-main.module.security.aws_iam_instance_profile.polygon_edge_node",
            "module.test-main.module.security.aws_iam_role.polygon_edge_node",
            "module.test-main.module.security.aws_security_group.polygon_internal",
            "module.test-main.module.security.data.aws_iam_policy_document.ec2_trust",
            "module.test-main.module.user_data.data.template_cloudinit_config.polygon_edge",
            "module.test-main.module.user_data.data.template_file.polygon_edge_node",
            "module.test-main.module.user_data.data.template_file.polygon_edge_server",
            "module.test-main.module.vpc.aws_subnet.private",
            "module.test-main.module.vpc.aws_vpc.main",
            "module.test-main.module.vpc.aws_vpc_ipv4_cidr_block_association.secondary",
            "module.test-main.module.vpc.data.aws_availability_zones.current",
            "module.test-main.module.vpc.data.aws_vpc_ipam_preview_next_cidr.main",
            "module.test-main.module.vpc.data.awscc_ec2_vpc.main"
          ]
        }
      ]
    },
    {
      "module": "module.test-main.module.instances[\"2\"]",
      "mode": "managed",
      "type": "aws_network_interface",
      "name": "instance_interface",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "arn": "arn:aws:ec2:us-west-2:897347591745:network-interface/eni-0c65d6617fe90d311",
            "attachment": [],
            "description": "",
            "id": "eni-0c65d6617fe90d311",
            "interface_type": "interface",
            "ipv4_prefix_count": 0,
            "ipv4_prefixes": [],
            "ipv6_address_count": 0,
            "ipv6_address_list": [],
            "ipv6_address_list_enabled": false,
            "ipv6_addresses": [],
            "ipv6_prefix_count": 0,
            "ipv6_prefixes": [],
            "mac_address": "0a:e8:c3:ab:1c:7b",
            "outpost_arn": "",
            "owner_id": "897347591745",
            "private_dns_name": "ip-10-250-2-27.us-west-2.compute.internal",
            "private_ip": "10.250.2.27",
            "private_ip_list": [
              "10.250.2.27"
            ],
            "private_ip_list_enabled": false,
            "private_ips": [
              "10.250.2.27"
            ],
            "private_ips_count": 0,
            "security_groups": [
              "sg-072527d2b77b17da4"
            ],
            "source_dest_check": true,
            "subnet_id": "subnet-0ba72a769a967726a",
            "tags": {
              "Name": "Polygon_Edge_Instance_Interface"
            },
            "tags_all": {
              "Name": "Polygon_Edge_Instance_Interface"
            }
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "module.test-main.data.aws_availability_zones.current",
            "module.test-main.data.aws_iam_policy_document.genesis_s3",
            "module.test-main.data.aws_iam_policy_document.genesis_ssm",
            "module.test-main.module.lambda.aws_cloudwatch_log_group.lambda",
            "module.test-main.module.lambda.aws_iam_policy.additional_inline",
            "module.test-main.module.lambda.aws_iam_policy.additional_json",
            "module.test-main.module.lambda.aws_iam_policy.additional_jsons",
            "module.test-main.module.lambda.aws_iam_policy.async",
            "module.test-main.module.lambda.aws_iam_policy.dead_letter",
            "module.test-main.module.lambda.aws_iam_policy.logs",
            "module.test-main.module.lambda.aws_iam_policy.tracing",
            "module.test-main.module.lambda.aws_iam_policy.vpc",
            "module.test-main.module.lambda.aws_iam_role.lambda",
            "module.test-main.module.lambda.aws_iam_role_policy_attachment.additional_inline",
            "module.test-main.module.lambda.aws_iam_role_policy_attachment.additional_json",
            "module.test-main.module.lambda.aws_iam_role_policy_attachment.additional_jsons",
            "module.test-main.module.lambda.aws_iam_role_policy_attachment.additional_many",
            "module.test-main.module.lambda.aws_iam_role_policy_attachment.additional_one",
            "module.test-main.module.lambda.aws_iam_role_policy_attachment.async",
            "module.test-main.module.lambda.aws_iam_role_policy_attachment.dead_letter",
            "module.test-main.module.lambda.aws_iam_role_policy_attachment.logs",
            "module.test-main.module.lambda.aws_iam_role_policy_attachment.tracing",
            "module.test-main.module.lambda.aws_iam_role_policy_attachment.vpc",
            "module.test-main.module.lambda.aws_lambda_event_source_mapping.this",
            "module.test-main.module.lambda.aws_lambda_function.this",
            "module.test-main.module.lambda.aws_lambda_function_event_invoke_config.this",
            "module.test-main.module.lambda.aws_lambda_function_url.this",
            "module.test-main.module.lambda.aws_lambda_layer_version.this",
            "module.test-main.module.lambda.aws_lambda_permission.current_version_triggers",
            "module.test-main.module.lambda.aws_lambda_permission.unqualified_alias_triggers",
            "module.test-main.module.lambda.aws_lambda_provisioned_concurrency_config.current_version",
            "module.test-main.module.lambda.aws_s3_object.lambda_package",
            "module.test-main.module.lambda.data.aws_arn.log_group_arn",
            "module.test-main.module.lambda.data.aws_cloudwatch_log_group.lambda",
            "module.test-main.module.lambda.data.aws_iam_policy.tracing",
            "module.test-main.module.lambda.data.aws_iam_policy.vpc",
            "module.test-main.module.lambda.data.aws_iam_policy_document.additional_inline",
            "module.test-main.module.lambda.data.aws_iam_policy_document.assume_role",
            "module.test-main.module.lambda.data.aws_iam_policy_document.async",
            "module.test-main.module.lambda.data.aws_iam_policy_document.dead_letter",
            "module.test-main.module.lambda.data.aws_iam_policy_document.logs",
            "module.test-main.module.lambda.data.aws_partition.current",
            "module.test-main.module.lambda.data.external.archive_prepare",
            "module.test-main.module.lambda.local_file.archive_plan",
            "module.test-main.module.lambda.null_resource.archive",
            "module.test-main.module.s3.aws_s3_bucket.this",
            "module.test-main.module.security.aws_security_group.polygon_internal",
            "module.test-main.module.vpc.aws_subnet.private",
            "module.test-main.module.vpc.aws_vpc.main",
            "module.test-main.module.vpc.aws_vpc_ipv4_cidr_block_association.secondary",
            "module.test-main.module.vpc.data.aws_availability_zones.current",
            "module.test-main.module.vpc.data.aws_vpc_ipam_preview_next_cidr.main",
            "module.test-main.module.vpc.data.awscc_ec2_vpc.main"
          ]
        }
      ]
    },
    {
      "module": "module.test-main.module.instances[\"2\"]",
      "mode": "managed",
      "type": "aws_volume_attachment",
      "name": "attach_chain_data",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "device_name": "/dev/sdf",
            "force_detach": true,
            "id": "vai-1536738943",
            "instance_id": "i-0e0d090e6e84219cd",
            "skip_destroy": null,
            "stop_instance_before_detaching": null,
            "timeouts": null,
            "volume_id": "vol-019d91b56ed2c5610"
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjozMDAwMDAwMDAwMDAsImRlbGV0ZSI6MzAwMDAwMDAwMDAwfX0=",
          "dependencies": [
            "module.test-main.data.aws_availability_zones.current",
            "module.test-main.data.aws_iam_policy_document.genesis_s3",
            "module.test-main.data.aws_iam_policy_document.genesis_ssm",
            "module.test-main.data.aws_region.current",
            "module.test-main.module.instances.aws_ebs_volume.chain_data",
            "module.test-main.module.instances.aws_instance.polygon_edge_instance",
            "module.test-main.module.instances.aws_network_interface.instance_interface",
            "module.test-main.module.instances.data.aws_ami.ubuntu_20_04",
            "module.test-main.module.lambda.aws_cloudwatch_log_group.lambda",
            "module.test-main.module.lambda.aws_iam_policy.additional_inline",
            "module.test-main.module.lambda.aws_iam_policy.additional_json",
            "module.test-main.module.lambda.aws_iam_policy.additional_jsons",
            "module.test-main.module.lambda.aws_iam_policy.async",
            "module.test-main.module.lambda.aws_iam_policy.dead_letter",
            "module.test-main.module.lambda.aws_iam_policy.logs",
            "module.test-main.module.lambda.aws_iam_policy.tracing",
            "module.test-main.module.lambda.aws_iam_policy.vpc",
            "module.test-main.module.lambda.aws_iam_role.lambda",
            "module.test-main.module.lambda.aws_iam_role_policy_attachment.additional_inline",
            "module.test-main.module.lambda.aws_iam_role_policy_attachment.additional_json",
            "module.test-main.module.lambda.aws_iam_role_policy_attachment.additional_jsons",
            "module.test-main.module.lambda.aws_iam_role_policy_attachment.additional_many",
            "module.test-main.module.lambda.aws_iam_role_policy_attachment.additional_one",
            "module.test-main.module.lambda.aws_iam_role_policy_attachment.async",
            "module.test-main.module.lambda.aws_iam_role_policy_attachment.dead_letter",
            "module.test-main.module.lambda.aws_iam_role_policy_attachment.logs",
            "module.test-main.module.lambda.aws_iam_role_policy_attachment.tracing",
            "module.test-main.module.lambda.aws_iam_role_policy_attachment.vpc",
            "module.test-main.module.lambda.aws_lambda_event_source_mapping.this",
            "module.test-main.module.lambda.aws_lambda_function.this",
            "module.test-main.module.lambda.aws_lambda_function_event_invoke_config.this",
            "module.test-main.module.lambda.aws_lambda_function_url.this",
            "module.test-main.module.lambda.aws_lambda_layer_version.this",
            "module.test-main.module.lambda.aws_lambda_permission.current_version_triggers",
            "module.test-main.module.lambda.aws_lambda_permission.unqualified_alias_triggers",
            "module.test-main.module.lambda.aws_lambda_provisioned_concurrency_config.current_version",
            "module.test-main.module.lambda.aws_s3_object.lambda_package",
            "module.test-main.module.lambda.data.aws_arn.log_group_arn",
            "module.test-main.module.lambda.data.aws_cloudwatch_log_group.lambda",
            "module.test-main.module.lambda.data.aws_iam_policy.tracing",
            "module.test-main.module.lambda.data.aws_iam_policy.vpc",
            "module.test-main.module.lambda.data.aws_iam_policy_document.additional_inline",
            "module.test-main.module.lambda.data.aws_iam_policy_document.assume_role",
            "module.test-main.module.lambda.data.aws_iam_policy_document.async",
            "module.test-main.module.lambda.data.aws_iam_policy_document.dead_letter",
            "module.test-main.module.lambda.data.aws_iam_policy_document.logs",
            "module.test-main.module.lambda.data.aws_partition.current",
            "module.test-main.module.lambda.data.external.archive_prepare",
            "module.test-main.module.lambda.local_file.archive_plan",
            "module.test-main.module.lambda.null_resource.archive",
            "module.test-main.module.s3.aws_s3_bucket.this",
            "module.test-main.module.s3.aws_s3_bucket_policy.this",
            "module.test-main.module.security.aws_iam_instance_profile.polygon_edge_node",
            "module.test-main.module.security.aws_iam_role.polygon_edge_node",
            "module.test-main.module.security.aws_security_group.polygon_internal",
            "module.test-main.module.security.data.aws_iam_policy_document.ec2_trust",
            "module.test-main.module.user_data.data.template_cloudinit_config.polygon_edge",
            "module.test-main.module.user_data.data.template_file.polygon_edge_node",
            "module.test-main.module.user_data.data.template_file.polygon_edge_server",
            "module.test-main.module.vpc.aws_subnet.private",
            "module.test-main.module.vpc.aws_vpc.main",
            "module.test-main.module.vpc.aws_vpc_ipv4_cidr_block_association.secondary",
            "module.test-main.module.vpc.data.aws_availability_zones.current",
            "module.test-main.module.vpc.data.aws_vpc_ipam_preview_next_cidr.main",
            "module.test-main.module.vpc.data.awscc_ec2_vpc.main"
          ]
        }
      ]
    },
    {
      "module": "module.test-main.module.instances[\"3\"]",
      "mode": "data",
      "type": "aws_ami",
      "name": "ubuntu_20_04",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "architecture": "x86_64",
            "arn": "arn:aws:ec2:us-west-2::image/ami-0080e1081b2c5aef6",
            "block_device_mappings": [
              {
                "device_name": "/dev/sda1",
                "ebs": {
                  "delete_on_termination": "true",
                  "encrypted": "false",
                  "iops": "0",
                  "snapshot_id": "snap-071e286744ad07ce8",
                  "throughput": "0",
                  "volume_size": "8",
                  "volume_type": "gp2"
                },
                "no_device": "",
                "virtual_name": ""
              },
              {
                "device_name": "/dev/sdb",
                "ebs": {},
                "no_device": "",
                "virtual_name": "ephemeral0"
              },
              {
                "device_name": "/dev/sdc",
                "ebs": {},
                "no_device": "",
                "virtual_name": "ephemeral1"
              }
            ],
            "boot_mode": "",
            "creation_date": "2022-11-16T00:07:24.000Z",
            "deprecation_time": "2024-11-16T00:07:24.000Z",
            "description": "Canonical, Ubuntu, 20.04 LTS, amd64 focal image build on 2022-11-15",
            "ena_support": true,
            "executable_users": null,
            "filter": [
              {
                "name": "name",
                "values": [
                  "ubuntu/images/hvm-ssd/ubuntu-focal-20.04-amd64-server-*"
                ]
              },
              {
                "name": "virtualization-type",
                "values": [
                  "hvm"
                ]
              }
            ],
            "hypervisor": "xen",
            "id": "ami-0080e1081b2c5aef6",
            "image_id": "ami-0080e1081b2c5aef6",
            "image_location": "amazon/ubuntu/images/hvm-ssd/ubuntu-focal-20.04-amd64-server-20221115.1",
            "image_owner_alias": "amazon",
            "image_type": "machine",
            "imds_support": "",
            "include_deprecated": false,
            "kernel_id": "",
            "most_recent": true,
            "name": "ubuntu/images/hvm-ssd/ubuntu-focal-20.04-amd64-server-20221115.1",
            "name_regex": null,
            "owner_id": "099720109477",
            "owners": [
              "099720109477"
            ],
            "platform": "",
            "platform_details": "Linux/UNIX",
            "product_codes": [],
            "public": true,
            "ramdisk_id": "",
            "root_device_name": "/dev/sda1",
            "root_device_type": "ebs",
            "root_snapshot_id": "snap-071e286744ad07ce8",
            "sriov_net_support": "simple",
            "state": "available",
            "state_reason": {
              "code": "UNSET",
              "message": "UNSET"
            },
            "tags": {},
            "timeouts": null,
            "tpm_support": "",
            "usage_operation": "RunInstances",
            "virtualization_type": "hvm"
          },
          "sensitive_attributes": []
        }
      ]
    },
    {
      "module": "module.test-main.module.instances[\"3\"]",
      "mode": "managed",
      "type": "aws_ebs_volume",
      "name": "chain_data",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "arn": "arn:aws:ec2:us-west-2:897347591745:volume/vol-0401da7efa686215f",
            "availability_zone": "us-west-2d",
            "encrypted": true,
            "final_snapshot": false,
            "id": "vol-0401da7efa686215f",
            "iops": 100,
            "kms_key_id": "arn:aws:kms:us-west-2:897347591745:key/40b4ce1c-6898-40c6-a618-0ae0cd6e6924",
            "multi_attach_enabled": false,
            "outpost_arn": "",
            "size": 30,
            "snapshot_id": "",
            "tags": {
              "Name": "Polygon_Edge_chain_data_volume"
            },
            "tags_all": {
              "Name": "Polygon_Edge_chain_data_volume"
            },
            "throughput": 0,
            "timeouts": null,
            "type": "gp2"
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjozMDAwMDAwMDAwMDAsImRlbGV0ZSI6MzAwMDAwMDAwMDAwLCJ1cGRhdGUiOjMwMDAwMDAwMDAwMH19",
          "dependencies": [
            "module.test-main.data.aws_availability_zones.current",
            "module.test-main.data.aws_iam_policy_document.genesis_s3",
            "module.test-main.data.aws_iam_policy_document.genesis_ssm",
            "module.test-main.module.lambda.aws_cloudwatch_log_group.lambda",
            "module.test-main.module.lambda.aws_iam_policy.additional_inline",
            "module.test-main.module.lambda.aws_iam_policy.additional_json",
            "module.test-main.module.lambda.aws_iam_policy.additional_jsons",
            "module.test-main.module.lambda.aws_iam_policy.async",
            "module.test-main.module.lambda.aws_iam_policy.dead_letter",
            "module.test-main.module.lambda.aws_iam_policy.logs",
            "module.test-main.module.lambda.aws_iam_policy.tracing",
            "module.test-main.module.lambda.aws_iam_policy.vpc",
            "module.test-main.module.lambda.aws_iam_role.lambda",
            "module.test-main.module.lambda.aws_iam_role_policy_attachment.additional_inline",
            "module.test-main.module.lambda.aws_iam_role_policy_attachment.additional_json",
            "module.test-main.module.lambda.aws_iam_role_policy_attachment.additional_jsons",
            "module.test-main.module.lambda.aws_iam_role_policy_attachment.additional_many",
            "module.test-main.module.lambda.aws_iam_role_policy_attachment.additional_one",
            "module.test-main.module.lambda.aws_iam_role_policy_attachment.async",
            "module.test-main.module.lambda.aws_iam_role_policy_attachment.dead_letter",
            "module.test-main.module.lambda.aws_iam_role_policy_attachment.logs",
            "module.test-main.module.lambda.aws_iam_role_policy_attachment.tracing",
            "module.test-main.module.lambda.aws_iam_role_policy_attachment.vpc",
            "module.test-main.module.lambda.aws_lambda_event_source_mapping.this",
            "module.test-main.module.lambda.aws_lambda_function.this",
            "module.test-main.module.lambda.aws_lambda_function_event_invoke_config.this",
            "module.test-main.module.lambda.aws_lambda_function_url.this",
            "module.test-main.module.lambda.aws_lambda_layer_version.this",
            "module.test-main.module.lambda.aws_lambda_permission.current_version_triggers",
            "module.test-main.module.lambda.aws_lambda_permission.unqualified_alias_triggers",
            "module.test-main.module.lambda.aws_lambda_provisioned_concurrency_config.current_version",
            "module.test-main.module.lambda.aws_s3_object.lambda_package",
            "module.test-main.module.lambda.data.aws_arn.log_group_arn",
            "module.test-main.module.lambda.data.aws_cloudwatch_log_group.lambda",
            "module.test-main.module.lambda.data.aws_iam_policy.tracing",
            "module.test-main.module.lambda.data.aws_iam_policy.vpc",
            "module.test-main.module.lambda.data.aws_iam_policy_document.additional_inline",
            "module.test-main.module.lambda.data.aws_iam_policy_document.assume_role",
            "module.test-main.module.lambda.data.aws_iam_policy_document.async",
            "module.test-main.module.lambda.data.aws_iam_policy_document.dead_letter",
            "module.test-main.module.lambda.data.aws_iam_policy_document.logs",
            "module.test-main.module.lambda.data.aws_partition.current",
            "module.test-main.module.lambda.data.external.archive_prepare",
            "module.test-main.module.lambda.local_file.archive_plan",
            "module.test-main.module.lambda.null_resource.archive",
            "module.test-main.module.s3.aws_s3_bucket.this"
          ]
        }
      ]
    },
    {
      "module": "module.test-main.module.instances[\"3\"]",
      "mode": "managed",
      "type": "aws_instance",
      "name": "polygon_edge_instance",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 1,
          "attributes": {
            "ami": "ami-0080e1081b2c5aef6",
            "arn": "arn:aws:ec2:us-west-2:897347591745:instance/i-032105f1dbbb50add",
            "associate_public_ip_address": false,
            "availability_zone": "us-west-2d",
            "capacity_reservation_specification": [
              {
                "capacity_reservation_preference": "open",
                "capacity_reservation_target": []
              }
            ],
            "cpu_core_count": 1,
            "cpu_threads_per_core": 2,
            "credit_specification": [
              {
                "cpu_credits": "unlimited"
              }
            ],
            "disable_api_stop": false,
            "disable_api_termination": false,
            "ebs_block_device": [],
            "ebs_optimized": false,
            "enclave_options": [
              {
                "enabled": false
              }
            ],
            "ephemeral_block_device": [],
            "get_password_data": false,
            "hibernation": false,
            "host_id": null,
            "host_resource_group_arn": null,
            "iam_instance_profile": "polygon-edge-node-20221123172546492000000006",
            "id": "i-032105f1dbbb50add",
            "instance_initiated_shutdown_behavior": "stop",
            "instance_state": "running",
            "instance_type": "t3.medium",
            "ipv6_address_count": 0,
            "ipv6_addresses": [],
            "key_name": "",
            "launch_template": [],
            "maintenance_options": [
              {
                "auto_recovery": "default"
              }
            ],
            "metadata_options": [
              {
                "http_endpoint": "enabled",
                "http_put_response_hop_limit": 1,
                "http_tokens": "required",
                "instance_metadata_tags": "disabled"
              }
            ],
            "monitoring": false,
            "network_interface": [
              {
                "delete_on_termination": false,
                "device_index": 0,
                "network_card_index": 0,
                "network_interface_id": "eni-0d39813f68a01deaf"
              }
            ],
            "outpost_arn": "",
            "password_data": "",
            "placement_group": "",
            "placement_partition_number": null,
            "primary_network_interface_id": "eni-0d39813f68a01deaf",
            "private_dns": "ip-10-250-3-25.us-west-2.compute.internal",
            "private_dns_name_options": [
              {
                "enable_resource_name_dns_a_record": false,
                "enable_resource_name_dns_aaaa_record": false,
                "hostname_type": "ip-name"
              }
            ],
            "private_ip": "10.250.3.25",
            "public_dns": "",
            "public_ip": "",
            "root_block_device": [
              {
                "delete_on_termination": true,
                "device_name": "/dev/sda1",
                "encrypted": true,
                "iops": 100,
                "kms_key_id": "arn:aws:kms:us-west-2:897347591745:key/40b4ce1c-6898-40c6-a618-0ae0cd6e6924",
                "tags": {
                  "Name": "Polygon_Edge_Root_Volume"
                },
                "throughput": 0,
                "volume_id": "vol-0c4d4b2f3ba49c951",
                "volume_size": 8,
                "volume_type": "gp2"
              }
            ],
            "secondary_private_ips": [],
            "security_groups": [],
            "source_dest_check": true,
            "subnet_id": "subnet-05b131386b6ec3cb8",
            "tags": {
              "Name": "Polygon_Edge_Node"
            },
            "tags_all": {
              "Name": "Polygon_Edge_Node"
            },
            "tenancy": "default",
            "timeouts": null,
            "user_data": null,
            "user_data_base64": "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",
            "user_data_replace_on_change": false,
            "volume_tags": null,
            "vpc_security_group_ids": [
              "sg-072527d2b77b17da4"
            ]
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMDAsImRlbGV0ZSI6MTIwMDAwMDAwMDAwMCwidXBkYXRlIjo2MDAwMDAwMDAwMDB9LCJzY2hlbWFfdmVyc2lvbiI6IjEifQ==",
          "dependencies": [
            "module.test-main.data.aws_availability_zones.current",
            "module.test-main.data.aws_iam_policy_document.genesis_s3",
            "module.test-main.data.aws_iam_policy_document.genesis_ssm",
            "module.test-main.data.aws_region.current",
            "module.test-main.module.instances.aws_network_interface.instance_interface",
            "module.test-main.module.instances.data.aws_ami.ubuntu_20_04",
            "module.test-main.module.lambda.aws_cloudwatch_log_group.lambda",
            "module.test-main.module.lambda.aws_iam_policy.additional_inline",
            "module.test-main.module.lambda.aws_iam_policy.additional_json",
            "module.test-main.module.lambda.aws_iam_policy.additional_jsons",
            "module.test-main.module.lambda.aws_iam_policy.async",
            "module.test-main.module.lambda.aws_iam_policy.dead_letter",
            "module.test-main.module.lambda.aws_iam_policy.logs",
            "module.test-main.module.lambda.aws_iam_policy.tracing",
            "module.test-main.module.lambda.aws_iam_policy.vpc",
            "module.test-main.module.lambda.aws_iam_role.lambda",
            "module.test-main.module.lambda.aws_iam_role_policy_attachment.additional_inline",
            "module.test-main.module.lambda.aws_iam_role_policy_attachment.additional_json",
            "module.test-main.module.lambda.aws_iam_role_policy_attachment.additional_jsons",
            "module.test-main.module.lambda.aws_iam_role_policy_attachment.additional_many",
            "module.test-main.module.lambda.aws_iam_role_policy_attachment.additional_one",
            "module.test-main.module.lambda.aws_iam_role_policy_attachment.async",
            "module.test-main.module.lambda.aws_iam_role_policy_attachment.dead_letter",
            "module.test-main.module.lambda.aws_iam_role_policy_attachment.logs",
            "module.test-main.module.lambda.aws_iam_role_policy_attachment.tracing",
            "module.test-main.module.lambda.aws_iam_role_policy_attachment.vpc",
            "module.test-main.module.lambda.aws_lambda_event_source_mapping.this",
            "module.test-main.module.lambda.aws_lambda_function.this",
            "module.test-main.module.lambda.aws_lambda_function_event_invoke_config.this",
            "module.test-main.module.lambda.aws_lambda_function_url.this",
            "module.test-main.module.lambda.aws_lambda_layer_version.this",
            "module.test-main.module.lambda.aws_lambda_permission.current_version_triggers",
            "module.test-main.module.lambda.aws_lambda_permission.unqualified_alias_triggers",
            "module.test-main.module.lambda.aws_lambda_provisioned_concurrency_config.current_version",
            "module.test-main.module.lambda.aws_s3_object.lambda_package",
            "module.test-main.module.lambda.data.aws_arn.log_group_arn",
            "module.test-main.module.lambda.data.aws_cloudwatch_log_group.lambda",
            "module.test-main.module.lambda.data.aws_iam_policy.tracing",
            "module.test-main.module.lambda.data.aws_iam_policy.vpc",
            "module.test-main.module.lambda.data.aws_iam_policy_document.additional_inline",
            "module.test-main.module.lambda.data.aws_iam_policy_document.assume_role",
            "module.test-main.module.lambda.data.aws_iam_policy_document.async",
            "module.test-main.module.lambda.data.aws_iam_policy_document.dead_letter",
            "module.test-main.module.lambda.data.aws_iam_policy_document.logs",
            "module.test-main.module.lambda.data.aws_partition.current",
            "module.test-main.module.lambda.data.external.archive_prepare",
            "module.test-main.module.lambda.local_file.archive_plan",
            "module.test-main.module.lambda.null_resource.archive",
            "module.test-main.module.s3.aws_s3_bucket.this",
            "module.test-main.module.s3.aws_s3_bucket_policy.this",
            "module.test-main.module.security.aws_iam_instance_profile.polygon_edge_node",
            "module.test-main.module.security.aws_iam_role.polygon_edge_node",
            "module.test-main.module.security.aws_security_group.polygon_internal",
            "module.test-main.module.security.data.aws_iam_policy_document.ec2_trust",
            "module.test-main.module.user_data.data.template_cloudinit_config.polygon_edge",
            "module.test-main.module.user_data.data.template_file.polygon_edge_node",
            "module.test-main.module.user_data.data.template_file.polygon_edge_server",
            "module.test-main.module.vpc.aws_subnet.private",
            "module.test-main.module.vpc.aws_vpc.main",
            "module.test-main.module.vpc.aws_vpc_ipv4_cidr_block_association.secondary",
            "module.test-main.module.vpc.data.aws_availability_zones.current",
            "module.test-main.module.vpc.data.aws_vpc_ipam_preview_next_cidr.main",
            "module.test-main.module.vpc.data.awscc_ec2_vpc.main"
          ]
        }
      ]
    },
    {
      "module": "module.test-main.module.instances[\"3\"]",
      "mode": "managed",
      "type": "aws_network_interface",
      "name": "instance_interface",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "arn": "arn:aws:ec2:us-west-2:897347591745:network-interface/eni-0d39813f68a01deaf",
            "attachment": [],
            "description": "",
            "id": "eni-0d39813f68a01deaf",
            "interface_type": "interface",
            "ipv4_prefix_count": 0,
            "ipv4_prefixes": [],
            "ipv6_address_count": 0,
            "ipv6_address_list": [],
            "ipv6_address_list_enabled": false,
            "ipv6_addresses": [],
            "ipv6_prefix_count": 0,
            "ipv6_prefixes": [],
            "mac_address": "0e:ba:b4:91:56:4f",
            "outpost_arn": "",
            "owner_id": "897347591745",
            "private_dns_name": "ip-10-250-3-25.us-west-2.compute.internal",
            "private_ip": "10.250.3.25",
            "private_ip_list": [
              "10.250.3.25"
            ],
            "private_ip_list_enabled": false,
            "private_ips": [
              "10.250.3.25"
            ],
            "private_ips_count": 0,
            "security_groups": [
              "sg-072527d2b77b17da4"
            ],
            "source_dest_check": true,
            "subnet_id": "subnet-05b131386b6ec3cb8",
            "tags": {
              "Name": "Polygon_Edge_Instance_Interface"
            },
            "tags_all": {
              "Name": "Polygon_Edge_Instance_Interface"
            }
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "module.test-main.data.aws_availability_zones.current",
            "module.test-main.data.aws_iam_policy_document.genesis_s3",
            "module.test-main.data.aws_iam_policy_document.genesis_ssm",
            "module.test-main.module.lambda.aws_cloudwatch_log_group.lambda",
            "module.test-main.module.lambda.aws_iam_policy.additional_inline",
            "module.test-main.module.lambda.aws_iam_policy.additional_json",
            "module.test-main.module.lambda.aws_iam_policy.additional_jsons",
            "module.test-main.module.lambda.aws_iam_policy.async",
            "module.test-main.module.lambda.aws_iam_policy.dead_letter",
            "module.test-main.module.lambda.aws_iam_policy.logs",
            "module.test-main.module.lambda.aws_iam_policy.tracing",
            "module.test-main.module.lambda.aws_iam_policy.vpc",
            "module.test-main.module.lambda.aws_iam_role.lambda",
            "module.test-main.module.lambda.aws_iam_role_policy_attachment.additional_inline",
            "module.test-main.module.lambda.aws_iam_role_policy_attachment.additional_json",
            "module.test-main.module.lambda.aws_iam_role_policy_attachment.additional_jsons",
            "module.test-main.module.lambda.aws_iam_role_policy_attachment.additional_many",
            "module.test-main.module.lambda.aws_iam_role_policy_attachment.additional_one",
            "module.test-main.module.lambda.aws_iam_role_policy_attachment.async",
            "module.test-main.module.lambda.aws_iam_role_policy_attachment.dead_letter",
            "module.test-main.module.lambda.aws_iam_role_policy_attachment.logs",
            "module.test-main.module.lambda.aws_iam_role_policy_attachment.tracing",
            "module.test-main.module.lambda.aws_iam_role_policy_attachment.vpc",
            "module.test-main.module.lambda.aws_lambda_event_source_mapping.this",
            "module.test-main.module.lambda.aws_lambda_function.this",
            "module.test-main.module.lambda.aws_lambda_function_event_invoke_config.this",
            "module.test-main.module.lambda.aws_lambda_function_url.this",
            "module.test-main.module.lambda.aws_lambda_layer_version.this",
            "module.test-main.module.lambda.aws_lambda_permission.current_version_triggers",
            "module.test-main.module.lambda.aws_lambda_permission.unqualified_alias_triggers",
            "module.test-main.module.lambda.aws_lambda_provisioned_concurrency_config.current_version",
            "module.test-main.module.lambda.aws_s3_object.lambda_package",
            "module.test-main.module.lambda.data.aws_arn.log_group_arn",
            "module.test-main.module.lambda.data.aws_cloudwatch_log_group.lambda",
            "module.test-main.module.lambda.data.aws_iam_policy.tracing",
            "module.test-main.module.lambda.data.aws_iam_policy.vpc",
            "module.test-main.module.lambda.data.aws_iam_policy_document.additional_inline",
            "module.test-main.module.lambda.data.aws_iam_policy_document.assume_role",
            "module.test-main.module.lambda.data.aws_iam_policy_document.async",
            "module.test-main.module.lambda.data.aws_iam_policy_document.dead_letter",
            "module.test-main.module.lambda.data.aws_iam_policy_document.logs",
            "module.test-main.module.lambda.data.aws_partition.current",
            "module.test-main.module.lambda.data.external.archive_prepare",
            "module.test-main.module.lambda.local_file.archive_plan",
            "module.test-main.module.lambda.null_resource.archive",
            "module.test-main.module.s3.aws_s3_bucket.this",
            "module.test-main.module.security.aws_security_group.polygon_internal",
            "module.test-main.module.vpc.aws_subnet.private",
            "module.test-main.module.vpc.aws_vpc.main",
            "module.test-main.module.vpc.aws_vpc_ipv4_cidr_block_association.secondary",
            "module.test-main.module.vpc.data.aws_availability_zones.current",
            "module.test-main.module.vpc.data.aws_vpc_ipam_preview_next_cidr.main",
            "module.test-main.module.vpc.data.awscc_ec2_vpc.main"
          ]
        }
      ]
    },
    {
      "module": "module.test-main.module.instances[\"3\"]",
      "mode": "managed",
      "type": "aws_volume_attachment",
      "name": "attach_chain_data",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "device_name": "/dev/sdf",
            "force_detach": true,
            "id": "vai-2349266614",
            "instance_id": "i-032105f1dbbb50add",
            "skip_destroy": null,
            "stop_instance_before_detaching": null,
            "timeouts": null,
            "volume_id": "vol-0401da7efa686215f"
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjozMDAwMDAwMDAwMDAsImRlbGV0ZSI6MzAwMDAwMDAwMDAwfX0=",
          "dependencies": [
            "module.test-main.data.aws_availability_zones.current",
            "module.test-main.data.aws_iam_policy_document.genesis_s3",
            "module.test-main.data.aws_iam_policy_document.genesis_ssm",
            "module.test-main.data.aws_region.current",
            "module.test-main.module.instances.aws_ebs_volume.chain_data",
            "module.test-main.module.instances.aws_instance.polygon_edge_instance",
            "module.test-main.module.instances.aws_network_interface.instance_interface",
            "module.test-main.module.instances.data.aws_ami.ubuntu_20_04",
            "module.test-main.module.lambda.aws_cloudwatch_log_group.lambda",
            "module.test-main.module.lambda.aws_iam_policy.additional_inline",
            "module.test-main.module.lambda.aws_iam_policy.additional_json",
            "module.test-main.module.lambda.aws_iam_policy.additional_jsons",
            "module.test-main.module.lambda.aws_iam_policy.async",
            "module.test-main.module.lambda.aws_iam_policy.dead_letter",
            "module.test-main.module.lambda.aws_iam_policy.logs",
            "module.test-main.module.lambda.aws_iam_policy.tracing",
            "module.test-main.module.lambda.aws_iam_policy.vpc",
            "module.test-main.module.lambda.aws_iam_role.lambda",
            "module.test-main.module.lambda.aws_iam_role_policy_attachment.additional_inline",
            "module.test-main.module.lambda.aws_iam_role_policy_attachment.additional_json",
            "module.test-main.module.lambda.aws_iam_role_policy_attachment.additional_jsons",
            "module.test-main.module.lambda.aws_iam_role_policy_attachment.additional_many",
            "module.test-main.module.lambda.aws_iam_role_policy_attachment.additional_one",
            "module.test-main.module.lambda.aws_iam_role_policy_attachment.async",
            "module.test-main.module.lambda.aws_iam_role_policy_attachment.dead_letter",
            "module.test-main.module.lambda.aws_iam_role_policy_attachment.logs",
            "module.test-main.module.lambda.aws_iam_role_policy_attachment.tracing",
            "module.test-main.module.lambda.aws_iam_role_policy_attachment.vpc",
            "module.test-main.module.lambda.aws_lambda_event_source_mapping.this",
            "module.test-main.module.lambda.aws_lambda_function.this",
            "module.test-main.module.lambda.aws_lambda_function_event_invoke_config.this",
            "module.test-main.module.lambda.aws_lambda_function_url.this",
            "module.test-main.module.lambda.aws_lambda_layer_version.this",
            "module.test-main.module.lambda.aws_lambda_permission.current_version_triggers",
            "module.test-main.module.lambda.aws_lambda_permission.unqualified_alias_triggers",
            "module.test-main.module.lambda.aws_lambda_provisioned_concurrency_config.current_version",
            "module.test-main.module.lambda.aws_s3_object.lambda_package",
            "module.test-main.module.lambda.data.aws_arn.log_group_arn",
            "module.test-main.module.lambda.data.aws_cloudwatch_log_group.lambda",
            "module.test-main.module.lambda.data.aws_iam_policy.tracing",
            "module.test-main.module.lambda.data.aws_iam_policy.vpc",
            "module.test-main.module.lambda.data.aws_iam_policy_document.additional_inline",
            "module.test-main.module.lambda.data.aws_iam_policy_document.assume_role",
            "module.test-main.module.lambda.data.aws_iam_policy_document.async",
            "module.test-main.module.lambda.data.aws_iam_policy_document.dead_letter",
            "module.test-main.module.lambda.data.aws_iam_policy_document.logs",
            "module.test-main.module.lambda.data.aws_partition.current",
            "module.test-main.module.lambda.data.external.archive_prepare",
            "module.test-main.module.lambda.local_file.archive_plan",
            "module.test-main.module.lambda.null_resource.archive",
            "module.test-main.module.s3.aws_s3_bucket.this",
            "module.test-main.module.s3.aws_s3_bucket_policy.this",
            "module.test-main.module.security.aws_iam_instance_profile.polygon_edge_node",
            "module.test-main.module.security.aws_iam_role.polygon_edge_node",
            "module.test-main.module.security.aws_security_group.polygon_internal",
            "module.test-main.module.security.data.aws_iam_policy_document.ec2_trust",
            "module.test-main.module.user_data.data.template_cloudinit_config.polygon_edge",
            "module.test-main.module.user_data.data.template_file.polygon_edge_node",
            "module.test-main.module.user_data.data.template_file.polygon_edge_server",
            "module.test-main.module.vpc.aws_subnet.private",
            "module.test-main.module.vpc.aws_vpc.main",
            "module.test-main.module.vpc.aws_vpc_ipv4_cidr_block_association.secondary",
            "module.test-main.module.vpc.data.aws_availability_zones.current",
            "module.test-main.module.vpc.data.aws_vpc_ipam_preview_next_cidr.main",
            "module.test-main.module.vpc.data.awscc_ec2_vpc.main"
          ]
        }
      ]
    },
    {
      "module": "module.test-main.module.lambda",
      "mode": "data",
      "type": "aws_iam_policy_document",
      "name": "assume_role",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "index_key": 0,
          "schema_version": 0,
          "attributes": {
            "id": "3693445097",
            "json": "{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Sid\": \"\",\n      \"Effect\": \"Allow\",\n      \"Action\": \"sts:AssumeRole\",\n      \"Principal\": {\n        \"Service\": \"lambda.amazonaws.com\"\n      }\n    }\n  ]\n}",
            "override_json": null,
            "override_policy_documents": null,
            "policy_id": null,
            "source_json": null,
            "source_policy_documents": null,
            "statement": [
              {
                "actions": [
                  "sts:AssumeRole"
                ],
                "condition": [],
                "effect": "Allow",
                "not_actions": [],
                "not_principals": [],
                "not_resources": [],
                "principals": [
                  {
                    "identifiers": [
                      "lambda.amazonaws.com"
                    ],
                    "type": "Service"
                  }
                ],
                "resources": [],
                "sid": ""
              }
            ],
            "version": "2012-10-17"
          },
          "sensitive_attributes": []
        }
      ]
    },
    {
      "module": "module.test-main.module.lambda",
      "mode": "data",
      "type": "aws_iam_policy_document",
      "name": "logs",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "index_key": 0,
          "schema_version": 0,
          "attributes": {
            "id": "2085916661",
            "json": "{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Sid\": \"\",\n      \"Effect\": \"Allow\",\n      \"Action\": [\n        \"logs:PutLogEvents\",\n        \"logs:CreateLogStream\",\n        \"logs:CreateLogGroup\"\n      ],\n      \"Resource\": [\n        \"arn:aws:logs:us-west-2:897347591745:log-group:/aws/lambda/polygon-edge-init:*:*\",\n        \"arn:aws:logs:us-west-2:897347591745:log-group:/aws/lambda/polygon-edge-init:*\"\n      ]\n    }\n  ]\n}",
            "override_json": null,
            "override_policy_documents": null,
            "policy_id": null,
            "source_json": null,
            "source_policy_documents": null,
            "statement": [
              {
                "actions": [
                  "logs:CreateLogGroup",
                  "logs:CreateLogStream",
                  "logs:PutLogEvents"
                ],
                "condition": [],
                "effect": "Allow",
                "not_actions": [],
                "not_principals": [],
                "not_resources": [],
                "principals": [],
                "resources": [
                  "arn:aws:logs:us-west-2:897347591745:log-group:/aws/lambda/polygon-edge-init:*",
                  "arn:aws:logs:us-west-2:897347591745:log-group:/aws/lambda/polygon-edge-init:*:*"
                ],
                "sid": ""
              }
            ],
            "version": "2012-10-17"
          },
          "sensitive_attributes": []
        }
      ]
    },
    {
      "module": "module.test-main.module.lambda",
      "mode": "data",
      "type": "aws_partition",
      "name": "current",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "dns_suffix": "amazonaws.com",
            "id": "aws",
            "partition": "aws",
            "reverse_dns_prefix": "com.amazonaws"
          },
          "sensitive_attributes": []
        }
      ]
    },
    {
      "module": "module.test-main.module.lambda",
      "mode": "managed",
      "type": "aws_cloudwatch_log_group",
      "name": "lambda",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "index_key": 0,
          "schema_version": 0,
          "attributes": {
            "arn": "arn:aws:logs:us-west-2:897347591745:log-group:/aws/lambda/polygon-edge-init",
            "id": "/aws/lambda/polygon-edge-init",
            "kms_key_id": "",
            "name": "/aws/lambda/polygon-edge-init",
            "name_prefix": null,
            "retention_in_days": 0,
            "tags": null,
            "tags_all": {}
          },
          "sensitive_attributes": [],
          "private": "bnVsbA=="
        }
      ]
    },
    {
      "module": "module.test-main.module.lambda",
      "mode": "managed",
      "type": "aws_iam_policy",
      "name": "additional_jsons",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "index_key": 0,
          "schema_version": 0,
          "attributes": {
            "arn": "arn:aws:iam::897347591745:policy/polygon-edge-init-0",
            "description": "",
            "id": "arn:aws:iam::897347591745:policy/polygon-edge-init-0",
            "name": "polygon-edge-init-0",
            "name_prefix": null,
            "path": "/",
            "policy": "{\"Statement\":[{\"Action\":[\"s3:PutObject\",\"s3:ListBucket\",\"s3:GetObject\"],\"Effect\":\"Allow\",\"Resource\":[\"arn:aws:s3:::polygon-edge-shared-20221123172544133800000005/*\",\"arn:aws:s3:::polygon-edge-shared-20221123172544133800000005\"],\"Sid\":\"\"}],\"Version\":\"2012-10-17\"}",
            "policy_id": "ANPA5B3QVTZAUZQH536SC",
            "tags": null,
            "tags_all": {}
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "module.test-main.data.aws_iam_policy_document.genesis_s3",
            "module.test-main.data.aws_iam_policy_document.genesis_ssm",
            "module.test-main.module.s3.aws_s3_bucket.this"
          ]
        },
        {
          "index_key": 1,
          "schema_version": 0,
          "attributes": {
            "arn": "arn:aws:iam::897347591745:policy/polygon-edge-init-1",
            "description": "",
            "id": "arn:aws:iam::897347591745:policy/polygon-edge-init-1",
            "name": "polygon-edge-init-1",
            "name_prefix": null,
            "path": "/",
            "policy": "{\"Statement\":[{\"Action\":[\"ssm:GetParametersByPath\",\"ssm:GetParameters\",\"ssm:GetParameter\"],\"Effect\":\"Allow\",\"Resource\":\"arn:aws:ssm:us-west-2:897347591745:parameter/polygon-edge-validators/*\",\"Sid\":\"\"}],\"Version\":\"2012-10-17\"}",
            "policy_id": "ANPA5B3QVTZA47SN27BPM",
            "tags": null,
            "tags_all": {}
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "module.test-main.data.aws_iam_policy_document.genesis_s3",
            "module.test-main.data.aws_iam_policy_document.genesis_ssm",
            "module.test-main.module.s3.aws_s3_bucket.this"
          ]
        }
      ]
    },
    {
      "module": "module.test-main.module.lambda",
      "mode": "managed",
      "type": "aws_iam_policy",
      "name": "logs",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "index_key": 0,
          "schema_version": 0,
          "attributes": {
            "arn": "arn:aws:iam::897347591745:policy/polygon-edge-init-logs",
            "description": "",
            "id": "arn:aws:iam::897347591745:policy/polygon-edge-init-logs",
            "name": "polygon-edge-init-logs",
            "name_prefix": null,
            "path": "/",
            "policy": "{\"Statement\":[{\"Action\":[\"logs:PutLogEvents\",\"logs:CreateLogStream\",\"logs:CreateLogGroup\"],\"Effect\":\"Allow\",\"Resource\":[\"arn:aws:logs:us-west-2:897347591745:log-group:/aws/lambda/polygon-edge-init:*:*\",\"arn:aws:logs:us-west-2:897347591745:log-group:/aws/lambda/polygon-edge-init:*\"],\"Sid\":\"\"}],\"Version\":\"2012-10-17\"}",
            "policy_id": "ANPA5B3QVTZAREKWD6ZO4",
            "tags": null,
            "tags_all": {}
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "module.test-main.module.lambda.aws_cloudwatch_log_group.lambda",
            "module.test-main.module.lambda.data.aws_arn.log_group_arn",
            "module.test-main.module.lambda.data.aws_cloudwatch_log_group.lambda",
            "module.test-main.module.lambda.data.aws_iam_policy_document.logs"
          ]
        }
      ]
    },
    {
      "module": "module.test-main.module.lambda",
      "mode": "managed",
      "type": "aws_iam_role",
      "name": "lambda",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "index_key": 0,
          "schema_version": 0,
          "attributes": {
            "arn": "arn:aws:iam::897347591745:role/polygon-edge-init",
            "assume_role_policy": "{\"Statement\":[{\"Action\":\"sts:AssumeRole\",\"Effect\":\"Allow\",\"Principal\":{\"Service\":\"lambda.amazonaws.com\"},\"Sid\":\"\"}],\"Version\":\"2012-10-17\"}",
            "create_date": "2022-11-23T17:25:45Z",
            "description": "",
            "force_detach_policies": true,
            "id": "polygon-edge-init",
            "inline_policy": [],
            "managed_policy_arns": [],
            "max_session_duration": 3600,
            "name": "polygon-edge-init",
            "name_prefix": "",
            "path": "/",
            "permissions_boundary": null,
            "tags": null,
            "tags_all": {},
            "unique_id": "AROA5B3QVTZASGFHMFVPY"
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "module.test-main.module.lambda.data.aws_iam_policy_document.assume_role"
          ]
        }
      ]
    },
    {
      "module": "module.test-main.module.lambda",
      "mode": "managed",
      "type": "aws_iam_role_policy_attachment",
      "name": "additional_jsons",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "index_key": 0,
          "schema_version": 0,
          "attributes": {
            "id": "polygon-edge-init-2022112317255162720000000b",
            "policy_arn": "arn:aws:iam::897347591745:policy/polygon-edge-init-0",
            "role": "polygon-edge-init"
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "module.test-main.data.aws_iam_policy_document.genesis_s3",
            "module.test-main.data.aws_iam_policy_document.genesis_ssm",
            "module.test-main.module.lambda.aws_iam_policy.additional_jsons",
            "module.test-main.module.lambda.aws_iam_role.lambda",
            "module.test-main.module.lambda.data.aws_iam_policy_document.assume_role",
            "module.test-main.module.s3.aws_s3_bucket.this"
          ]
        },
        {
          "index_key": 1,
          "schema_version": 0,
          "attributes": {
            "id": "polygon-edge-init-2022112317255166100000000c",
            "policy_arn": "arn:aws:iam::897347591745:policy/polygon-edge-init-1",
            "role": "polygon-edge-init"
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "module.test-main.data.aws_iam_policy_document.genesis_s3",
            "module.test-main.data.aws_iam_policy_document.genesis_ssm",
            "module.test-main.module.lambda.aws_iam_policy.additional_jsons",
            "module.test-main.module.lambda.aws_iam_role.lambda",
            "module.test-main.module.lambda.data.aws_iam_policy_document.assume_role",
            "module.test-main.module.s3.aws_s3_bucket.this"
          ]
        }
      ]
    },
    {
      "module": "module.test-main.module.lambda",
      "mode": "managed",
      "type": "aws_iam_role_policy_attachment",
      "name": "logs",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "index_key": 0,
          "schema_version": 0,
          "attributes": {
            "id": "polygon-edge-init-20221123172547381900000008",
            "policy_arn": "arn:aws:iam::897347591745:policy/polygon-edge-init-logs",
            "role": "polygon-edge-init"
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "module.test-main.module.lambda.aws_cloudwatch_log_group.lambda",
            "module.test-main.module.lambda.aws_iam_policy.logs",
            "module.test-main.module.lambda.aws_iam_role.lambda",
            "module.test-main.module.lambda.data.aws_arn.log_group_arn",
            "module.test-main.module.lambda.data.aws_cloudwatch_log_group.lambda",
            "module.test-main.module.lambda.data.aws_iam_policy_document.assume_role",
            "module.test-main.module.lambda.data.aws_iam_policy_document.logs"
          ]
        }
      ]
    },
    {
      "module": "module.test-main.module.lambda",
      "mode": "managed",
      "type": "aws_lambda_function",
      "name": "this",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "index_key": 0,
          "schema_version": 0,
          "attributes": {
            "architectures": [
              "x86_64"
            ],
            "arn": "arn:aws:lambda:us-west-2:897347591745:function:polygon-edge-init",
            "code_signing_config_arn": "",
            "dead_letter_config": [],
            "description": "Lambda function used to initialize chain and generate genesis.json",
            "environment": [],
            "ephemeral_storage": [
              {
                "size": 512
              }
            ],
            "file_system_config": [],
            "filename": "../main.zip",
            "function_name": "polygon-edge-init",
            "handler": "main",
            "id": "polygon-edge-init",
            "image_config": [],
            "image_uri": "",
            "invoke_arn": "arn:aws:apigateway:us-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-west-2:897347591745:function:polygon-edge-init/invocations",
            "kms_key_arn": "",
            "last_modified": "2022-11-23T17:26:45.137+0000",
            "layers": null,
            "memory_size": 256,
            "package_type": "Zip",
            "publish": false,
            "qualified_arn": "arn:aws:lambda:us-west-2:897347591745:function:polygon-edge-init:$LATEST",
            "qualified_invoke_arn": "arn:aws:apigateway:us-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-west-2:897347591745:function:polygon-edge-init:$LATEST/invocations",
            "reserved_concurrent_executions": -1,
            "role": "arn:aws:iam::897347591745:role/polygon-edge-init",
            "runtime": "go1.x",
            "s3_bucket": null,
            "s3_key": null,
            "s3_object_version": null,
            "signing_job_arn": "",
            "signing_profile_version_arn": "",
            "source_code_hash": "vuKg8asGZIebTI5HgAPrlZ09m1w6blxLfeLeV0rOgIk=",
            "source_code_size": 10099117,
            "tags": null,
            "tags_all": {},
            "timeout": 20,
            "timeouts": null,
            "tracing_config": [
              {
                "mode": "PassThrough"
              }
            ],
            "version": "$LATEST",
            "vpc_config": []
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMDB9fQ==",
          "dependencies": [
            "module.test-main.data.aws_iam_policy_document.genesis_s3",
            "module.test-main.data.aws_iam_policy_document.genesis_ssm",
            "module.test-main.module.lambda.aws_cloudwatch_log_group.lambda",
            "module.test-main.module.lambda.aws_iam_policy.additional_jsons",
            "module.test-main.module.lambda.aws_iam_policy.logs",
            "module.test-main.module.lambda.aws_iam_role.lambda",
            "module.test-main.module.lambda.aws_iam_role_policy_attachment.additional_inline",
            "module.test-main.module.lambda.aws_iam_role_policy_attachment.additional_json",
            "module.test-main.module.lambda.aws_iam_role_policy_attachment.additional_jsons",
            "module.test-main.module.lambda.aws_iam_role_policy_attachment.additional_many",
            "module.test-main.module.lambda.aws_iam_role_policy_attachment.additional_one",
            "module.test-main.module.lambda.aws_iam_role_policy_attachment.async",
            "module.test-main.module.lambda.aws_iam_role_policy_attachment.dead_letter",
            "module.test-main.module.lambda.aws_iam_role_policy_attachment.logs",
            "module.test-main.module.lambda.aws_iam_role_policy_attachment.tracing",
            "module.test-main.module.lambda.aws_iam_role_policy_attachment.vpc",
            "module.test-main.module.lambda.aws_s3_object.lambda_package",
            "module.test-main.module.lambda.data.aws_arn.log_group_arn",
            "module.test-main.module.lambda.data.aws_cloudwatch_log_group.lambda",
            "module.test-main.module.lambda.data.aws_iam_policy_document.assume_role",
            "module.test-main.module.lambda.data.aws_iam_policy_document.logs",
            "module.test-main.module.lambda.data.external.archive_prepare",
            "module.test-main.module.lambda.null_resource.archive",
            "module.test-main.module.s3.aws_s3_bucket.this"
          ]
        }
      ]
    },
    {
      "module": "module.test-main.module.s3",
      "mode": "data",
      "type": "aws_canonical_user_id",
      "name": "this",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "display_name": "rejunextech",
            "id": "d082635e8258d14a238e53cf83f13269ed84ecc57648a499a7f8f6d661efef35"
          },
          "sensitive_attributes": []
        }
      ]
    },
    {
      "module": "module.test-main.module.s3",
      "mode": "managed",
      "type": "aws_s3_bucket",
      "name": "this",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "index_key": 0,
          "schema_version": 0,
          "attributes": {
            "acceleration_status": "",
            "acl": null,
            "arn": "arn:aws:s3:::polygon-edge-shared-20221123172544133800000005",
            "bucket": "polygon-edge-shared-20221123172544133800000005",
            "bucket_domain_name": "polygon-edge-shared-20221123172544133800000005.s3.amazonaws.com",
            "bucket_prefix": "polygon-edge-shared-",
            "bucket_regional_domain_name": "polygon-edge-shared-20221123172544133800000005.s3.us-west-2.amazonaws.com",
            "cors_rule": [],
            "force_destroy": true,
            "grant": [
              {
                "id": "d082635e8258d14a238e53cf83f13269ed84ecc57648a499a7f8f6d661efef35",
                "permissions": [
                  "FULL_CONTROL"
                ],
                "type": "CanonicalUser",
                "uri": ""
              }
            ],
            "hosted_zone_id": "Z3BJ6K6RIION7M",
            "id": "polygon-edge-shared-20221123172544133800000005",
            "lifecycle_rule": [],
            "logging": [],
            "object_lock_configuration": [],
            "object_lock_enabled": false,
            "policy": "",
            "region": "us-west-2",
            "replication_configuration": [],
            "request_payer": "BucketOwner",
            "server_side_encryption_configuration": [],
            "tags": null,
            "tags_all": {},
            "timeouts": null,
            "versioning": [
              {
                "enabled": false,
                "mfa_delete": false
              }
            ],
            "website": [],
            "website_domain": null,
            "website_endpoint": null
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjoxMjAwMDAwMDAwMDAwLCJkZWxldGUiOjM2MDAwMDAwMDAwMDAsInJlYWQiOjEyMDAwMDAwMDAwMDAsInVwZGF0ZSI6MTIwMDAwMDAwMDAwMH19"
        }
      ]
    },
    {
      "module": "module.test-main.module.s3",
      "mode": "managed",
      "type": "aws_s3_bucket_acl",
      "name": "this",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "index_key": 0,
          "schema_version": 0,
          "attributes": {
            "access_control_policy": [
              {
                "grant": [
                  {
                    "grantee": [
                      {
                        "display_name": "rejunextech",
                        "email_address": "",
                        "id": "d082635e8258d14a238e53cf83f13269ed84ecc57648a499a7f8f6d661efef35",
                        "type": "CanonicalUser",
                        "uri": ""
                      }
                    ],
                    "permission": "FULL_CONTROL"
                  }
                ],
                "owner": [
                  {
                    "display_name": "rejunextech",
                    "id": "d082635e8258d14a238e53cf83f13269ed84ecc57648a499a7f8f6d661efef35"
                  }
                ]
              }
            ],
            "acl": "private",
            "bucket": "polygon-edge-shared-20221123172544133800000005",
            "expected_bucket_owner": "",
            "id": "polygon-edge-shared-20221123172544133800000005,private"
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "module.test-main.module.s3.aws_s3_bucket.this",
            "module.test-main.module.s3.data.aws_canonical_user_id.this"
          ]
        }
      ]
    },
    {
      "module": "module.test-main.module.s3",
      "mode": "managed",
      "type": "aws_s3_bucket_public_access_block",
      "name": "this",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "index_key": 0,
          "schema_version": 0,
          "attributes": {
            "block_public_acls": false,
            "block_public_policy": false,
            "bucket": "polygon-edge-shared-20221123172544133800000005",
            "id": "polygon-edge-shared-20221123172544133800000005",
            "ignore_public_acls": false,
            "restrict_public_buckets": false
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "module.test-main.module.s3.aws_s3_bucket.this",
            "module.test-main.module.s3.aws_s3_bucket_policy.this"
          ]
        }
      ]
    },
    {
      "module": "module.test-main.module.security",
      "mode": "data",
      "type": "aws_iam_policy",
      "name": "amazon_ssm_managed_instance_core",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "arn": "arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore",
            "description": "The policy for Amazon EC2 Role to enable AWS Systems Manager service core functionality.",
            "id": "arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore",
            "name": "AmazonSSMManagedInstanceCore",
            "path": "/",
            "path_prefix": null,
            "policy": "{\n    \"Version\": \"2012-10-17\",\n    \"Statement\": [\n        {\n            \"Effect\": \"Allow\",\n            \"Action\": [\n                \"ssm:DescribeAssociation\",\n                \"ssm:GetDeployablePatchSnapshotForInstance\",\n                \"ssm:GetDocument\",\n                \"ssm:DescribeDocument\",\n                \"ssm:GetManifest\",\n                \"ssm:GetParameter\",\n                \"ssm:GetParameters\",\n                \"ssm:ListAssociations\",\n                \"ssm:ListInstanceAssociations\",\n                \"ssm:PutInventory\",\n                \"ssm:PutComplianceItems\",\n                \"ssm:PutConfigurePackageResult\",\n                \"ssm:UpdateAssociationStatus\",\n                \"ssm:UpdateInstanceAssociationStatus\",\n                \"ssm:UpdateInstanceInformation\"\n            ],\n            \"Resource\": \"*\"\n        },\n        {\n            \"Effect\": \"Allow\",\n            \"Action\": [\n                \"ssmmessages:CreateControlChannel\",\n                \"ssmmessages:CreateDataChannel\",\n                \"ssmmessages:OpenControlChannel\",\n                \"ssmmessages:OpenDataChannel\"\n            ],\n            \"Resource\": \"*\"\n        },\n        {\n            \"Effect\": \"Allow\",\n            \"Action\": [\n                \"ec2messages:AcknowledgeMessage\",\n                \"ec2messages:DeleteMessage\",\n                \"ec2messages:FailMessage\",\n                \"ec2messages:GetEndpoint\",\n                \"ec2messages:GetMessages\",\n                \"ec2messages:SendReply\"\n            ],\n            \"Resource\": \"*\"\n        }\n    ]\n}",
            "policy_id": "ANPAIXSHM2BNB2D3AXXRU",
            "tags": {}
          },
          "sensitive_attributes": []
        }
      ]
    },
    {
      "module": "module.test-main.module.security",
      "mode": "data",
      "type": "aws_iam_policy_document",
      "name": "ec2_trust",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "id": "1903849331",
            "json": "{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Sid\": \"\",\n      \"Effect\": \"Allow\",\n      \"Action\": \"sts:AssumeRole\",\n      \"Principal\": {\n        \"Service\": \"ec2.amazonaws.com\"\n      }\n    }\n  ]\n}",
            "override_json": null,
            "override_policy_documents": null,
            "policy_id": null,
            "source_json": null,
            "source_policy_documents": null,
            "statement": [
              {
                "actions": [
                  "sts:AssumeRole"
                ],
                "condition": [],
                "effect": "Allow",
                "not_actions": [],
                "not_principals": [],
                "not_resources": [],
                "principals": [
                  {
                    "identifiers": [
                      "ec2.amazonaws.com"
                    ],
                    "type": "Service"
                  }
                ],
                "resources": [],
                "sid": ""
              }
            ],
            "version": "2012-10-17"
          },
          "sensitive_attributes": []
        }
      ]
    },
    {
      "module": "module.test-main.module.security",
      "mode": "data",
      "type": "aws_iam_policy_document",
      "name": "polygon_edge_node",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "id": "1349237634",
            "json": "{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Sid\": \"\",\n      \"Effect\": \"Allow\",\n      \"Action\": [\n        \"ssm:PutParameter\",\n        \"ssm:GetParameter\",\n        \"ssm:DeleteParameter\"\n      ],\n      \"Resource\": \"arn:aws:ssm:us-west-2:897347591745:parameter/polygon-edge-validators/*\"\n    },\n    {\n      \"Sid\": \"\",\n      \"Effect\": \"Allow\",\n      \"Action\": [\n        \"s3:PutObject\",\n        \"s3:GetObject\",\n        \"s3:DeleteObject\"\n      ],\n      \"Resource\": \"arn:aws:s3:::polygon-edge-shared-20221123172544133800000005/*\"\n    },\n    {\n      \"Sid\": \"\",\n      \"Effect\": \"Allow\",\n      \"Action\": \"s3:ListBucket\",\n      \"Resource\": \"arn:aws:s3:::polygon-edge-shared-20221123172544133800000005\"\n    },\n    {\n      \"Sid\": \"\",\n      \"Effect\": \"Allow\",\n      \"Action\": \"lambda:InvokeFunction\",\n      \"Resource\": \"arn:aws:lambda:us-west-2:897347591745:function/polygon-edge-init\"\n    }\n  ]\n}",
            "override_json": null,
            "override_policy_documents": null,
            "policy_id": null,
            "source_json": null,
            "source_policy_documents": null,
            "statement": [
              {
                "actions": [
                  "ssm:DeleteParameter",
                  "ssm:GetParameter",
                  "ssm:PutParameter"
                ],
                "condition": [],
                "effect": "Allow",
                "not_actions": [],
                "not_principals": [],
                "not_resources": [],
                "principals": [],
                "resources": [
                  "arn:aws:ssm:us-west-2:897347591745:parameter/polygon-edge-validators/*"
                ],
                "sid": ""
              },
              {
                "actions": [
                  "s3:DeleteObject",
                  "s3:GetObject",
                  "s3:PutObject"
                ],
                "condition": [],
                "effect": "Allow",
                "not_actions": [],
                "not_principals": [],
                "not_resources": [],
                "principals": [],
                "resources": [
                  "arn:aws:s3:::polygon-edge-shared-20221123172544133800000005/*"
                ],
                "sid": ""
              },
              {
                "actions": [
                  "s3:ListBucket"
                ],
                "condition": [],
                "effect": "Allow",
                "not_actions": [],
                "not_principals": [],
                "not_resources": [],
                "principals": [],
                "resources": [
                  "arn:aws:s3:::polygon-edge-shared-20221123172544133800000005"
                ],
                "sid": ""
              },
              {
                "actions": [
                  "lambda:InvokeFunction"
                ],
                "condition": [],
                "effect": "Allow",
                "not_actions": [],
                "not_principals": [],
                "not_resources": [],
                "principals": [],
                "resources": [
                  "arn:aws:lambda:us-west-2:897347591745:function/polygon-edge-init"
                ],
                "sid": ""
              }
            ],
            "version": "2012-10-17"
          },
          "sensitive_attributes": []
        }
      ]
    },
    {
      "module": "module.test-main.module.security",
      "mode": "data",
      "type": "aws_partition",
      "name": "current",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "dns_suffix": "amazonaws.com",
            "id": "aws",
            "partition": "aws",
            "reverse_dns_prefix": "com.amazonaws"
          },
          "sensitive_attributes": []
        }
      ]
    },
    {
      "module": "module.test-main.module.security",
      "mode": "managed",
      "type": "aws_iam_instance_profile",
      "name": "polygon_edge_node",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "arn": "arn:aws:iam::897347591745:instance-profile/polygon-edge-node-20221123172546492000000006",
            "create_date": "2022-11-23T17:25:46Z",
            "id": "polygon-edge-node-20221123172546492000000006",
            "name": "polygon-edge-node-20221123172546492000000006",
            "name_prefix": "polygon-edge-node-",
            "path": "/",
            "role": "polygon-edge-node-20221123172544131900000003",
            "tags": null,
            "tags_all": {},
            "unique_id": "AIPA5B3QVTZA3GWOS6VFA"
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "module.test-main.module.security.aws_iam_role.polygon_edge_node",
            "module.test-main.module.security.data.aws_iam_policy_document.ec2_trust"
          ]
        }
      ]
    },
    {
      "module": "module.test-main.module.security",
      "mode": "managed",
      "type": "aws_iam_role",
      "name": "polygon_edge_node",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "arn": "arn:aws:iam::897347591745:role/polygon-edge-node-20221123172544131900000003",
            "assume_role_policy": "{\"Statement\":[{\"Action\":\"sts:AssumeRole\",\"Effect\":\"Allow\",\"Principal\":{\"Service\":\"ec2.amazonaws.com\"},\"Sid\":\"\"}],\"Version\":\"2012-10-17\"}",
            "create_date": "2022-11-23T17:25:45Z",
            "description": "",
            "force_detach_policies": false,
            "id": "polygon-edge-node-20221123172544131900000003",
            "inline_policy": [],
            "managed_policy_arns": [],
            "max_session_duration": 3600,
            "name": "polygon-edge-node-20221123172544131900000003",
            "name_prefix": "polygon-edge-node-",
            "path": "/",
            "permissions_boundary": null,
            "tags": null,
            "tags_all": {},
            "unique_id": "AROA5B3QVTZAULIS2UQYT"
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "module.test-main.module.security.data.aws_iam_policy_document.ec2_trust"
          ]
        }
      ]
    },
    {
      "module": "module.test-main.module.security",
      "mode": "managed",
      "type": "aws_iam_role_policy",
      "name": "polygon_edge_node",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "id": "polygon-edge-node-20221123172544131900000003:polygon-edge-node-2022112317255057190000000a",
            "name": "polygon-edge-node-2022112317255057190000000a",
            "name_prefix": "polygon-edge-node-",
            "policy": "{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Sid\": \"\",\n      \"Effect\": \"Allow\",\n      \"Action\": [\n        \"ssm:PutParameter\",\n        \"ssm:GetParameter\",\n        \"ssm:DeleteParameter\"\n      ],\n      \"Resource\": \"arn:aws:ssm:us-west-2:897347591745:parameter/polygon-edge-validators/*\"\n    },\n    {\n      \"Sid\": \"\",\n      \"Effect\": \"Allow\",\n      \"Action\": [\n        \"s3:PutObject\",\n        \"s3:GetObject\",\n        \"s3:DeleteObject\"\n      ],\n      \"Resource\": \"arn:aws:s3:::polygon-edge-shared-20221123172544133800000005/*\"\n    },\n    {\n      \"Sid\": \"\",\n      \"Effect\": \"Allow\",\n      \"Action\": \"s3:ListBucket\",\n      \"Resource\": \"arn:aws:s3:::polygon-edge-shared-20221123172544133800000005\"\n    },\n    {\n      \"Sid\": \"\",\n      \"Effect\": \"Allow\",\n      \"Action\": \"lambda:InvokeFunction\",\n      \"Resource\": \"arn:aws:lambda:us-west-2:897347591745:function/polygon-edge-init\"\n    }\n  ]\n}",
            "role": "polygon-edge-node-20221123172544131900000003"
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "module.test-main.data.aws_caller_identity.current",
            "module.test-main.data.aws_region.current",
            "module.test-main.module.s3.aws_s3_bucket.this",
            "module.test-main.module.s3.aws_s3_bucket_policy.this",
            "module.test-main.module.security.aws_iam_role.polygon_edge_node",
            "module.test-main.module.security.data.aws_iam_policy_document.ec2_trust",
            "module.test-main.module.security.data.aws_iam_policy_document.polygon_edge_node"
          ]
        }
      ]
    },
    {
      "module": "module.test-main.module.security",
      "mode": "managed",
      "type": "aws_iam_role_policy_attachment",
      "name": "ssm_role_policy_attach",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "id": "polygon-edge-node-20221123172544131900000003-20221123172546764100000007",
            "policy_arn": "arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore",
            "role": "polygon-edge-node-20221123172544131900000003"
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "module.test-main.module.security.aws_iam_role.polygon_edge_node",
            "module.test-main.module.security.data.aws_iam_policy.amazon_ssm_managed_instance_core",
            "module.test-main.module.security.data.aws_iam_policy_document.ec2_trust"
          ]
        }
      ]
    },
    {
      "module": "module.test-main.module.security",
      "mode": "managed",
      "type": "aws_security_group",
      "name": "json_rpc_alb",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 1,
          "attributes": {
            "arn": "arn:aws:ec2:us-west-2:897347591745:security-group/sg-0d35a8f852a337cf1",
            "description": "Allow External Traffic to ALB",
            "egress": [],
            "id": "sg-0d35a8f852a337cf1",
            "ingress": [],
            "name": "Poligon_Edge_JSONRPC_ALB_2022112317261970220000000e",
            "name_prefix": "Poligon_Edge_JSONRPC_ALB_",
            "owner_id": "897347591745",
            "revoke_rules_on_delete": false,
            "tags": {
              "Name": "Polygon Edge External"
            },
            "tags_all": {
              "Name": "Polygon Edge External"
            },
            "timeouts": null,
            "vpc_id": "vpc-07e09592f822fc612"
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMDAsImRlbGV0ZSI6OTAwMDAwMDAwMDAwfSwic2NoZW1hX3ZlcnNpb24iOiIxIn0=",
          "dependencies": [
            "module.test-main.module.vpc.aws_vpc.main",
            "module.test-main.module.vpc.data.aws_vpc_ipam_preview_next_cidr.main",
            "module.test-main.module.vpc.data.awscc_ec2_vpc.main"
          ]
        }
      ]
    },
    {
      "module": "module.test-main.module.security",
      "mode": "managed",
      "type": "aws_security_group",
      "name": "polygon_internal",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 1,
          "attributes": {
            "arn": "arn:aws:ec2:us-west-2:897347591745:security-group/sg-072527d2b77b17da4",
            "description": "Allow Internal Traffic on Polygon Edge Nodes",
            "egress": [],
            "id": "sg-072527d2b77b17da4",
            "ingress": [],
            "name": "Polygon_Edge_Node_Internal_2022112317261998630000000f",
            "name_prefix": "Polygon_Edge_Node_Internal_",
            "owner_id": "897347591745",
            "revoke_rules_on_delete": false,
            "tags": {
              "Name": "Polygon Edge Internal"
            },
            "tags_all": {
              "Name": "Polygon Edge Internal"
            },
            "timeouts": null,
            "vpc_id": "vpc-07e09592f822fc612"
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMDAsImRlbGV0ZSI6OTAwMDAwMDAwMDAwfSwic2NoZW1hX3ZlcnNpb24iOiIxIn0=",
          "dependencies": [
            "module.test-main.module.vpc.aws_vpc.main",
            "module.test-main.module.vpc.data.aws_vpc_ipam_preview_next_cidr.main",
            "module.test-main.module.vpc.data.awscc_ec2_vpc.main"
          ]
        }
      ]
    },
    {
      "module": "module.test-main.module.security",
      "mode": "managed",
      "type": "aws_security_group_rule",
      "name": "allow_alb_egress",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 2,
          "attributes": {
            "cidr_blocks": [
              "0.0.0.0/0"
            ],
            "description": "Allow all outbound",
            "from_port": 0,
            "id": "sgrule-1666803985",
            "ipv6_cidr_blocks": [
              "::/0"
            ],
            "prefix_list_ids": null,
            "protocol": "-1",
            "security_group_id": "sg-0d35a8f852a337cf1",
            "self": false,
            "source_security_group_id": null,
            "timeouts": null,
            "to_port": 0,
            "type": "egress"
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjozMDAwMDAwMDAwMDB9LCJzY2hlbWFfdmVyc2lvbiI6IjIifQ==",
          "dependencies": [
            "module.test-main.module.security.aws_security_group.json_rpc_alb",
            "module.test-main.module.vpc.aws_vpc.main",
            "module.test-main.module.vpc.data.aws_vpc_ipam_preview_next_cidr.main",
            "module.test-main.module.vpc.data.awscc_ec2_vpc.main"
          ]
        }
      ]
    },
    {
      "module": "module.test-main.module.security",
      "mode": "managed",
      "type": "aws_security_group_rule",
      "name": "allow_alb_http",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 2,
          "attributes": {
            "cidr_blocks": [
              "0.0.0.0/0"
            ],
            "description": "Allow HTTP traffic for ALB",
            "from_port": 80,
            "id": "sgrule-3344007157",
            "ipv6_cidr_blocks": null,
            "prefix_list_ids": null,
            "protocol": "tcp",
            "security_group_id": "sg-0d35a8f852a337cf1",
            "self": false,
            "source_security_group_id": null,
            "timeouts": null,
            "to_port": 80,
            "type": "ingress"
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjozMDAwMDAwMDAwMDB9LCJzY2hlbWFfdmVyc2lvbiI6IjIifQ==",
          "dependencies": [
            "module.test-main.module.security.aws_security_group.json_rpc_alb",
            "module.test-main.module.vpc.aws_vpc.main",
            "module.test-main.module.vpc.data.aws_vpc_ipam_preview_next_cidr.main",
            "module.test-main.module.vpc.data.awscc_ec2_vpc.main"
          ]
        }
      ]
    },
    {
      "module": "module.test-main.module.security",
      "mode": "managed",
      "type": "aws_security_group_rule",
      "name": "allow_alb_https",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 2,
          "attributes": {
            "cidr_blocks": [
              "0.0.0.0/0"
            ],
            "description": "Allow HTTPS traffic for ALB",
            "from_port": 443,
            "id": "sgrule-257088758",
            "ipv6_cidr_blocks": null,
            "prefix_list_ids": null,
            "protocol": "tcp",
            "security_group_id": "sg-0d35a8f852a337cf1",
            "self": false,
            "source_security_group_id": null,
            "timeouts": null,
            "to_port": 443,
            "type": "ingress"
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjozMDAwMDAwMDAwMDB9LCJzY2hlbWFfdmVyc2lvbiI6IjIifQ==",
          "dependencies": [
            "module.test-main.module.security.aws_security_group.json_rpc_alb",
            "module.test-main.module.vpc.aws_vpc.main",
            "module.test-main.module.vpc.data.aws_vpc_ipam_preview_next_cidr.main",
            "module.test-main.module.vpc.data.awscc_ec2_vpc.main"
          ]
        }
      ]
    },
    {
      "module": "module.test-main.module.security",
      "mode": "managed",
      "type": "aws_security_group_rule",
      "name": "allow_jsonrpc",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 2,
          "attributes": {
            "cidr_blocks": null,
            "description": "Allow Public Access to nodes JSON-RPC",
            "from_port": 8545,
            "id": "sgrule-3204101414",
            "ipv6_cidr_blocks": null,
            "prefix_list_ids": null,
            "protocol": "tcp",
            "security_group_id": "sg-072527d2b77b17da4",
            "self": false,
            "source_security_group_id": "sg-0d35a8f852a337cf1",
            "timeouts": null,
            "to_port": 8545,
            "type": "ingress"
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjozMDAwMDAwMDAwMDB9LCJzY2hlbWFfdmVyc2lvbiI6IjIifQ==",
          "dependencies": [
            "module.test-main.module.security.aws_security_group.json_rpc_alb",
            "module.test-main.module.security.aws_security_group.polygon_internal",
            "module.test-main.module.vpc.aws_vpc.main",
            "module.test-main.module.vpc.data.aws_vpc_ipam_preview_next_cidr.main",
            "module.test-main.module.vpc.data.awscc_ec2_vpc.main"
          ]
        }
      ]
    },
    {
      "module": "module.test-main.module.security",
      "mode": "managed",
      "type": "aws_security_group_rule",
      "name": "allow_libp2p",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 2,
          "attributes": {
            "cidr_blocks": null,
            "description": "LibP2P Allow",
            "from_port": 1478,
            "id": "sgrule-3304879704",
            "ipv6_cidr_blocks": null,
            "prefix_list_ids": null,
            "protocol": "tcp",
            "security_group_id": "sg-072527d2b77b17da4",
            "self": true,
            "source_security_group_id": null,
            "timeouts": null,
            "to_port": 1478,
            "type": "ingress"
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjozMDAwMDAwMDAwMDB9LCJzY2hlbWFfdmVyc2lvbiI6IjIifQ==",
          "dependencies": [
            "module.test-main.module.security.aws_security_group.polygon_internal",
            "module.test-main.module.vpc.aws_vpc.main",
            "module.test-main.module.vpc.data.aws_vpc_ipam_preview_next_cidr.main",
            "module.test-main.module.vpc.data.awscc_ec2_vpc.main"
          ]
        }
      ]
    },
    {
      "module": "module.test-main.module.security",
      "mode": "managed",
      "type": "aws_security_group_rule",
      "name": "allow_nodes_egress",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 2,
          "attributes": {
            "cidr_blocks": [
              "0.0.0.0/0"
            ],
            "description": "Allow all outbound",
            "from_port": 0,
            "id": "sgrule-3857990446",
            "ipv6_cidr_blocks": [
              "::/0"
            ],
            "prefix_list_ids": null,
            "protocol": "-1",
            "security_group_id": "sg-072527d2b77b17da4",
            "self": false,
            "source_security_group_id": null,
            "timeouts": null,
            "to_port": 0,
            "type": "egress"
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjozMDAwMDAwMDAwMDB9LCJzY2hlbWFfdmVyc2lvbiI6IjIifQ==",
          "dependencies": [
            "module.test-main.module.security.aws_security_group.polygon_internal",
            "module.test-main.module.vpc.aws_vpc.main",
            "module.test-main.module.vpc.data.aws_vpc_ipam_preview_next_cidr.main",
            "module.test-main.module.vpc.data.awscc_ec2_vpc.main"
          ]
        }
      ]
    },
    {
      "module": "module.test-main.module.user_data[\"0\"]",
      "mode": "data",
      "type": "template_cloudinit_config",
      "name": "polygon_edge",
      "provider": "provider[\"registry.terraform.io/hashicorp/template\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "base64_encode": true,
            "gzip": true,
            "id": "3168093345",
            "part": [
              {
                "content": "#!/bin/bash\nPOLYGON_FOLDER=\"/home/ubuntu/polygon\"\nLOGS_FOLDER=\"/home/ubuntu/polygon/logs\"\nDATA_FOLDER=\"/home/ubuntu/polygon/data\"\nEBS_DEVICE=\"/dev/nvme1n1\"\nLOG_FILE=\"$LOGS_FOLDER/init.log\"\nNODE_INIT_FILE=\"$LOGS_FOLDER/node_init.json\"\nLINUX_USER=\"ubuntu\"\nNODE_NAME=\"node-us-west-2a\"\nASSM_PARAM_PATH=\"/polygon-edge-validators\"\nASSM_REGION=\"us-west-2\"\nIP=\"$(hostname -I)\"\n\n# create a startup log\n\nTOTAL_NODES=\"4\"\n\n# create central dir that will hold chain data and logs\nif [ ! -d \"$POLYGON_FOLDER\" ];\nthen\nmkdir \"$POLYGON_FOLDER\"\nfi\n# crate logs dir\nif [ ! -d \"$LOGS_FOLDER\" ];\nthen\nmkdir \"$LOGS_FOLDER\"\nfi\n\necho \"----------- Script starting on :$(date) ----------------\" \u003e\u003e \"$LOG_FILE\"\n## Check if data directory already exists\nif [ -d \"$DATA_FOLDER\" ];\nthen\n        echo \"$DATA_FOLDER direcotory is already created. Skipping directory creation...\" \u003e\u003e \"$LOG_FILE\"\nelse\n        ERR=$(mkdir \"$DATA_FOLDER\" 2\u003e\u00261 \u003e /dev/null)\n        [ $? -eq 0 ] \u0026\u0026 echo \"Data directory created!\" \u003e\u003e \"$LOG_FILE\" || echo \"Directory creation failed! Error: $ERR\" \u003e\u003e \"$LOG_FILE\"\nfi\n\n# Wait for the system to fully boot before attemting to mount the EBS\ncounter=0\nwhile [ ! -b \"$EBS_DEVICE\" ]; \ndo\n    sleep 10\n    counter=$((counter + 1))\n    if [ $counter -ge 30 ]; \n    then\n        echo \"Could not initialize $EBS_DEVICE for more than 5 minutes. Exiting ...\"\u003e\u003e \"$LOG_FILE\"\n        exit 1\n    fi\ndone\n\n# Check if EBS storage exists\nif [ -b \"$EBS_DEVICE\" ];\nthen\n        # Check if we already have a filesystem on $EBS_DEVICE. If not create one.\n        if [[ $(file -s \"$EBS_DEVICE\") == \"$EBS_DEVICE: data\" ]];\n        then\n                ERR=$(mkfs -t xfs \"$EBS_DEVICE\" 2\u003e\u00261 \u003e /dev/null)\n                [ $? -eq 0 ] \u0026\u0026 echo \"EBS volume successfuly formated\" \u003e\u003e \"$LOG_FILE\" || echo \"Error formating EBS volume. ERR: $ERR\" \u003e\u003e \"$LOG_FILE\"\n        else\n                echo \"$EBS_DEVICE already has a file system! Skipping... \"\u003e\u003e \"$LOG_FILE\"\n        fi\n        # If block ebs device exists and it has a filesystem, check if it is mounted and mount if it is not already mounted\n        if grep -qs \"$EBS_DEVICE\" /proc/mounts;\n        then\n                echo \"EBS Volume already mounted. Skipping...\" \u003e\u003e \"$LOG_FILE\"\n        else\n                # Mount EBS volume\n                mount \"$EBS_DEVICE\" \"$DATA_FOLDER\"\n                [ $? -eq 0 ] \u0026\u0026 echo \"EBS Volume successfuly mounted!\" \u003e\u003e \"$LOG_FILE\"\n                ## Edit fstab\n                echo \"$EBS_DEVICE   $DATA_FOLDER    xfs     defaults,nofail     0 2\" \u003e\u003e /etc/fstab\n                [ $? -eq 0 ] \u0026\u0026 echo \"Fstab successfuly edited. EBS Volume added.\" \u003e\u003e \"$LOG_FILE\" || echo \"Fstab EBS volume edit failed!\" \u003e\u003e \"$LOG_FILE\"\n                ## Set right permissions for ubuntu user\n                chown -R \"$LINUX_USER\". \"$DATA_FOLDER\"\n                [ $? -eq 0 ] \u0026\u0026 echo \"User permissions on $DATA_FOLDER set...\" \u003e\u003e $LOG_FILE || echo \"Could not set $DATA_FOLDER permissions!\"\n        fi\nelse\n        echo \"No EBS Volume detected! Check if it is attached and/or if it is mounted on $EBS_DEVICE\" \u003e\u003e \"$LOG_FILE\"\nfi\n\necho \"--------------------------------------------------------------\" \u003e\u003e \"$LOG_FILE\"\necho \"Getting polygon-edge binary ...\" \u003e\u003e \"$LOG_FILE\"\n\n# wait for system to fully boot\nsleep 60\n\n\n# get polygon-edge binary from github releases\nsudo apt update \u0026\u0026 sudo apt install -y jq\nmkdir /tmp/polygon-edge\nwget -q -O /tmp/polygon-edge/polygon-edge.tar.gz \"$(curl -s https://api.github.com/repos/0xPolygon/polygon-edge/releases/latest | jq .assets[3].browser_download_url  | tr -d '\"')\"\ntar -xvf /tmp/polygon-edge/polygon-edge.tar.gz -C /tmp/polygon-edge\nsudo mv /tmp/polygon-edge/polygon-edge /usr/local/bin/\nrm -R /tmp/polygon-edge\n\n# install awscli so that we can call Lambda function\nsudo apt update \u0026\u0026 sudo apt install -y awscli\n\n# create json lambda query\njsonLambda=$(cat \u003c\u003cEOF\n{\n  \"config\": {\n\t  \"aws_region\": \"$ASSM_REGION\",\n\t  \"s3_bucket_name\": \"polygon-edge-shared-20221123172544133800000005\",\n\t  \"s3_key_name\": \"chain-config\",\n\n    \"premine\": \"100\",\n    \"chain_name\": \"\",\n\t  \"chain_id\": \"\",\n\t  \"pos\": false,\n\t  \"epoch_size\": \"\",\n\t  \"block_gas_limit\": \"\",\n\t  \"max_validator_count\": \"\",\n\t  \"min_validator_count\": \"\",\n\t  \"consensus\": \"\"\n  },\n  \"nodes\": {\n\t  \"total\": $TOTAL_NODES,\n\t  \"node_info\": {\n      \"ssm_param_id\": \"polygon-edge-validators\",\n        \"node_name\": \"$NODE_NAME\",\n        \"ip\": \"$IP\"\n\t  }\n  }\n}\nEOF\n)\n\necho \"--------------------------------------------------------------\" \u003e\u003e \"$LOG_FILE\"\necho \"System init complete. Starting node initialization ...\" \u003e\u003e \"$LOG_FILE\"\n\n# Check if data folder is empty\nif [ \"$(ls -A \"$DATA_FOLDER\")\" ]; then\n        echo \"Files in data dir found. Skipping Polygon edge initialization...\" \u003e\u003e \"$LOG_FILE\"\nelse\n        echo \"Starting node initialization\" \u003e\u003e \"$LOG_FILE\"\n        /usr/local/bin/polygon-edge secrets generate --type aws-ssm --name \"$NODE_NAME\" --extra region=\"$ASSM_REGION\",ssm-parameter-path=\"$ASSM_PARAM_PATH\" --dir \"$DATA_FOLDER/secretsConfig.json\"\n        POLYGON=$(/usr/local/bin/polygon-edge secrets init --config \"$DATA_FOLDER\"/secretsConfig.json --json 2\u003e\u00261)\n        # Check if everything went ok\n        if [ $? -eq 0 ]; then\n            echo \"Starting lambda function\" \u003e\u003e \"$LOG_FILE\"\n            aws lambda invoke --function-name \"polygon-edge-init\" --region \"$ASSM_REGION\" --payload \"$jsonLambda\" \"$LOGS_FOLDER/lambda.json\"\n        else\n                echo \"The initialization of polygon edge failed. Check log @ $LOG_FILE\" \u003e\u003e \"$LOG_FILE\"\n                echo \"$POLYGON\" \u003e\u003e \"$LOG_FILE\"\n        fi\nfi\n\nchown -R \"$LINUX_USER\". \"$POLYGON_FOLDER\"\n\necho \"ALL DONE!\" \u003e\u003e \"$LOG_FILE\"\necho \"-------- Finished on: $(date)  ----------\" \u003e\u003e \"$LOG_FILE\"\nexit 0",
                "content_type": "text/x-shellscript",
                "filename": "",
                "merge_type": ""
              },
              {
                "content": "#!/bin/bash\r\nDATA_DIR=\"/home/ubuntu/polygon/data\"\r\nSECRETS_FILE=\"$DATA_DIR/secretsConfig.json\"\r\nGENESIS_FILE=\"$DATA_DIR/genesis.json\"\r\nS3_GENESIS=\"polygon-edge-shared-20221123172544133800000005/genesis.json\"\r\nLOG_FILE=\"/home/ubuntu/polygon/logs/edge-server.log\"\r\n\r\n# install awscli so that we can fetch genesis.json\r\nsudo apt update \u0026\u0026 sudo apt install -y awscli\r\n\r\n# wait untill genesis.json is found in the S3 bucket\r\nwhile ! aws s3 ls polygon-edge-shared-20221123172544133800000005 | grep genesis.json \u003e /dev/null;\r\ndo\r\n  echo \"Waiting for genesis.json to appear in S3 bucket...\"\r\n  sleep 10\r\ndone\r\n\r\n# we found genesis.json, now we download it to data folder\r\naws s3 cp s3://$S3_GENESIS $DATA_DIR\r\n\r\n\r\n# Create polygon-edge service and start it after genesis.json file is detected\r\ncat \u003e /etc/systemd/system/polygon_genesis.target \u003c\u003c EOF\r\n# check if genesys.json exists\r\n[Unit]\r\nTimeoutStartSec=infinity\r\nConditionPathExists=$GENESIS_FILE\r\nExecStart=/usr/bin/sleep 5\r\nRemainAfterExit=yes\r\nEOF\r\n\r\n## TODO make server options customisable\r\ncat \u003e /etc/systemd/system/polygon-edge.service \u003c\u003c EOF\r\n[Unit]\r\nDescription=Polygon Edge Server\r\nAfter=network.target polygon_genesis.target\r\nWants=polygon_genesis.target\r\nStartLimitIntervalSec=0\r\n\r\n[Service]\r\nType=simple\r\nRestart=always\r\nRestartSec=10\r\nUser=ubuntu\r\nStandardOutput=syslog\r\nStandardError=file:$LOG_FILE\r\nExecStartPre=/bin/bash -c \"sudo rm $LOG_FILE\"\r\nExecStart=/usr/local/bin/polygon-edge server --data-dir $DATA_DIR --chain $GENESIS_FILE --libp2p 0.0.0.0:1478 --grpc-address 0.0.0.0:9632 --secrets-config $SECRETS_FILE --seal SERVER_OPTIONS\r\n\r\n[Install]\r\nWantedBy=multi-user.target\r\nEOF\r\n\r\n#### customise server options\r\n\r\n# enable Prometheus API\r\nif [ \"\" != \"\" ]; then\r\n  prometheus=\"--prometheus \"\r\nfi\r\n\r\n# set block gas limit\r\nif [ \"\" != \"\" ]; then\r\n  block_gas_target=\"--block-gas-target \"\r\nfi\r\n\r\n# set nated address\r\nif [ \"\" != \"\" ]; then\r\n nat=\"--nat \"\r\nfi\r\n\r\n# set dns name\r\nif [ \"\" != \"\" ]; then\r\n dns_name=\"--dns \"\r\nfi\r\n\r\n# set price limit\r\nif [ \"\" != \"\" ]; then\r\n price_limit=\"--price-limit \"\r\nfi\r\n\r\n# set max slots\r\nif [ \"\" != \"\" ]; then\r\n max_slots=\"--max-slots \"\r\nfi\r\n\r\n# set block time in seconds\r\nif [ \"\" != \"\" ]; then\r\n  block_time=\"--block-time \"\r\nfi\r\n\r\n# set these parameters in service file\r\nsed -i \"s/SERVER_OPTIONS/$prometheus $block_gas_target $nat $dns $price_limit $max_slots $block_time/g\" /etc/systemd/system/polygon-edge.service\r\n\r\n# change ownership of the polygon folder to ubuntu user\r\nsudo chown -R ubuntu. /home/ubuntu/polygon\r\n\r\n# Enable polygon-edge on startup\r\nsudo /usr/bin/systemctl enable polygon-edge.service\r\n\r\n# Start polygon-edge service\r\nsudo /usr/bin/systemctl start polygon-edge.service",
                "content_type": "text/x-shellscript",
                "filename": "",
                "merge_type": ""
              }
            ],
            "rendered": "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"
          },
          "sensitive_attributes": []
        }
      ]
    },
    {
      "module": "module.test-main.module.user_data[\"0\"]",
      "mode": "data",
      "type": "template_file",
      "name": "polygon_edge_node",
      "provider": "provider[\"registry.terraform.io/hashicorp/template\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "filename": null,
            "id": "87581cb129265cb820f7a9022e2a743293a6e8b88af5433786c46fec89386202",
            "rendered": "#!/bin/bash\nPOLYGON_FOLDER=\"/home/ubuntu/polygon\"\nLOGS_FOLDER=\"/home/ubuntu/polygon/logs\"\nDATA_FOLDER=\"/home/ubuntu/polygon/data\"\nEBS_DEVICE=\"/dev/nvme1n1\"\nLOG_FILE=\"$LOGS_FOLDER/init.log\"\nNODE_INIT_FILE=\"$LOGS_FOLDER/node_init.json\"\nLINUX_USER=\"ubuntu\"\nNODE_NAME=\"node-us-west-2a\"\nASSM_PARAM_PATH=\"/polygon-edge-validators\"\nASSM_REGION=\"us-west-2\"\nIP=\"$(hostname -I)\"\n\n# create a startup log\n\nTOTAL_NODES=\"4\"\n\n# create central dir that will hold chain data and logs\nif [ ! -d \"$POLYGON_FOLDER\" ];\nthen\nmkdir \"$POLYGON_FOLDER\"\nfi\n# crate logs dir\nif [ ! -d \"$LOGS_FOLDER\" ];\nthen\nmkdir \"$LOGS_FOLDER\"\nfi\n\necho \"----------- Script starting on :$(date) ----------------\" \u003e\u003e \"$LOG_FILE\"\n## Check if data directory already exists\nif [ -d \"$DATA_FOLDER\" ];\nthen\n        echo \"$DATA_FOLDER direcotory is already created. Skipping directory creation...\" \u003e\u003e \"$LOG_FILE\"\nelse\n        ERR=$(mkdir \"$DATA_FOLDER\" 2\u003e\u00261 \u003e /dev/null)\n        [ $? -eq 0 ] \u0026\u0026 echo \"Data directory created!\" \u003e\u003e \"$LOG_FILE\" || echo \"Directory creation failed! Error: $ERR\" \u003e\u003e \"$LOG_FILE\"\nfi\n\n# Wait for the system to fully boot before attemting to mount the EBS\ncounter=0\nwhile [ ! -b \"$EBS_DEVICE\" ]; \ndo\n    sleep 10\n    counter=$((counter + 1))\n    if [ $counter -ge 30 ]; \n    then\n        echo \"Could not initialize $EBS_DEVICE for more than 5 minutes. Exiting ...\"\u003e\u003e \"$LOG_FILE\"\n        exit 1\n    fi\ndone\n\n# Check if EBS storage exists\nif [ -b \"$EBS_DEVICE\" ];\nthen\n        # Check if we already have a filesystem on $EBS_DEVICE. If not create one.\n        if [[ $(file -s \"$EBS_DEVICE\") == \"$EBS_DEVICE: data\" ]];\n        then\n                ERR=$(mkfs -t xfs \"$EBS_DEVICE\" 2\u003e\u00261 \u003e /dev/null)\n                [ $? -eq 0 ] \u0026\u0026 echo \"EBS volume successfuly formated\" \u003e\u003e \"$LOG_FILE\" || echo \"Error formating EBS volume. ERR: $ERR\" \u003e\u003e \"$LOG_FILE\"\n        else\n                echo \"$EBS_DEVICE already has a file system! Skipping... \"\u003e\u003e \"$LOG_FILE\"\n        fi\n        # If block ebs device exists and it has a filesystem, check if it is mounted and mount if it is not already mounted\n        if grep -qs \"$EBS_DEVICE\" /proc/mounts;\n        then\n                echo \"EBS Volume already mounted. Skipping...\" \u003e\u003e \"$LOG_FILE\"\n        else\n                # Mount EBS volume\n                mount \"$EBS_DEVICE\" \"$DATA_FOLDER\"\n                [ $? -eq 0 ] \u0026\u0026 echo \"EBS Volume successfuly mounted!\" \u003e\u003e \"$LOG_FILE\"\n                ## Edit fstab\n                echo \"$EBS_DEVICE   $DATA_FOLDER    xfs     defaults,nofail     0 2\" \u003e\u003e /etc/fstab\n                [ $? -eq 0 ] \u0026\u0026 echo \"Fstab successfuly edited. EBS Volume added.\" \u003e\u003e \"$LOG_FILE\" || echo \"Fstab EBS volume edit failed!\" \u003e\u003e \"$LOG_FILE\"\n                ## Set right permissions for ubuntu user\n                chown -R \"$LINUX_USER\". \"$DATA_FOLDER\"\n                [ $? -eq 0 ] \u0026\u0026 echo \"User permissions on $DATA_FOLDER set...\" \u003e\u003e $LOG_FILE || echo \"Could not set $DATA_FOLDER permissions!\"\n        fi\nelse\n        echo \"No EBS Volume detected! Check if it is attached and/or if it is mounted on $EBS_DEVICE\" \u003e\u003e \"$LOG_FILE\"\nfi\n\necho \"--------------------------------------------------------------\" \u003e\u003e \"$LOG_FILE\"\necho \"Getting polygon-edge binary ...\" \u003e\u003e \"$LOG_FILE\"\n\n# wait for system to fully boot\nsleep 60\n\n\n# get polygon-edge binary from github releases\nsudo apt update \u0026\u0026 sudo apt install -y jq\nmkdir /tmp/polygon-edge\nwget -q -O /tmp/polygon-edge/polygon-edge.tar.gz \"$(curl -s https://api.github.com/repos/0xPolygon/polygon-edge/releases/latest | jq .assets[3].browser_download_url  | tr -d '\"')\"\ntar -xvf /tmp/polygon-edge/polygon-edge.tar.gz -C /tmp/polygon-edge\nsudo mv /tmp/polygon-edge/polygon-edge /usr/local/bin/\nrm -R /tmp/polygon-edge\n\n# install awscli so that we can call Lambda function\nsudo apt update \u0026\u0026 sudo apt install -y awscli\n\n# create json lambda query\njsonLambda=$(cat \u003c\u003cEOF\n{\n  \"config\": {\n\t  \"aws_region\": \"$ASSM_REGION\",\n\t  \"s3_bucket_name\": \"polygon-edge-shared-20221123172544133800000005\",\n\t  \"s3_key_name\": \"chain-config\",\n\n    \"premine\": \"100\",\n    \"chain_name\": \"\",\n\t  \"chain_id\": \"\",\n\t  \"pos\": false,\n\t  \"epoch_size\": \"\",\n\t  \"block_gas_limit\": \"\",\n\t  \"max_validator_count\": \"\",\n\t  \"min_validator_count\": \"\",\n\t  \"consensus\": \"\"\n  },\n  \"nodes\": {\n\t  \"total\": $TOTAL_NODES,\n\t  \"node_info\": {\n      \"ssm_param_id\": \"polygon-edge-validators\",\n        \"node_name\": \"$NODE_NAME\",\n        \"ip\": \"$IP\"\n\t  }\n  }\n}\nEOF\n)\n\necho \"--------------------------------------------------------------\" \u003e\u003e \"$LOG_FILE\"\necho \"System init complete. Starting node initialization ...\" \u003e\u003e \"$LOG_FILE\"\n\n# Check if data folder is empty\nif [ \"$(ls -A \"$DATA_FOLDER\")\" ]; then\n        echo \"Files in data dir found. Skipping Polygon edge initialization...\" \u003e\u003e \"$LOG_FILE\"\nelse\n        echo \"Starting node initialization\" \u003e\u003e \"$LOG_FILE\"\n        /usr/local/bin/polygon-edge secrets generate --type aws-ssm --name \"$NODE_NAME\" --extra region=\"$ASSM_REGION\",ssm-parameter-path=\"$ASSM_PARAM_PATH\" --dir \"$DATA_FOLDER/secretsConfig.json\"\n        POLYGON=$(/usr/local/bin/polygon-edge secrets init --config \"$DATA_FOLDER\"/secretsConfig.json --json 2\u003e\u00261)\n        # Check if everything went ok\n        if [ $? -eq 0 ]; then\n            echo \"Starting lambda function\" \u003e\u003e \"$LOG_FILE\"\n            aws lambda invoke --function-name \"polygon-edge-init\" --region \"$ASSM_REGION\" --payload \"$jsonLambda\" \"$LOGS_FOLDER/lambda.json\"\n        else\n                echo \"The initialization of polygon edge failed. Check log @ $LOG_FILE\" \u003e\u003e \"$LOG_FILE\"\n                echo \"$POLYGON\" \u003e\u003e \"$LOG_FILE\"\n        fi\nfi\n\nchown -R \"$LINUX_USER\". \"$POLYGON_FOLDER\"\n\necho \"ALL DONE!\" \u003e\u003e \"$LOG_FILE\"\necho \"-------- Finished on: $(date)  ----------\" \u003e\u003e \"$LOG_FILE\"\nexit 0",
            "template": "#!/bin/bash\nPOLYGON_FOLDER=\"${polygon_edge_dir}\"\nLOGS_FOLDER=\"${polygon_edge_dir}/logs\"\nDATA_FOLDER=\"${polygon_edge_dir}/data\"\nEBS_DEVICE=\"${ebs_device}\"\nLOG_FILE=\"$LOGS_FOLDER/init.log\"\nNODE_INIT_FILE=\"$LOGS_FOLDER/node_init.json\"\nLINUX_USER=\"ubuntu\"\nNODE_NAME=\"${node_name}\"\nASSM_PARAM_PATH=\"/${assm_path}\"\nASSM_REGION=\"${assm_region}\"\nIP=\"$(hostname -I)\"\n\n# create a startup log\n\nTOTAL_NODES=\"${total_nodes}\"\n\n# create central dir that will hold chain data and logs\nif [ ! -d \"$POLYGON_FOLDER\" ];\nthen\nmkdir \"$POLYGON_FOLDER\"\nfi\n# crate logs dir\nif [ ! -d \"$LOGS_FOLDER\" ];\nthen\nmkdir \"$LOGS_FOLDER\"\nfi\n\necho \"----------- Script starting on :$(date) ----------------\" \u003e\u003e \"$LOG_FILE\"\n## Check if data directory already exists\nif [ -d \"$DATA_FOLDER\" ];\nthen\n        echo \"$DATA_FOLDER direcotory is already created. Skipping directory creation...\" \u003e\u003e \"$LOG_FILE\"\nelse\n        ERR=$(mkdir \"$DATA_FOLDER\" 2\u003e\u00261 \u003e /dev/null)\n        [ $? -eq 0 ] \u0026\u0026 echo \"Data directory created!\" \u003e\u003e \"$LOG_FILE\" || echo \"Directory creation failed! Error: $ERR\" \u003e\u003e \"$LOG_FILE\"\nfi\n\n# Wait for the system to fully boot before attemting to mount the EBS\ncounter=0\nwhile [ ! -b \"$EBS_DEVICE\" ]; \ndo\n    sleep 10\n    counter=$((counter + 1))\n    if [ $counter -ge 30 ]; \n    then\n        echo \"Could not initialize $EBS_DEVICE for more than 5 minutes. Exiting ...\"\u003e\u003e \"$LOG_FILE\"\n        exit 1\n    fi\ndone\n\n# Check if EBS storage exists\nif [ -b \"$EBS_DEVICE\" ];\nthen\n        # Check if we already have a filesystem on $EBS_DEVICE. If not create one.\n        if [[ $(file -s \"$EBS_DEVICE\") == \"$EBS_DEVICE: data\" ]];\n        then\n                ERR=$(mkfs -t xfs \"$EBS_DEVICE\" 2\u003e\u00261 \u003e /dev/null)\n                [ $? -eq 0 ] \u0026\u0026 echo \"EBS volume successfuly formated\" \u003e\u003e \"$LOG_FILE\" || echo \"Error formating EBS volume. ERR: $ERR\" \u003e\u003e \"$LOG_FILE\"\n        else\n                echo \"$EBS_DEVICE already has a file system! Skipping... \"\u003e\u003e \"$LOG_FILE\"\n        fi\n        # If block ebs device exists and it has a filesystem, check if it is mounted and mount if it is not already mounted\n        if grep -qs \"$EBS_DEVICE\" /proc/mounts;\n        then\n                echo \"EBS Volume already mounted. Skipping...\" \u003e\u003e \"$LOG_FILE\"\n        else\n                # Mount EBS volume\n                mount \"$EBS_DEVICE\" \"$DATA_FOLDER\"\n                [ $? -eq 0 ] \u0026\u0026 echo \"EBS Volume successfuly mounted!\" \u003e\u003e \"$LOG_FILE\"\n                ## Edit fstab\n                echo \"$EBS_DEVICE   $DATA_FOLDER    xfs     defaults,nofail     0 2\" \u003e\u003e /etc/fstab\n                [ $? -eq 0 ] \u0026\u0026 echo \"Fstab successfuly edited. EBS Volume added.\" \u003e\u003e \"$LOG_FILE\" || echo \"Fstab EBS volume edit failed!\" \u003e\u003e \"$LOG_FILE\"\n                ## Set right permissions for ubuntu user\n                chown -R \"$LINUX_USER\". \"$DATA_FOLDER\"\n                [ $? -eq 0 ] \u0026\u0026 echo \"User permissions on $DATA_FOLDER set...\" \u003e\u003e $LOG_FILE || echo \"Could not set $DATA_FOLDER permissions!\"\n        fi\nelse\n        echo \"No EBS Volume detected! Check if it is attached and/or if it is mounted on $EBS_DEVICE\" \u003e\u003e \"$LOG_FILE\"\nfi\n\necho \"--------------------------------------------------------------\" \u003e\u003e \"$LOG_FILE\"\necho \"Getting polygon-edge binary ...\" \u003e\u003e \"$LOG_FILE\"\n\n# wait for system to fully boot\nsleep 60\n\n\n# get polygon-edge binary from github releases\nsudo apt update \u0026\u0026 sudo apt install -y jq\nmkdir /tmp/polygon-edge\nwget -q -O /tmp/polygon-edge/polygon-edge.tar.gz \"$(curl -s https://api.github.com/repos/0xPolygon/polygon-edge/releases/latest | jq .assets[3].browser_download_url  | tr -d '\"')\"\ntar -xvf /tmp/polygon-edge/polygon-edge.tar.gz -C /tmp/polygon-edge\nsudo mv /tmp/polygon-edge/polygon-edge /usr/local/bin/\nrm -R /tmp/polygon-edge\n\n# install awscli so that we can call Lambda function\nsudo apt update \u0026\u0026 sudo apt install -y awscli\n\n# create json lambda query\njsonLambda=$(cat \u003c\u003cEOF\n{\n  \"config\": {\n\t  \"aws_region\": \"$ASSM_REGION\",\n\t  \"s3_bucket_name\": \"${s3_bucket_name}\",\n\t  \"s3_key_name\": \"${s3_key_name}\",\n\n    \"premine\": \"${premine}\",\n    \"chain_name\": \"${chain_name}\",\n\t  \"chain_id\": \"${chain_id}\",\n\t  \"pos\": ${pos},\n\t  \"epoch_size\": \"${epoch_size}\",\n\t  \"block_gas_limit\": \"${block_gas_limit}\",\n\t  \"max_validator_count\": \"${max_validator_count}\",\n\t  \"min_validator_count\": \"${min_validator_count}\",\n\t  \"consensus\": \"${consensus}\"\n  },\n  \"nodes\": {\n\t  \"total\": $TOTAL_NODES,\n\t  \"node_info\": {\n      \"ssm_param_id\": \"${assm_path}\",\n        \"node_name\": \"$NODE_NAME\",\n        \"ip\": \"$IP\"\n\t  }\n  }\n}\nEOF\n)\n\necho \"--------------------------------------------------------------\" \u003e\u003e \"$LOG_FILE\"\necho \"System init complete. Starting node initialization ...\" \u003e\u003e \"$LOG_FILE\"\n\n# Check if data folder is empty\nif [ \"$(ls -A \"$DATA_FOLDER\")\" ]; then\n        echo \"Files in data dir found. Skipping Polygon edge initialization...\" \u003e\u003e \"$LOG_FILE\"\nelse\n        echo \"Starting node initialization\" \u003e\u003e \"$LOG_FILE\"\n        /usr/local/bin/polygon-edge secrets generate --type aws-ssm --name \"$NODE_NAME\" --extra region=\"$ASSM_REGION\",ssm-parameter-path=\"$ASSM_PARAM_PATH\" --dir \"$DATA_FOLDER/secretsConfig.json\"\n        POLYGON=$(/usr/local/bin/polygon-edge secrets init --config \"$DATA_FOLDER\"/secretsConfig.json --json 2\u003e\u00261)\n        # Check if everything went ok\n        if [ $? -eq 0 ]; then\n            echo \"Starting lambda function\" \u003e\u003e \"$LOG_FILE\"\n            aws lambda invoke --function-name \"${lambda_function_name}\" --region \"$ASSM_REGION\" --payload \"$jsonLambda\" \"$LOGS_FOLDER/lambda.json\"\n        else\n                echo \"The initialization of polygon edge failed. Check log @ $LOG_FILE\" \u003e\u003e \"$LOG_FILE\"\n                echo \"$POLYGON\" \u003e\u003e \"$LOG_FILE\"\n        fi\nfi\n\nchown -R \"$LINUX_USER\". \"$POLYGON_FOLDER\"\n\necho \"ALL DONE!\" \u003e\u003e \"$LOG_FILE\"\necho \"-------- Finished on: $(date)  ----------\" \u003e\u003e \"$LOG_FILE\"\nexit 0",
            "vars": {
              "assm_path": "polygon-edge-validators",
              "assm_region": "us-west-2",
              "block_gas_limit": "",
              "chain_id": "",
              "chain_name": "",
              "consensus": "",
              "ebs_device": "/dev/nvme1n1",
              "epoch_size": "",
              "lambda_function_name": "polygon-edge-init",
              "max_validator_count": "",
              "min_validator_count": "",
              "node_name": "node-us-west-2a",
              "polygon_edge_dir": "/home/ubuntu/polygon",
              "pos": "false",
              "premine": "100",
              "s3_bucket_name": "polygon-edge-shared-20221123172544133800000005",
              "s3_key_name": "chain-config",
              "total_nodes": "4"
            }
          },
          "sensitive_attributes": []
        }
      ]
    },
    {
      "module": "module.test-main.module.user_data[\"0\"]",
      "mode": "data",
      "type": "template_file",
      "name": "polygon_edge_server",
      "provider": "provider[\"registry.terraform.io/hashicorp/template\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "filename": null,
            "id": "1fcdf916dcc7008b4f87dc13fd3b4e498aad1369cbcda5a083d814948e9d83a8",
            "rendered": "#!/bin/bash\r\nDATA_DIR=\"/home/ubuntu/polygon/data\"\r\nSECRETS_FILE=\"$DATA_DIR/secretsConfig.json\"\r\nGENESIS_FILE=\"$DATA_DIR/genesis.json\"\r\nS3_GENESIS=\"polygon-edge-shared-20221123172544133800000005/genesis.json\"\r\nLOG_FILE=\"/home/ubuntu/polygon/logs/edge-server.log\"\r\n\r\n# install awscli so that we can fetch genesis.json\r\nsudo apt update \u0026\u0026 sudo apt install -y awscli\r\n\r\n# wait untill genesis.json is found in the S3 bucket\r\nwhile ! aws s3 ls polygon-edge-shared-20221123172544133800000005 | grep genesis.json \u003e /dev/null;\r\ndo\r\n  echo \"Waiting for genesis.json to appear in S3 bucket...\"\r\n  sleep 10\r\ndone\r\n\r\n# we found genesis.json, now we download it to data folder\r\naws s3 cp s3://$S3_GENESIS $DATA_DIR\r\n\r\n\r\n# Create polygon-edge service and start it after genesis.json file is detected\r\ncat \u003e /etc/systemd/system/polygon_genesis.target \u003c\u003c EOF\r\n# check if genesys.json exists\r\n[Unit]\r\nTimeoutStartSec=infinity\r\nConditionPathExists=$GENESIS_FILE\r\nExecStart=/usr/bin/sleep 5\r\nRemainAfterExit=yes\r\nEOF\r\n\r\n## TODO make server options customisable\r\ncat \u003e /etc/systemd/system/polygon-edge.service \u003c\u003c EOF\r\n[Unit]\r\nDescription=Polygon Edge Server\r\nAfter=network.target polygon_genesis.target\r\nWants=polygon_genesis.target\r\nStartLimitIntervalSec=0\r\n\r\n[Service]\r\nType=simple\r\nRestart=always\r\nRestartSec=10\r\nUser=ubuntu\r\nStandardOutput=syslog\r\nStandardError=file:$LOG_FILE\r\nExecStartPre=/bin/bash -c \"sudo rm $LOG_FILE\"\r\nExecStart=/usr/local/bin/polygon-edge server --data-dir $DATA_DIR --chain $GENESIS_FILE --libp2p 0.0.0.0:1478 --grpc-address 0.0.0.0:9632 --secrets-config $SECRETS_FILE --seal SERVER_OPTIONS\r\n\r\n[Install]\r\nWantedBy=multi-user.target\r\nEOF\r\n\r\n#### customise server options\r\n\r\n# enable Prometheus API\r\nif [ \"\" != \"\" ]; then\r\n  prometheus=\"--prometheus \"\r\nfi\r\n\r\n# set block gas limit\r\nif [ \"\" != \"\" ]; then\r\n  block_gas_target=\"--block-gas-target \"\r\nfi\r\n\r\n# set nated address\r\nif [ \"\" != \"\" ]; then\r\n nat=\"--nat \"\r\nfi\r\n\r\n# set dns name\r\nif [ \"\" != \"\" ]; then\r\n dns_name=\"--dns \"\r\nfi\r\n\r\n# set price limit\r\nif [ \"\" != \"\" ]; then\r\n price_limit=\"--price-limit \"\r\nfi\r\n\r\n# set max slots\r\nif [ \"\" != \"\" ]; then\r\n max_slots=\"--max-slots \"\r\nfi\r\n\r\n# set block time in seconds\r\nif [ \"\" != \"\" ]; then\r\n  block_time=\"--block-time \"\r\nfi\r\n\r\n# set these parameters in service file\r\nsed -i \"s/SERVER_OPTIONS/$prometheus $block_gas_target $nat $dns $price_limit $max_slots $block_time/g\" /etc/systemd/system/polygon-edge.service\r\n\r\n# change ownership of the polygon folder to ubuntu user\r\nsudo chown -R ubuntu. /home/ubuntu/polygon\r\n\r\n# Enable polygon-edge on startup\r\nsudo /usr/bin/systemctl enable polygon-edge.service\r\n\r\n# Start polygon-edge service\r\nsudo /usr/bin/systemctl start polygon-edge.service",
            "template": "#!/bin/bash\r\nDATA_DIR=\"${polygon_edge_dir}/data\"\r\nSECRETS_FILE=\"$DATA_DIR/secretsConfig.json\"\r\nGENESIS_FILE=\"$DATA_DIR/genesis.json\"\r\nS3_GENESIS=\"${s3_bucket_name}/genesis.json\"\r\nLOG_FILE=\"${polygon_edge_dir}/logs/edge-server.log\"\r\n\r\n# install awscli so that we can fetch genesis.json\r\nsudo apt update \u0026\u0026 sudo apt install -y awscli\r\n\r\n# wait untill genesis.json is found in the S3 bucket\r\nwhile ! aws s3 ls ${s3_bucket_name} | grep genesis.json \u003e /dev/null;\r\ndo\r\n  echo \"Waiting for genesis.json to appear in S3 bucket...\"\r\n  sleep 10\r\ndone\r\n\r\n# we found genesis.json, now we download it to data folder\r\naws s3 cp s3://$S3_GENESIS $DATA_DIR\r\n\r\n\r\n# Create polygon-edge service and start it after genesis.json file is detected\r\ncat \u003e /etc/systemd/system/polygon_genesis.target \u003c\u003c EOF\r\n# check if genesys.json exists\r\n[Unit]\r\nTimeoutStartSec=infinity\r\nConditionPathExists=$GENESIS_FILE\r\nExecStart=/usr/bin/sleep 5\r\nRemainAfterExit=yes\r\nEOF\r\n\r\n## TODO make server options customisable\r\ncat \u003e /etc/systemd/system/polygon-edge.service \u003c\u003c EOF\r\n[Unit]\r\nDescription=Polygon Edge Server\r\nAfter=network.target polygon_genesis.target\r\nWants=polygon_genesis.target\r\nStartLimitIntervalSec=0\r\n\r\n[Service]\r\nType=simple\r\nRestart=always\r\nRestartSec=10\r\nUser=ubuntu\r\nStandardOutput=syslog\r\nStandardError=file:$LOG_FILE\r\nExecStartPre=/bin/bash -c \"sudo rm $LOG_FILE\"\r\nExecStart=/usr/local/bin/polygon-edge server --data-dir $DATA_DIR --chain $GENESIS_FILE --libp2p 0.0.0.0:1478 --grpc-address 0.0.0.0:9632 --secrets-config $SECRETS_FILE --seal SERVER_OPTIONS\r\n\r\n[Install]\r\nWantedBy=multi-user.target\r\nEOF\r\n\r\n#### customise server options\r\n\r\n# enable Prometheus API\r\nif [ \"${prometheus_address}\" != \"\" ]; then\r\n  prometheus=\"--prometheus ${prometheus_address}\"\r\nfi\r\n\r\n# set block gas limit\r\nif [ \"${block_gas_target}\" != \"\" ]; then\r\n  block_gas_target=\"--block-gas-target ${block_gas_target}\"\r\nfi\r\n\r\n# set nated address\r\nif [ \"${nat_address}\" != \"\" ]; then\r\n nat=\"--nat ${nat_address}\"\r\nfi\r\n\r\n# set dns name\r\nif [ \"${dns_name}\" != \"\" ]; then\r\n dns_name=\"--dns ${dns_name}\"\r\nfi\r\n\r\n# set price limit\r\nif [ \"${price_limit}\" != \"\" ]; then\r\n price_limit=\"--price-limit ${price_limit}\"\r\nfi\r\n\r\n# set max slots\r\nif [ \"${max_slots}\" != \"\" ]; then\r\n max_slots=\"--max-slots ${max_slots}\"\r\nfi\r\n\r\n# set block time in seconds\r\nif [ \"${block_time}\" != \"\" ]; then\r\n  block_time=\"--block-time ${block_time}\"\r\nfi\r\n\r\n# set these parameters in service file\r\nsed -i \"s/SERVER_OPTIONS/$prometheus $block_gas_target $nat $dns $price_limit $max_slots $block_time/g\" /etc/systemd/system/polygon-edge.service\r\n\r\n# change ownership of the polygon folder to ubuntu user\r\nsudo chown -R ubuntu. ${polygon_edge_dir}\r\n\r\n# Enable polygon-edge on startup\r\nsudo /usr/bin/systemctl enable polygon-edge.service\r\n\r\n# Start polygon-edge service\r\nsudo /usr/bin/systemctl start polygon-edge.service",
            "vars": {
              "block_gas_target": "",
              "block_time": "",
              "dns_name": "",
              "max_slots": "",
              "nat_address": "",
              "polygon_edge_dir": "/home/ubuntu/polygon",
              "price_limit": "",
              "prometheus_address": "",
              "s3_bucket_name": "polygon-edge-shared-20221123172544133800000005"
            }
          },
          "sensitive_attributes": []
        }
      ]
    },
    {
      "module": "module.test-main.module.user_data[\"1\"]",
      "mode": "data",
      "type": "template_cloudinit_config",
      "name": "polygon_edge",
      "provider": "provider[\"registry.terraform.io/hashicorp/template\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "base64_encode": true,
            "gzip": true,
            "id": "805445596",
            "part": [
              {
                "content": "#!/bin/bash\nPOLYGON_FOLDER=\"/home/ubuntu/polygon\"\nLOGS_FOLDER=\"/home/ubuntu/polygon/logs\"\nDATA_FOLDER=\"/home/ubuntu/polygon/data\"\nEBS_DEVICE=\"/dev/nvme1n1\"\nLOG_FILE=\"$LOGS_FOLDER/init.log\"\nNODE_INIT_FILE=\"$LOGS_FOLDER/node_init.json\"\nLINUX_USER=\"ubuntu\"\nNODE_NAME=\"node-us-west-2b\"\nASSM_PARAM_PATH=\"/polygon-edge-validators\"\nASSM_REGION=\"us-west-2\"\nIP=\"$(hostname -I)\"\n\n# create a startup log\n\nTOTAL_NODES=\"4\"\n\n# create central dir that will hold chain data and logs\nif [ ! -d \"$POLYGON_FOLDER\" ];\nthen\nmkdir \"$POLYGON_FOLDER\"\nfi\n# crate logs dir\nif [ ! -d \"$LOGS_FOLDER\" ];\nthen\nmkdir \"$LOGS_FOLDER\"\nfi\n\necho \"----------- Script starting on :$(date) ----------------\" \u003e\u003e \"$LOG_FILE\"\n## Check if data directory already exists\nif [ -d \"$DATA_FOLDER\" ];\nthen\n        echo \"$DATA_FOLDER direcotory is already created. Skipping directory creation...\" \u003e\u003e \"$LOG_FILE\"\nelse\n        ERR=$(mkdir \"$DATA_FOLDER\" 2\u003e\u00261 \u003e /dev/null)\n        [ $? -eq 0 ] \u0026\u0026 echo \"Data directory created!\" \u003e\u003e \"$LOG_FILE\" || echo \"Directory creation failed! Error: $ERR\" \u003e\u003e \"$LOG_FILE\"\nfi\n\n# Wait for the system to fully boot before attemting to mount the EBS\ncounter=0\nwhile [ ! -b \"$EBS_DEVICE\" ]; \ndo\n    sleep 10\n    counter=$((counter + 1))\n    if [ $counter -ge 30 ]; \n    then\n        echo \"Could not initialize $EBS_DEVICE for more than 5 minutes. Exiting ...\"\u003e\u003e \"$LOG_FILE\"\n        exit 1\n    fi\ndone\n\n# Check if EBS storage exists\nif [ -b \"$EBS_DEVICE\" ];\nthen\n        # Check if we already have a filesystem on $EBS_DEVICE. If not create one.\n        if [[ $(file -s \"$EBS_DEVICE\") == \"$EBS_DEVICE: data\" ]];\n        then\n                ERR=$(mkfs -t xfs \"$EBS_DEVICE\" 2\u003e\u00261 \u003e /dev/null)\n                [ $? -eq 0 ] \u0026\u0026 echo \"EBS volume successfuly formated\" \u003e\u003e \"$LOG_FILE\" || echo \"Error formating EBS volume. ERR: $ERR\" \u003e\u003e \"$LOG_FILE\"\n        else\n                echo \"$EBS_DEVICE already has a file system! Skipping... \"\u003e\u003e \"$LOG_FILE\"\n        fi\n        # If block ebs device exists and it has a filesystem, check if it is mounted and mount if it is not already mounted\n        if grep -qs \"$EBS_DEVICE\" /proc/mounts;\n        then\n                echo \"EBS Volume already mounted. Skipping...\" \u003e\u003e \"$LOG_FILE\"\n        else\n                # Mount EBS volume\n                mount \"$EBS_DEVICE\" \"$DATA_FOLDER\"\n                [ $? -eq 0 ] \u0026\u0026 echo \"EBS Volume successfuly mounted!\" \u003e\u003e \"$LOG_FILE\"\n                ## Edit fstab\n                echo \"$EBS_DEVICE   $DATA_FOLDER    xfs     defaults,nofail     0 2\" \u003e\u003e /etc/fstab\n                [ $? -eq 0 ] \u0026\u0026 echo \"Fstab successfuly edited. EBS Volume added.\" \u003e\u003e \"$LOG_FILE\" || echo \"Fstab EBS volume edit failed!\" \u003e\u003e \"$LOG_FILE\"\n                ## Set right permissions for ubuntu user\n                chown -R \"$LINUX_USER\". \"$DATA_FOLDER\"\n                [ $? -eq 0 ] \u0026\u0026 echo \"User permissions on $DATA_FOLDER set...\" \u003e\u003e $LOG_FILE || echo \"Could not set $DATA_FOLDER permissions!\"\n        fi\nelse\n        echo \"No EBS Volume detected! Check if it is attached and/or if it is mounted on $EBS_DEVICE\" \u003e\u003e \"$LOG_FILE\"\nfi\n\necho \"--------------------------------------------------------------\" \u003e\u003e \"$LOG_FILE\"\necho \"Getting polygon-edge binary ...\" \u003e\u003e \"$LOG_FILE\"\n\n# wait for system to fully boot\nsleep 60\n\n\n# get polygon-edge binary from github releases\nsudo apt update \u0026\u0026 sudo apt install -y jq\nmkdir /tmp/polygon-edge\nwget -q -O /tmp/polygon-edge/polygon-edge.tar.gz \"$(curl -s https://api.github.com/repos/0xPolygon/polygon-edge/releases/latest | jq .assets[3].browser_download_url  | tr -d '\"')\"\ntar -xvf /tmp/polygon-edge/polygon-edge.tar.gz -C /tmp/polygon-edge\nsudo mv /tmp/polygon-edge/polygon-edge /usr/local/bin/\nrm -R /tmp/polygon-edge\n\n# install awscli so that we can call Lambda function\nsudo apt update \u0026\u0026 sudo apt install -y awscli\n\n# create json lambda query\njsonLambda=$(cat \u003c\u003cEOF\n{\n  \"config\": {\n\t  \"aws_region\": \"$ASSM_REGION\",\n\t  \"s3_bucket_name\": \"polygon-edge-shared-20221123172544133800000005\",\n\t  \"s3_key_name\": \"chain-config\",\n\n    \"premine\": \"100\",\n    \"chain_name\": \"\",\n\t  \"chain_id\": \"\",\n\t  \"pos\": false,\n\t  \"epoch_size\": \"\",\n\t  \"block_gas_limit\": \"\",\n\t  \"max_validator_count\": \"\",\n\t  \"min_validator_count\": \"\",\n\t  \"consensus\": \"\"\n  },\n  \"nodes\": {\n\t  \"total\": $TOTAL_NODES,\n\t  \"node_info\": {\n      \"ssm_param_id\": \"polygon-edge-validators\",\n        \"node_name\": \"$NODE_NAME\",\n        \"ip\": \"$IP\"\n\t  }\n  }\n}\nEOF\n)\n\necho \"--------------------------------------------------------------\" \u003e\u003e \"$LOG_FILE\"\necho \"System init complete. Starting node initialization ...\" \u003e\u003e \"$LOG_FILE\"\n\n# Check if data folder is empty\nif [ \"$(ls -A \"$DATA_FOLDER\")\" ]; then\n        echo \"Files in data dir found. Skipping Polygon edge initialization...\" \u003e\u003e \"$LOG_FILE\"\nelse\n        echo \"Starting node initialization\" \u003e\u003e \"$LOG_FILE\"\n        /usr/local/bin/polygon-edge secrets generate --type aws-ssm --name \"$NODE_NAME\" --extra region=\"$ASSM_REGION\",ssm-parameter-path=\"$ASSM_PARAM_PATH\" --dir \"$DATA_FOLDER/secretsConfig.json\"\n        POLYGON=$(/usr/local/bin/polygon-edge secrets init --config \"$DATA_FOLDER\"/secretsConfig.json --json 2\u003e\u00261)\n        # Check if everything went ok\n        if [ $? -eq 0 ]; then\n            echo \"Starting lambda function\" \u003e\u003e \"$LOG_FILE\"\n            aws lambda invoke --function-name \"polygon-edge-init\" --region \"$ASSM_REGION\" --payload \"$jsonLambda\" \"$LOGS_FOLDER/lambda.json\"\n        else\n                echo \"The initialization of polygon edge failed. Check log @ $LOG_FILE\" \u003e\u003e \"$LOG_FILE\"\n                echo \"$POLYGON\" \u003e\u003e \"$LOG_FILE\"\n        fi\nfi\n\nchown -R \"$LINUX_USER\". \"$POLYGON_FOLDER\"\n\necho \"ALL DONE!\" \u003e\u003e \"$LOG_FILE\"\necho \"-------- Finished on: $(date)  ----------\" \u003e\u003e \"$LOG_FILE\"\nexit 0",
                "content_type": "text/x-shellscript",
                "filename": "",
                "merge_type": ""
              },
              {
                "content": "#!/bin/bash\r\nDATA_DIR=\"/home/ubuntu/polygon/data\"\r\nSECRETS_FILE=\"$DATA_DIR/secretsConfig.json\"\r\nGENESIS_FILE=\"$DATA_DIR/genesis.json\"\r\nS3_GENESIS=\"polygon-edge-shared-20221123172544133800000005/genesis.json\"\r\nLOG_FILE=\"/home/ubuntu/polygon/logs/edge-server.log\"\r\n\r\n# install awscli so that we can fetch genesis.json\r\nsudo apt update \u0026\u0026 sudo apt install -y awscli\r\n\r\n# wait untill genesis.json is found in the S3 bucket\r\nwhile ! aws s3 ls polygon-edge-shared-20221123172544133800000005 | grep genesis.json \u003e /dev/null;\r\ndo\r\n  echo \"Waiting for genesis.json to appear in S3 bucket...\"\r\n  sleep 10\r\ndone\r\n\r\n# we found genesis.json, now we download it to data folder\r\naws s3 cp s3://$S3_GENESIS $DATA_DIR\r\n\r\n\r\n# Create polygon-edge service and start it after genesis.json file is detected\r\ncat \u003e /etc/systemd/system/polygon_genesis.target \u003c\u003c EOF\r\n# check if genesys.json exists\r\n[Unit]\r\nTimeoutStartSec=infinity\r\nConditionPathExists=$GENESIS_FILE\r\nExecStart=/usr/bin/sleep 5\r\nRemainAfterExit=yes\r\nEOF\r\n\r\n## TODO make server options customisable\r\ncat \u003e /etc/systemd/system/polygon-edge.service \u003c\u003c EOF\r\n[Unit]\r\nDescription=Polygon Edge Server\r\nAfter=network.target polygon_genesis.target\r\nWants=polygon_genesis.target\r\nStartLimitIntervalSec=0\r\n\r\n[Service]\r\nType=simple\r\nRestart=always\r\nRestartSec=10\r\nUser=ubuntu\r\nStandardOutput=syslog\r\nStandardError=file:$LOG_FILE\r\nExecStartPre=/bin/bash -c \"sudo rm $LOG_FILE\"\r\nExecStart=/usr/local/bin/polygon-edge server --data-dir $DATA_DIR --chain $GENESIS_FILE --libp2p 0.0.0.0:1478 --grpc-address 0.0.0.0:9632 --secrets-config $SECRETS_FILE --seal SERVER_OPTIONS\r\n\r\n[Install]\r\nWantedBy=multi-user.target\r\nEOF\r\n\r\n#### customise server options\r\n\r\n# enable Prometheus API\r\nif [ \"\" != \"\" ]; then\r\n  prometheus=\"--prometheus \"\r\nfi\r\n\r\n# set block gas limit\r\nif [ \"\" != \"\" ]; then\r\n  block_gas_target=\"--block-gas-target \"\r\nfi\r\n\r\n# set nated address\r\nif [ \"\" != \"\" ]; then\r\n nat=\"--nat \"\r\nfi\r\n\r\n# set dns name\r\nif [ \"\" != \"\" ]; then\r\n dns_name=\"--dns \"\r\nfi\r\n\r\n# set price limit\r\nif [ \"\" != \"\" ]; then\r\n price_limit=\"--price-limit \"\r\nfi\r\n\r\n# set max slots\r\nif [ \"\" != \"\" ]; then\r\n max_slots=\"--max-slots \"\r\nfi\r\n\r\n# set block time in seconds\r\nif [ \"\" != \"\" ]; then\r\n  block_time=\"--block-time \"\r\nfi\r\n\r\n# set these parameters in service file\r\nsed -i \"s/SERVER_OPTIONS/$prometheus $block_gas_target $nat $dns $price_limit $max_slots $block_time/g\" /etc/systemd/system/polygon-edge.service\r\n\r\n# change ownership of the polygon folder to ubuntu user\r\nsudo chown -R ubuntu. /home/ubuntu/polygon\r\n\r\n# Enable polygon-edge on startup\r\nsudo /usr/bin/systemctl enable polygon-edge.service\r\n\r\n# Start polygon-edge service\r\nsudo /usr/bin/systemctl start polygon-edge.service",
                "content_type": "text/x-shellscript",
                "filename": "",
                "merge_type": ""
              }
            ],
            "rendered": "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"
          },
          "sensitive_attributes": []
        }
      ]
    },
    {
      "module": "module.test-main.module.user_data[\"1\"]",
      "mode": "data",
      "type": "template_file",
      "name": "polygon_edge_node",
      "provider": "provider[\"registry.terraform.io/hashicorp/template\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "filename": null,
            "id": "d6a85c39ee0bb5399215ae0d820e09aee3b1c133cf0ba8d61cf97a52ed331963",
            "rendered": "#!/bin/bash\nPOLYGON_FOLDER=\"/home/ubuntu/polygon\"\nLOGS_FOLDER=\"/home/ubuntu/polygon/logs\"\nDATA_FOLDER=\"/home/ubuntu/polygon/data\"\nEBS_DEVICE=\"/dev/nvme1n1\"\nLOG_FILE=\"$LOGS_FOLDER/init.log\"\nNODE_INIT_FILE=\"$LOGS_FOLDER/node_init.json\"\nLINUX_USER=\"ubuntu\"\nNODE_NAME=\"node-us-west-2b\"\nASSM_PARAM_PATH=\"/polygon-edge-validators\"\nASSM_REGION=\"us-west-2\"\nIP=\"$(hostname -I)\"\n\n# create a startup log\n\nTOTAL_NODES=\"4\"\n\n# create central dir that will hold chain data and logs\nif [ ! -d \"$POLYGON_FOLDER\" ];\nthen\nmkdir \"$POLYGON_FOLDER\"\nfi\n# crate logs dir\nif [ ! -d \"$LOGS_FOLDER\" ];\nthen\nmkdir \"$LOGS_FOLDER\"\nfi\n\necho \"----------- Script starting on :$(date) ----------------\" \u003e\u003e \"$LOG_FILE\"\n## Check if data directory already exists\nif [ -d \"$DATA_FOLDER\" ];\nthen\n        echo \"$DATA_FOLDER direcotory is already created. Skipping directory creation...\" \u003e\u003e \"$LOG_FILE\"\nelse\n        ERR=$(mkdir \"$DATA_FOLDER\" 2\u003e\u00261 \u003e /dev/null)\n        [ $? -eq 0 ] \u0026\u0026 echo \"Data directory created!\" \u003e\u003e \"$LOG_FILE\" || echo \"Directory creation failed! Error: $ERR\" \u003e\u003e \"$LOG_FILE\"\nfi\n\n# Wait for the system to fully boot before attemting to mount the EBS\ncounter=0\nwhile [ ! -b \"$EBS_DEVICE\" ]; \ndo\n    sleep 10\n    counter=$((counter + 1))\n    if [ $counter -ge 30 ]; \n    then\n        echo \"Could not initialize $EBS_DEVICE for more than 5 minutes. Exiting ...\"\u003e\u003e \"$LOG_FILE\"\n        exit 1\n    fi\ndone\n\n# Check if EBS storage exists\nif [ -b \"$EBS_DEVICE\" ];\nthen\n        # Check if we already have a filesystem on $EBS_DEVICE. If not create one.\n        if [[ $(file -s \"$EBS_DEVICE\") == \"$EBS_DEVICE: data\" ]];\n        then\n                ERR=$(mkfs -t xfs \"$EBS_DEVICE\" 2\u003e\u00261 \u003e /dev/null)\n                [ $? -eq 0 ] \u0026\u0026 echo \"EBS volume successfuly formated\" \u003e\u003e \"$LOG_FILE\" || echo \"Error formating EBS volume. ERR: $ERR\" \u003e\u003e \"$LOG_FILE\"\n        else\n                echo \"$EBS_DEVICE already has a file system! Skipping... \"\u003e\u003e \"$LOG_FILE\"\n        fi\n        # If block ebs device exists and it has a filesystem, check if it is mounted and mount if it is not already mounted\n        if grep -qs \"$EBS_DEVICE\" /proc/mounts;\n        then\n                echo \"EBS Volume already mounted. Skipping...\" \u003e\u003e \"$LOG_FILE\"\n        else\n                # Mount EBS volume\n                mount \"$EBS_DEVICE\" \"$DATA_FOLDER\"\n                [ $? -eq 0 ] \u0026\u0026 echo \"EBS Volume successfuly mounted!\" \u003e\u003e \"$LOG_FILE\"\n                ## Edit fstab\n                echo \"$EBS_DEVICE   $DATA_FOLDER    xfs     defaults,nofail     0 2\" \u003e\u003e /etc/fstab\n                [ $? -eq 0 ] \u0026\u0026 echo \"Fstab successfuly edited. EBS Volume added.\" \u003e\u003e \"$LOG_FILE\" || echo \"Fstab EBS volume edit failed!\" \u003e\u003e \"$LOG_FILE\"\n                ## Set right permissions for ubuntu user\n                chown -R \"$LINUX_USER\". \"$DATA_FOLDER\"\n                [ $? -eq 0 ] \u0026\u0026 echo \"User permissions on $DATA_FOLDER set...\" \u003e\u003e $LOG_FILE || echo \"Could not set $DATA_FOLDER permissions!\"\n        fi\nelse\n        echo \"No EBS Volume detected! Check if it is attached and/or if it is mounted on $EBS_DEVICE\" \u003e\u003e \"$LOG_FILE\"\nfi\n\necho \"--------------------------------------------------------------\" \u003e\u003e \"$LOG_FILE\"\necho \"Getting polygon-edge binary ...\" \u003e\u003e \"$LOG_FILE\"\n\n# wait for system to fully boot\nsleep 60\n\n\n# get polygon-edge binary from github releases\nsudo apt update \u0026\u0026 sudo apt install -y jq\nmkdir /tmp/polygon-edge\nwget -q -O /tmp/polygon-edge/polygon-edge.tar.gz \"$(curl -s https://api.github.com/repos/0xPolygon/polygon-edge/releases/latest | jq .assets[3].browser_download_url  | tr -d '\"')\"\ntar -xvf /tmp/polygon-edge/polygon-edge.tar.gz -C /tmp/polygon-edge\nsudo mv /tmp/polygon-edge/polygon-edge /usr/local/bin/\nrm -R /tmp/polygon-edge\n\n# install awscli so that we can call Lambda function\nsudo apt update \u0026\u0026 sudo apt install -y awscli\n\n# create json lambda query\njsonLambda=$(cat \u003c\u003cEOF\n{\n  \"config\": {\n\t  \"aws_region\": \"$ASSM_REGION\",\n\t  \"s3_bucket_name\": \"polygon-edge-shared-20221123172544133800000005\",\n\t  \"s3_key_name\": \"chain-config\",\n\n    \"premine\": \"100\",\n    \"chain_name\": \"\",\n\t  \"chain_id\": \"\",\n\t  \"pos\": false,\n\t  \"epoch_size\": \"\",\n\t  \"block_gas_limit\": \"\",\n\t  \"max_validator_count\": \"\",\n\t  \"min_validator_count\": \"\",\n\t  \"consensus\": \"\"\n  },\n  \"nodes\": {\n\t  \"total\": $TOTAL_NODES,\n\t  \"node_info\": {\n      \"ssm_param_id\": \"polygon-edge-validators\",\n        \"node_name\": \"$NODE_NAME\",\n        \"ip\": \"$IP\"\n\t  }\n  }\n}\nEOF\n)\n\necho \"--------------------------------------------------------------\" \u003e\u003e \"$LOG_FILE\"\necho \"System init complete. Starting node initialization ...\" \u003e\u003e \"$LOG_FILE\"\n\n# Check if data folder is empty\nif [ \"$(ls -A \"$DATA_FOLDER\")\" ]; then\n        echo \"Files in data dir found. Skipping Polygon edge initialization...\" \u003e\u003e \"$LOG_FILE\"\nelse\n        echo \"Starting node initialization\" \u003e\u003e \"$LOG_FILE\"\n        /usr/local/bin/polygon-edge secrets generate --type aws-ssm --name \"$NODE_NAME\" --extra region=\"$ASSM_REGION\",ssm-parameter-path=\"$ASSM_PARAM_PATH\" --dir \"$DATA_FOLDER/secretsConfig.json\"\n        POLYGON=$(/usr/local/bin/polygon-edge secrets init --config \"$DATA_FOLDER\"/secretsConfig.json --json 2\u003e\u00261)\n        # Check if everything went ok\n        if [ $? -eq 0 ]; then\n            echo \"Starting lambda function\" \u003e\u003e \"$LOG_FILE\"\n            aws lambda invoke --function-name \"polygon-edge-init\" --region \"$ASSM_REGION\" --payload \"$jsonLambda\" \"$LOGS_FOLDER/lambda.json\"\n        else\n                echo \"The initialization of polygon edge failed. Check log @ $LOG_FILE\" \u003e\u003e \"$LOG_FILE\"\n                echo \"$POLYGON\" \u003e\u003e \"$LOG_FILE\"\n        fi\nfi\n\nchown -R \"$LINUX_USER\". \"$POLYGON_FOLDER\"\n\necho \"ALL DONE!\" \u003e\u003e \"$LOG_FILE\"\necho \"-------- Finished on: $(date)  ----------\" \u003e\u003e \"$LOG_FILE\"\nexit 0",
            "template": "#!/bin/bash\nPOLYGON_FOLDER=\"${polygon_edge_dir}\"\nLOGS_FOLDER=\"${polygon_edge_dir}/logs\"\nDATA_FOLDER=\"${polygon_edge_dir}/data\"\nEBS_DEVICE=\"${ebs_device}\"\nLOG_FILE=\"$LOGS_FOLDER/init.log\"\nNODE_INIT_FILE=\"$LOGS_FOLDER/node_init.json\"\nLINUX_USER=\"ubuntu\"\nNODE_NAME=\"${node_name}\"\nASSM_PARAM_PATH=\"/${assm_path}\"\nASSM_REGION=\"${assm_region}\"\nIP=\"$(hostname -I)\"\n\n# create a startup log\n\nTOTAL_NODES=\"${total_nodes}\"\n\n# create central dir that will hold chain data and logs\nif [ ! -d \"$POLYGON_FOLDER\" ];\nthen\nmkdir \"$POLYGON_FOLDER\"\nfi\n# crate logs dir\nif [ ! -d \"$LOGS_FOLDER\" ];\nthen\nmkdir \"$LOGS_FOLDER\"\nfi\n\necho \"----------- Script starting on :$(date) ----------------\" \u003e\u003e \"$LOG_FILE\"\n## Check if data directory already exists\nif [ -d \"$DATA_FOLDER\" ];\nthen\n        echo \"$DATA_FOLDER direcotory is already created. Skipping directory creation...\" \u003e\u003e \"$LOG_FILE\"\nelse\n        ERR=$(mkdir \"$DATA_FOLDER\" 2\u003e\u00261 \u003e /dev/null)\n        [ $? -eq 0 ] \u0026\u0026 echo \"Data directory created!\" \u003e\u003e \"$LOG_FILE\" || echo \"Directory creation failed! Error: $ERR\" \u003e\u003e \"$LOG_FILE\"\nfi\n\n# Wait for the system to fully boot before attemting to mount the EBS\ncounter=0\nwhile [ ! -b \"$EBS_DEVICE\" ]; \ndo\n    sleep 10\n    counter=$((counter + 1))\n    if [ $counter -ge 30 ]; \n    then\n        echo \"Could not initialize $EBS_DEVICE for more than 5 minutes. Exiting ...\"\u003e\u003e \"$LOG_FILE\"\n        exit 1\n    fi\ndone\n\n# Check if EBS storage exists\nif [ -b \"$EBS_DEVICE\" ];\nthen\n        # Check if we already have a filesystem on $EBS_DEVICE. If not create one.\n        if [[ $(file -s \"$EBS_DEVICE\") == \"$EBS_DEVICE: data\" ]];\n        then\n                ERR=$(mkfs -t xfs \"$EBS_DEVICE\" 2\u003e\u00261 \u003e /dev/null)\n                [ $? -eq 0 ] \u0026\u0026 echo \"EBS volume successfuly formated\" \u003e\u003e \"$LOG_FILE\" || echo \"Error formating EBS volume. ERR: $ERR\" \u003e\u003e \"$LOG_FILE\"\n        else\n                echo \"$EBS_DEVICE already has a file system! Skipping... \"\u003e\u003e \"$LOG_FILE\"\n        fi\n        # If block ebs device exists and it has a filesystem, check if it is mounted and mount if it is not already mounted\n        if grep -qs \"$EBS_DEVICE\" /proc/mounts;\n        then\n                echo \"EBS Volume already mounted. Skipping...\" \u003e\u003e \"$LOG_FILE\"\n        else\n                # Mount EBS volume\n                mount \"$EBS_DEVICE\" \"$DATA_FOLDER\"\n                [ $? -eq 0 ] \u0026\u0026 echo \"EBS Volume successfuly mounted!\" \u003e\u003e \"$LOG_FILE\"\n                ## Edit fstab\n                echo \"$EBS_DEVICE   $DATA_FOLDER    xfs     defaults,nofail     0 2\" \u003e\u003e /etc/fstab\n                [ $? -eq 0 ] \u0026\u0026 echo \"Fstab successfuly edited. EBS Volume added.\" \u003e\u003e \"$LOG_FILE\" || echo \"Fstab EBS volume edit failed!\" \u003e\u003e \"$LOG_FILE\"\n                ## Set right permissions for ubuntu user\n                chown -R \"$LINUX_USER\". \"$DATA_FOLDER\"\n                [ $? -eq 0 ] \u0026\u0026 echo \"User permissions on $DATA_FOLDER set...\" \u003e\u003e $LOG_FILE || echo \"Could not set $DATA_FOLDER permissions!\"\n        fi\nelse\n        echo \"No EBS Volume detected! Check if it is attached and/or if it is mounted on $EBS_DEVICE\" \u003e\u003e \"$LOG_FILE\"\nfi\n\necho \"--------------------------------------------------------------\" \u003e\u003e \"$LOG_FILE\"\necho \"Getting polygon-edge binary ...\" \u003e\u003e \"$LOG_FILE\"\n\n# wait for system to fully boot\nsleep 60\n\n\n# get polygon-edge binary from github releases\nsudo apt update \u0026\u0026 sudo apt install -y jq\nmkdir /tmp/polygon-edge\nwget -q -O /tmp/polygon-edge/polygon-edge.tar.gz \"$(curl -s https://api.github.com/repos/0xPolygon/polygon-edge/releases/latest | jq .assets[3].browser_download_url  | tr -d '\"')\"\ntar -xvf /tmp/polygon-edge/polygon-edge.tar.gz -C /tmp/polygon-edge\nsudo mv /tmp/polygon-edge/polygon-edge /usr/local/bin/\nrm -R /tmp/polygon-edge\n\n# install awscli so that we can call Lambda function\nsudo apt update \u0026\u0026 sudo apt install -y awscli\n\n# create json lambda query\njsonLambda=$(cat \u003c\u003cEOF\n{\n  \"config\": {\n\t  \"aws_region\": \"$ASSM_REGION\",\n\t  \"s3_bucket_name\": \"${s3_bucket_name}\",\n\t  \"s3_key_name\": \"${s3_key_name}\",\n\n    \"premine\": \"${premine}\",\n    \"chain_name\": \"${chain_name}\",\n\t  \"chain_id\": \"${chain_id}\",\n\t  \"pos\": ${pos},\n\t  \"epoch_size\": \"${epoch_size}\",\n\t  \"block_gas_limit\": \"${block_gas_limit}\",\n\t  \"max_validator_count\": \"${max_validator_count}\",\n\t  \"min_validator_count\": \"${min_validator_count}\",\n\t  \"consensus\": \"${consensus}\"\n  },\n  \"nodes\": {\n\t  \"total\": $TOTAL_NODES,\n\t  \"node_info\": {\n      \"ssm_param_id\": \"${assm_path}\",\n        \"node_name\": \"$NODE_NAME\",\n        \"ip\": \"$IP\"\n\t  }\n  }\n}\nEOF\n)\n\necho \"--------------------------------------------------------------\" \u003e\u003e \"$LOG_FILE\"\necho \"System init complete. Starting node initialization ...\" \u003e\u003e \"$LOG_FILE\"\n\n# Check if data folder is empty\nif [ \"$(ls -A \"$DATA_FOLDER\")\" ]; then\n        echo \"Files in data dir found. Skipping Polygon edge initialization...\" \u003e\u003e \"$LOG_FILE\"\nelse\n        echo \"Starting node initialization\" \u003e\u003e \"$LOG_FILE\"\n        /usr/local/bin/polygon-edge secrets generate --type aws-ssm --name \"$NODE_NAME\" --extra region=\"$ASSM_REGION\",ssm-parameter-path=\"$ASSM_PARAM_PATH\" --dir \"$DATA_FOLDER/secretsConfig.json\"\n        POLYGON=$(/usr/local/bin/polygon-edge secrets init --config \"$DATA_FOLDER\"/secretsConfig.json --json 2\u003e\u00261)\n        # Check if everything went ok\n        if [ $? -eq 0 ]; then\n            echo \"Starting lambda function\" \u003e\u003e \"$LOG_FILE\"\n            aws lambda invoke --function-name \"${lambda_function_name}\" --region \"$ASSM_REGION\" --payload \"$jsonLambda\" \"$LOGS_FOLDER/lambda.json\"\n        else\n                echo \"The initialization of polygon edge failed. Check log @ $LOG_FILE\" \u003e\u003e \"$LOG_FILE\"\n                echo \"$POLYGON\" \u003e\u003e \"$LOG_FILE\"\n        fi\nfi\n\nchown -R \"$LINUX_USER\". \"$POLYGON_FOLDER\"\n\necho \"ALL DONE!\" \u003e\u003e \"$LOG_FILE\"\necho \"-------- Finished on: $(date)  ----------\" \u003e\u003e \"$LOG_FILE\"\nexit 0",
            "vars": {
              "assm_path": "polygon-edge-validators",
              "assm_region": "us-west-2",
              "block_gas_limit": "",
              "chain_id": "",
              "chain_name": "",
              "consensus": "",
              "ebs_device": "/dev/nvme1n1",
              "epoch_size": "",
              "lambda_function_name": "polygon-edge-init",
              "max_validator_count": "",
              "min_validator_count": "",
              "node_name": "node-us-west-2b",
              "polygon_edge_dir": "/home/ubuntu/polygon",
              "pos": "false",
              "premine": "100",
              "s3_bucket_name": "polygon-edge-shared-20221123172544133800000005",
              "s3_key_name": "chain-config",
              "total_nodes": "4"
            }
          },
          "sensitive_attributes": []
        }
      ]
    },
    {
      "module": "module.test-main.module.user_data[\"1\"]",
      "mode": "data",
      "type": "template_file",
      "name": "polygon_edge_server",
      "provider": "provider[\"registry.terraform.io/hashicorp/template\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "filename": null,
            "id": "1fcdf916dcc7008b4f87dc13fd3b4e498aad1369cbcda5a083d814948e9d83a8",
            "rendered": "#!/bin/bash\r\nDATA_DIR=\"/home/ubuntu/polygon/data\"\r\nSECRETS_FILE=\"$DATA_DIR/secretsConfig.json\"\r\nGENESIS_FILE=\"$DATA_DIR/genesis.json\"\r\nS3_GENESIS=\"polygon-edge-shared-20221123172544133800000005/genesis.json\"\r\nLOG_FILE=\"/home/ubuntu/polygon/logs/edge-server.log\"\r\n\r\n# install awscli so that we can fetch genesis.json\r\nsudo apt update \u0026\u0026 sudo apt install -y awscli\r\n\r\n# wait untill genesis.json is found in the S3 bucket\r\nwhile ! aws s3 ls polygon-edge-shared-20221123172544133800000005 | grep genesis.json \u003e /dev/null;\r\ndo\r\n  echo \"Waiting for genesis.json to appear in S3 bucket...\"\r\n  sleep 10\r\ndone\r\n\r\n# we found genesis.json, now we download it to data folder\r\naws s3 cp s3://$S3_GENESIS $DATA_DIR\r\n\r\n\r\n# Create polygon-edge service and start it after genesis.json file is detected\r\ncat \u003e /etc/systemd/system/polygon_genesis.target \u003c\u003c EOF\r\n# check if genesys.json exists\r\n[Unit]\r\nTimeoutStartSec=infinity\r\nConditionPathExists=$GENESIS_FILE\r\nExecStart=/usr/bin/sleep 5\r\nRemainAfterExit=yes\r\nEOF\r\n\r\n## TODO make server options customisable\r\ncat \u003e /etc/systemd/system/polygon-edge.service \u003c\u003c EOF\r\n[Unit]\r\nDescription=Polygon Edge Server\r\nAfter=network.target polygon_genesis.target\r\nWants=polygon_genesis.target\r\nStartLimitIntervalSec=0\r\n\r\n[Service]\r\nType=simple\r\nRestart=always\r\nRestartSec=10\r\nUser=ubuntu\r\nStandardOutput=syslog\r\nStandardError=file:$LOG_FILE\r\nExecStartPre=/bin/bash -c \"sudo rm $LOG_FILE\"\r\nExecStart=/usr/local/bin/polygon-edge server --data-dir $DATA_DIR --chain $GENESIS_FILE --libp2p 0.0.0.0:1478 --grpc-address 0.0.0.0:9632 --secrets-config $SECRETS_FILE --seal SERVER_OPTIONS\r\n\r\n[Install]\r\nWantedBy=multi-user.target\r\nEOF\r\n\r\n#### customise server options\r\n\r\n# enable Prometheus API\r\nif [ \"\" != \"\" ]; then\r\n  prometheus=\"--prometheus \"\r\nfi\r\n\r\n# set block gas limit\r\nif [ \"\" != \"\" ]; then\r\n  block_gas_target=\"--block-gas-target \"\r\nfi\r\n\r\n# set nated address\r\nif [ \"\" != \"\" ]; then\r\n nat=\"--nat \"\r\nfi\r\n\r\n# set dns name\r\nif [ \"\" != \"\" ]; then\r\n dns_name=\"--dns \"\r\nfi\r\n\r\n# set price limit\r\nif [ \"\" != \"\" ]; then\r\n price_limit=\"--price-limit \"\r\nfi\r\n\r\n# set max slots\r\nif [ \"\" != \"\" ]; then\r\n max_slots=\"--max-slots \"\r\nfi\r\n\r\n# set block time in seconds\r\nif [ \"\" != \"\" ]; then\r\n  block_time=\"--block-time \"\r\nfi\r\n\r\n# set these parameters in service file\r\nsed -i \"s/SERVER_OPTIONS/$prometheus $block_gas_target $nat $dns $price_limit $max_slots $block_time/g\" /etc/systemd/system/polygon-edge.service\r\n\r\n# change ownership of the polygon folder to ubuntu user\r\nsudo chown -R ubuntu. /home/ubuntu/polygon\r\n\r\n# Enable polygon-edge on startup\r\nsudo /usr/bin/systemctl enable polygon-edge.service\r\n\r\n# Start polygon-edge service\r\nsudo /usr/bin/systemctl start polygon-edge.service",
            "template": "#!/bin/bash\r\nDATA_DIR=\"${polygon_edge_dir}/data\"\r\nSECRETS_FILE=\"$DATA_DIR/secretsConfig.json\"\r\nGENESIS_FILE=\"$DATA_DIR/genesis.json\"\r\nS3_GENESIS=\"${s3_bucket_name}/genesis.json\"\r\nLOG_FILE=\"${polygon_edge_dir}/logs/edge-server.log\"\r\n\r\n# install awscli so that we can fetch genesis.json\r\nsudo apt update \u0026\u0026 sudo apt install -y awscli\r\n\r\n# wait untill genesis.json is found in the S3 bucket\r\nwhile ! aws s3 ls ${s3_bucket_name} | grep genesis.json \u003e /dev/null;\r\ndo\r\n  echo \"Waiting for genesis.json to appear in S3 bucket...\"\r\n  sleep 10\r\ndone\r\n\r\n# we found genesis.json, now we download it to data folder\r\naws s3 cp s3://$S3_GENESIS $DATA_DIR\r\n\r\n\r\n# Create polygon-edge service and start it after genesis.json file is detected\r\ncat \u003e /etc/systemd/system/polygon_genesis.target \u003c\u003c EOF\r\n# check if genesys.json exists\r\n[Unit]\r\nTimeoutStartSec=infinity\r\nConditionPathExists=$GENESIS_FILE\r\nExecStart=/usr/bin/sleep 5\r\nRemainAfterExit=yes\r\nEOF\r\n\r\n## TODO make server options customisable\r\ncat \u003e /etc/systemd/system/polygon-edge.service \u003c\u003c EOF\r\n[Unit]\r\nDescription=Polygon Edge Server\r\nAfter=network.target polygon_genesis.target\r\nWants=polygon_genesis.target\r\nStartLimitIntervalSec=0\r\n\r\n[Service]\r\nType=simple\r\nRestart=always\r\nRestartSec=10\r\nUser=ubuntu\r\nStandardOutput=syslog\r\nStandardError=file:$LOG_FILE\r\nExecStartPre=/bin/bash -c \"sudo rm $LOG_FILE\"\r\nExecStart=/usr/local/bin/polygon-edge server --data-dir $DATA_DIR --chain $GENESIS_FILE --libp2p 0.0.0.0:1478 --grpc-address 0.0.0.0:9632 --secrets-config $SECRETS_FILE --seal SERVER_OPTIONS\r\n\r\n[Install]\r\nWantedBy=multi-user.target\r\nEOF\r\n\r\n#### customise server options\r\n\r\n# enable Prometheus API\r\nif [ \"${prometheus_address}\" != \"\" ]; then\r\n  prometheus=\"--prometheus ${prometheus_address}\"\r\nfi\r\n\r\n# set block gas limit\r\nif [ \"${block_gas_target}\" != \"\" ]; then\r\n  block_gas_target=\"--block-gas-target ${block_gas_target}\"\r\nfi\r\n\r\n# set nated address\r\nif [ \"${nat_address}\" != \"\" ]; then\r\n nat=\"--nat ${nat_address}\"\r\nfi\r\n\r\n# set dns name\r\nif [ \"${dns_name}\" != \"\" ]; then\r\n dns_name=\"--dns ${dns_name}\"\r\nfi\r\n\r\n# set price limit\r\nif [ \"${price_limit}\" != \"\" ]; then\r\n price_limit=\"--price-limit ${price_limit}\"\r\nfi\r\n\r\n# set max slots\r\nif [ \"${max_slots}\" != \"\" ]; then\r\n max_slots=\"--max-slots ${max_slots}\"\r\nfi\r\n\r\n# set block time in seconds\r\nif [ \"${block_time}\" != \"\" ]; then\r\n  block_time=\"--block-time ${block_time}\"\r\nfi\r\n\r\n# set these parameters in service file\r\nsed -i \"s/SERVER_OPTIONS/$prometheus $block_gas_target $nat $dns $price_limit $max_slots $block_time/g\" /etc/systemd/system/polygon-edge.service\r\n\r\n# change ownership of the polygon folder to ubuntu user\r\nsudo chown -R ubuntu. ${polygon_edge_dir}\r\n\r\n# Enable polygon-edge on startup\r\nsudo /usr/bin/systemctl enable polygon-edge.service\r\n\r\n# Start polygon-edge service\r\nsudo /usr/bin/systemctl start polygon-edge.service",
            "vars": {
              "block_gas_target": "",
              "block_time": "",
              "dns_name": "",
              "max_slots": "",
              "nat_address": "",
              "polygon_edge_dir": "/home/ubuntu/polygon",
              "price_limit": "",
              "prometheus_address": "",
              "s3_bucket_name": "polygon-edge-shared-20221123172544133800000005"
            }
          },
          "sensitive_attributes": []
        }
      ]
    },
    {
      "module": "module.test-main.module.user_data[\"2\"]",
      "mode": "data",
      "type": "template_cloudinit_config",
      "name": "polygon_edge",
      "provider": "provider[\"registry.terraform.io/hashicorp/template\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "base64_encode": true,
            "gzip": true,
            "id": "3623825735",
            "part": [
              {
                "content": "#!/bin/bash\nPOLYGON_FOLDER=\"/home/ubuntu/polygon\"\nLOGS_FOLDER=\"/home/ubuntu/polygon/logs\"\nDATA_FOLDER=\"/home/ubuntu/polygon/data\"\nEBS_DEVICE=\"/dev/nvme1n1\"\nLOG_FILE=\"$LOGS_FOLDER/init.log\"\nNODE_INIT_FILE=\"$LOGS_FOLDER/node_init.json\"\nLINUX_USER=\"ubuntu\"\nNODE_NAME=\"node-us-west-2c\"\nASSM_PARAM_PATH=\"/polygon-edge-validators\"\nASSM_REGION=\"us-west-2\"\nIP=\"$(hostname -I)\"\n\n# create a startup log\n\nTOTAL_NODES=\"4\"\n\n# create central dir that will hold chain data and logs\nif [ ! -d \"$POLYGON_FOLDER\" ];\nthen\nmkdir \"$POLYGON_FOLDER\"\nfi\n# crate logs dir\nif [ ! -d \"$LOGS_FOLDER\" ];\nthen\nmkdir \"$LOGS_FOLDER\"\nfi\n\necho \"----------- Script starting on :$(date) ----------------\" \u003e\u003e \"$LOG_FILE\"\n## Check if data directory already exists\nif [ -d \"$DATA_FOLDER\" ];\nthen\n        echo \"$DATA_FOLDER direcotory is already created. Skipping directory creation...\" \u003e\u003e \"$LOG_FILE\"\nelse\n        ERR=$(mkdir \"$DATA_FOLDER\" 2\u003e\u00261 \u003e /dev/null)\n        [ $? -eq 0 ] \u0026\u0026 echo \"Data directory created!\" \u003e\u003e \"$LOG_FILE\" || echo \"Directory creation failed! Error: $ERR\" \u003e\u003e \"$LOG_FILE\"\nfi\n\n# Wait for the system to fully boot before attemting to mount the EBS\ncounter=0\nwhile [ ! -b \"$EBS_DEVICE\" ]; \ndo\n    sleep 10\n    counter=$((counter + 1))\n    if [ $counter -ge 30 ]; \n    then\n        echo \"Could not initialize $EBS_DEVICE for more than 5 minutes. Exiting ...\"\u003e\u003e \"$LOG_FILE\"\n        exit 1\n    fi\ndone\n\n# Check if EBS storage exists\nif [ -b \"$EBS_DEVICE\" ];\nthen\n        # Check if we already have a filesystem on $EBS_DEVICE. If not create one.\n        if [[ $(file -s \"$EBS_DEVICE\") == \"$EBS_DEVICE: data\" ]];\n        then\n                ERR=$(mkfs -t xfs \"$EBS_DEVICE\" 2\u003e\u00261 \u003e /dev/null)\n                [ $? -eq 0 ] \u0026\u0026 echo \"EBS volume successfuly formated\" \u003e\u003e \"$LOG_FILE\" || echo \"Error formating EBS volume. ERR: $ERR\" \u003e\u003e \"$LOG_FILE\"\n        else\n                echo \"$EBS_DEVICE already has a file system! Skipping... \"\u003e\u003e \"$LOG_FILE\"\n        fi\n        # If block ebs device exists and it has a filesystem, check if it is mounted and mount if it is not already mounted\n        if grep -qs \"$EBS_DEVICE\" /proc/mounts;\n        then\n                echo \"EBS Volume already mounted. Skipping...\" \u003e\u003e \"$LOG_FILE\"\n        else\n                # Mount EBS volume\n                mount \"$EBS_DEVICE\" \"$DATA_FOLDER\"\n                [ $? -eq 0 ] \u0026\u0026 echo \"EBS Volume successfuly mounted!\" \u003e\u003e \"$LOG_FILE\"\n                ## Edit fstab\n                echo \"$EBS_DEVICE   $DATA_FOLDER    xfs     defaults,nofail     0 2\" \u003e\u003e /etc/fstab\n                [ $? -eq 0 ] \u0026\u0026 echo \"Fstab successfuly edited. EBS Volume added.\" \u003e\u003e \"$LOG_FILE\" || echo \"Fstab EBS volume edit failed!\" \u003e\u003e \"$LOG_FILE\"\n                ## Set right permissions for ubuntu user\n                chown -R \"$LINUX_USER\". \"$DATA_FOLDER\"\n                [ $? -eq 0 ] \u0026\u0026 echo \"User permissions on $DATA_FOLDER set...\" \u003e\u003e $LOG_FILE || echo \"Could not set $DATA_FOLDER permissions!\"\n        fi\nelse\n        echo \"No EBS Volume detected! Check if it is attached and/or if it is mounted on $EBS_DEVICE\" \u003e\u003e \"$LOG_FILE\"\nfi\n\necho \"--------------------------------------------------------------\" \u003e\u003e \"$LOG_FILE\"\necho \"Getting polygon-edge binary ...\" \u003e\u003e \"$LOG_FILE\"\n\n# wait for system to fully boot\nsleep 60\n\n\n# get polygon-edge binary from github releases\nsudo apt update \u0026\u0026 sudo apt install -y jq\nmkdir /tmp/polygon-edge\nwget -q -O /tmp/polygon-edge/polygon-edge.tar.gz \"$(curl -s https://api.github.com/repos/0xPolygon/polygon-edge/releases/latest | jq .assets[3].browser_download_url  | tr -d '\"')\"\ntar -xvf /tmp/polygon-edge/polygon-edge.tar.gz -C /tmp/polygon-edge\nsudo mv /tmp/polygon-edge/polygon-edge /usr/local/bin/\nrm -R /tmp/polygon-edge\n\n# install awscli so that we can call Lambda function\nsudo apt update \u0026\u0026 sudo apt install -y awscli\n\n# create json lambda query\njsonLambda=$(cat \u003c\u003cEOF\n{\n  \"config\": {\n\t  \"aws_region\": \"$ASSM_REGION\",\n\t  \"s3_bucket_name\": \"polygon-edge-shared-20221123172544133800000005\",\n\t  \"s3_key_name\": \"chain-config\",\n\n    \"premine\": \"100\",\n    \"chain_name\": \"\",\n\t  \"chain_id\": \"\",\n\t  \"pos\": false,\n\t  \"epoch_size\": \"\",\n\t  \"block_gas_limit\": \"\",\n\t  \"max_validator_count\": \"\",\n\t  \"min_validator_count\": \"\",\n\t  \"consensus\": \"\"\n  },\n  \"nodes\": {\n\t  \"total\": $TOTAL_NODES,\n\t  \"node_info\": {\n      \"ssm_param_id\": \"polygon-edge-validators\",\n        \"node_name\": \"$NODE_NAME\",\n        \"ip\": \"$IP\"\n\t  }\n  }\n}\nEOF\n)\n\necho \"--------------------------------------------------------------\" \u003e\u003e \"$LOG_FILE\"\necho \"System init complete. Starting node initialization ...\" \u003e\u003e \"$LOG_FILE\"\n\n# Check if data folder is empty\nif [ \"$(ls -A \"$DATA_FOLDER\")\" ]; then\n        echo \"Files in data dir found. Skipping Polygon edge initialization...\" \u003e\u003e \"$LOG_FILE\"\nelse\n        echo \"Starting node initialization\" \u003e\u003e \"$LOG_FILE\"\n        /usr/local/bin/polygon-edge secrets generate --type aws-ssm --name \"$NODE_NAME\" --extra region=\"$ASSM_REGION\",ssm-parameter-path=\"$ASSM_PARAM_PATH\" --dir \"$DATA_FOLDER/secretsConfig.json\"\n        POLYGON=$(/usr/local/bin/polygon-edge secrets init --config \"$DATA_FOLDER\"/secretsConfig.json --json 2\u003e\u00261)\n        # Check if everything went ok\n        if [ $? -eq 0 ]; then\n            echo \"Starting lambda function\" \u003e\u003e \"$LOG_FILE\"\n            aws lambda invoke --function-name \"polygon-edge-init\" --region \"$ASSM_REGION\" --payload \"$jsonLambda\" \"$LOGS_FOLDER/lambda.json\"\n        else\n                echo \"The initialization of polygon edge failed. Check log @ $LOG_FILE\" \u003e\u003e \"$LOG_FILE\"\n                echo \"$POLYGON\" \u003e\u003e \"$LOG_FILE\"\n        fi\nfi\n\nchown -R \"$LINUX_USER\". \"$POLYGON_FOLDER\"\n\necho \"ALL DONE!\" \u003e\u003e \"$LOG_FILE\"\necho \"-------- Finished on: $(date)  ----------\" \u003e\u003e \"$LOG_FILE\"\nexit 0",
                "content_type": "text/x-shellscript",
                "filename": "",
                "merge_type": ""
              },
              {
                "content": "#!/bin/bash\r\nDATA_DIR=\"/home/ubuntu/polygon/data\"\r\nSECRETS_FILE=\"$DATA_DIR/secretsConfig.json\"\r\nGENESIS_FILE=\"$DATA_DIR/genesis.json\"\r\nS3_GENESIS=\"polygon-edge-shared-20221123172544133800000005/genesis.json\"\r\nLOG_FILE=\"/home/ubuntu/polygon/logs/edge-server.log\"\r\n\r\n# install awscli so that we can fetch genesis.json\r\nsudo apt update \u0026\u0026 sudo apt install -y awscli\r\n\r\n# wait untill genesis.json is found in the S3 bucket\r\nwhile ! aws s3 ls polygon-edge-shared-20221123172544133800000005 | grep genesis.json \u003e /dev/null;\r\ndo\r\n  echo \"Waiting for genesis.json to appear in S3 bucket...\"\r\n  sleep 10\r\ndone\r\n\r\n# we found genesis.json, now we download it to data folder\r\naws s3 cp s3://$S3_GENESIS $DATA_DIR\r\n\r\n\r\n# Create polygon-edge service and start it after genesis.json file is detected\r\ncat \u003e /etc/systemd/system/polygon_genesis.target \u003c\u003c EOF\r\n# check if genesys.json exists\r\n[Unit]\r\nTimeoutStartSec=infinity\r\nConditionPathExists=$GENESIS_FILE\r\nExecStart=/usr/bin/sleep 5\r\nRemainAfterExit=yes\r\nEOF\r\n\r\n## TODO make server options customisable\r\ncat \u003e /etc/systemd/system/polygon-edge.service \u003c\u003c EOF\r\n[Unit]\r\nDescription=Polygon Edge Server\r\nAfter=network.target polygon_genesis.target\r\nWants=polygon_genesis.target\r\nStartLimitIntervalSec=0\r\n\r\n[Service]\r\nType=simple\r\nRestart=always\r\nRestartSec=10\r\nUser=ubuntu\r\nStandardOutput=syslog\r\nStandardError=file:$LOG_FILE\r\nExecStartPre=/bin/bash -c \"sudo rm $LOG_FILE\"\r\nExecStart=/usr/local/bin/polygon-edge server --data-dir $DATA_DIR --chain $GENESIS_FILE --libp2p 0.0.0.0:1478 --grpc-address 0.0.0.0:9632 --secrets-config $SECRETS_FILE --seal SERVER_OPTIONS\r\n\r\n[Install]\r\nWantedBy=multi-user.target\r\nEOF\r\n\r\n#### customise server options\r\n\r\n# enable Prometheus API\r\nif [ \"\" != \"\" ]; then\r\n  prometheus=\"--prometheus \"\r\nfi\r\n\r\n# set block gas limit\r\nif [ \"\" != \"\" ]; then\r\n  block_gas_target=\"--block-gas-target \"\r\nfi\r\n\r\n# set nated address\r\nif [ \"\" != \"\" ]; then\r\n nat=\"--nat \"\r\nfi\r\n\r\n# set dns name\r\nif [ \"\" != \"\" ]; then\r\n dns_name=\"--dns \"\r\nfi\r\n\r\n# set price limit\r\nif [ \"\" != \"\" ]; then\r\n price_limit=\"--price-limit \"\r\nfi\r\n\r\n# set max slots\r\nif [ \"\" != \"\" ]; then\r\n max_slots=\"--max-slots \"\r\nfi\r\n\r\n# set block time in seconds\r\nif [ \"\" != \"\" ]; then\r\n  block_time=\"--block-time \"\r\nfi\r\n\r\n# set these parameters in service file\r\nsed -i \"s/SERVER_OPTIONS/$prometheus $block_gas_target $nat $dns $price_limit $max_slots $block_time/g\" /etc/systemd/system/polygon-edge.service\r\n\r\n# change ownership of the polygon folder to ubuntu user\r\nsudo chown -R ubuntu. /home/ubuntu/polygon\r\n\r\n# Enable polygon-edge on startup\r\nsudo /usr/bin/systemctl enable polygon-edge.service\r\n\r\n# Start polygon-edge service\r\nsudo /usr/bin/systemctl start polygon-edge.service",
                "content_type": "text/x-shellscript",
                "filename": "",
                "merge_type": ""
              }
            ],
            "rendered": "H4sIAAAAAAAA/8RZbW/buJN/fQL8HSaKsf8EV1p5aHf30qp3aeL2DKRxEKfdWxSFQUsjixuJVEkqtne73/1AUpIl20nbBQ6nAkklDn+cZ85MLgTXyDW5WxV4BnmZaVZQqYOcLTF+CTNR8pjKVei/H70fvhl/uL48v/3d98wb+YhSMcHP4Hhw1PN6HiFtop7XYEvKVYKSDHkkYsbnZ/DLjOkWgT1c41IHS6JSzDIVSVbonvee5bh1zv5eMGM8mFGVejfjq9/fja+nb8dXl8Pb0A9SkWNQzkquy6AQ2WouuO9djd9NniQJMjFXvnd5fnf+NF1MNfW94ZvJ9HL4cXQxDP0gxoeAP+R4zI/tSdO3o6th6PdbhwaMMz3IxNz3rseXw+noenS3i4yLGKeW9g9l+R5df/if6YeJYccxUgFcn78fhr4hJ6UiC1SanES+dz6ZvJ/enN+em593/x36Nd8E4zmSB5qxmGohVUV6O3w3Gl+HfoPhe6Ob0O8fpEJpTnMEMjr0PW8fIolUI1BQmkpdFpCJuefdje/Or6aGo0noP28TRsi1pBnETIJOqYYFyzJIRRZDlFLGwSgSKI8NkPJYAp9gD0gMfr9rUh8+v/R0itzL7w3Y1rqXMHusOdVgmSM7eC0Fb4O1Fw2Sh1EqwCfrBybWF53gjM9BcDjrH8RU4yGQjceH168dqjWv7+3vw0WK0T2wxIkcM4mRFnIFNJNI4xXgkildqcAy3PLCNcNQPY6/No2DFBaTqQbWGSIewOSeFYVhfH20XWOCDwaDLY4xU9icNry9DfsHtbI6jJ28/ukYXoNz/zLLDptNn6D/n0DwCxzBZ/jpp4rly670FXt7m+fD16/1hi12IaEsw3gPhlIKeQb94e3tFv/GiPvwG2UaEmGcD0GtlMYctICkzLIVzITQMMNESASqNebWrlpALkqu7Zbhm4kXmTeU4ZG3SFmGzqNm4PfX4W/sA14srOwqQyzg+Mi+1Jv7BwfVf+Hf4fjQacnaul9/J3OE0yOLZBZ3mPtClFkMXGgwyYHRjP2J0GLDSpobcXRKObyAnPFSoxrAcMmscMbSG4pqjlgyDcf2NWFeLDgaBTZeO3wzAaWFpHPsuuq2Jrqe2sJYYOOWKX0waSRhGVZmEbwtygBGiZW0SiSC46CBNAd/gv6B2Q1EdRk4hDDsfDmzEefD588vG4QOh5teniggGpbJBvATrv60yxvVPYiszBFUGUWoVFJmK2Os3Pj+465v/buiM9ZbAw0Ms494fmPQdgRv5I2Wz6wtoiqDVIGy16SMwWAAj7lNwlqWHiUwy0R0DzhTEOMDi2pnsTme6dYp7pBnENXewbTJWzb2MLb0Lg6bJeMONbcVWdsl5hILIF82rRYUUkSBpVffcIC1uT46c22cNmhr5Mf0vg/vrTBrE26ROGm7zHeT7Q/428dtf6uE2Eq127zuwzA2eVNpOvsODwLo3EMANnbME2NCy0yrZ1yYnG2/HcGJ5SBAHQW7j9gt1ltD25EIY2at0rZYHGO8ZZt1SDmQVkSildRdKN+jmQlqkGyeaihQ5kyZklTZxOsqMygVyq2NUSoWHMitQW+KOX/wz+z7QaHsnG5SZ9sCCnXtoI0waxWsbxGFuruxBbrXCfGOTzuYa9HWe4waI+Nd62zvgpZqTaPUBXQg5Hagd/P+znt8qxj7B892gWNB36G2qbVdIMOMcSpXsCvIvX1Y1DXFrnrCc7f/z0eeIZ2j3omcSJHDnOm0nIHEDKlC5akyFkALDWVhqkpj7+YT40rTLAOygj++VFVroPOiU9h7C3Me+QJkvL3YeRloKgfzP8HvH0SlzMwdmmpdqLMgoAUbOM4GkcgDiYVQwdHypmp8OpA160FGNSoNX+GPLzCgSqFWn04/D2ZSLBTKaSwWPBM0npqz4CtoaSrcf/n/OvQ9TSWQ5UPynRyTix1yWzXlD9+AgKBUMshERDPbOHoyNxG5DeftN/qmCxVlDJSouheEiHKIzNIVzWcxhaTkkSlKv9d8DrHVIpkWDzIH9qVEufLMF4ce9g8iquHVq+H4rfeXB+BHgids7p/BX96/Afh0oaYS50xw/wz8fqub859ZAnU6nZXRPeqp6eMMUacVVCmVGJOTo5OT4+OT0+NfTl48f358evrrkXterGHucdVg2N6NVLw882xm8AuJOeN2/fjoyH/mvlrSZmMF5z6yuPWpEMo/g4RmCt0HLESUThX7s73RVhfTOVXTjOVMt1Zyupw2je3U1tTtVcafWI0EV8hVqew3D+Bvw7ztq1Wjai00zfwz6Le6Xbe9atcTYWldjvSVyqcFlTSvxHysA3/WpFWHU2uq3zT4bRJW2LXRjW9O/tuw6v3tGe84/D9NkxOX6kzbAZHIiww1DmBS98KG83VP4pq0R7Jntw1ORBajNNcB5oVeuZbC7x9kCsj5xu14aLusHW3RW1NNQj1MMKkxESVvt7xV9gKbBrp8frP3rRTwhKiPlg0bCaeTjBRGErWCOXK0QwtC9KpAkx+IUjkQYgcvbT8AQnCpJQUX8eFGvCuVE+txqFGSguq0pliPggzGVhMfVLxc2HiuZk61DNWYJewffI801kFIlRk27LfjGCDE/jKd1eGujhEfUK50ahS/QK5B3HeawFZ59HK7pN+wXNZN2E8We3ShanrGH8S9MU+9sTJMJ6CN3Ea3zjIbmRgIKejKXIDg99fJ3e/OnQJ33ob6n2ji7tKtmBNJXW44V3d17aDSZybm8F/Qqoq/Ue1WlX7lAY+SJ8wWaY+XuJuTuiqnnF9dweX4erhddncTGbxlnKnUlopnUI/c4KmctWQajv5fJtE9Nzy+HD05Oe55k+HF7fBuUk9/6027QrHnvRteDyejbWKTOxRTNdnkdFpRhj94y28ircfXj07JA4eM8gGlHWlbRXyjcEpQRym0D+v9WN3kDrEVeMk1y7IOmLlHbOo3l4FOESan4KqfXjW727ORrU4hU/BjKoKvbsDQOa81DHrZ82LR8+qo+Y26gZvpEzpbtJGsQCoNjw1/5hYym+vZYc8O4CppsRKqjfMMuFiYpbq2Nl2VFu1btedVskYFqNOzIOivHQQaJzJnmFMuXDW6kdWlHeFQHru5tzmEJho3ZLJDI6aaJrDnmaq1avFdlxRXv2sfmtYAmkrTtbx6BcPxW8NIMw+yFKvqCDdF6nmfPnCmP/e8O5ajKLVN7hOMQsYTkwtXNoZjZrLhDdXp0G4L++0I6nnDJUZ2Z2jvNBO7TvEvet4t5pTxcyPkcMl0uELV8yxrPW9/H+7Gl2PI6b1TDkoQhbY9eFQqLXKm6CzD75DfNTW1gmvpa+ku0eUbc8vXtcvQWGRiD+15lr+Qo14IeV/rcLdqe95vlGsVPrZqFXFlqukR1ygfaGb0afPap4njz+h7VWComKn8jI6sN4Q0W9CVat7NPuO6HxTK0KUMC89jKuNxqYtSh2qlMjFff7YjztA40FmTwFsGupEYNrkVSAS+zQ0yb11jW/Z8tEaxBiPExIitgpogMCWL/XNUx1GAkIzNipMCjgb239nx819+BULmsogIjWOJSjVr//Hz6QkQUiXwugTqtxO9XaYZTIa3H4e30/HN3Wh8PbGaHrlM99lZC+M3q9D+FZaUCmVjq8YP9/cbh9v0RBfOyI0jwo0UOeoUSwXnN6NeVV/7sBean1XRZBJP0RCGPiHrN/B7XlKlXYW6Gu/OqQLbgD2BuG7VHPcG134jc6pI5bIb6Jza0a/T7OPYnFo0TrcAYq7AlGeP7425sj2WATDUGwCFNPH4DdksketAnbZYhMS+bsLldAkqE/oJYUzjakkMVE6XxL7s1rtmuan5TLktePwEaKV9Q7/Wu929gatTVAhN26AcustKJip7nsIYCANfBV23DfotL+lvWhv6xjp9o+F+S13Qb8St9xiugrn/3cnS8R6llM8RxIKjVCkrTOlrbvy6/K0aSy3aY9mq2GgqVbc0gF1Fjjtm6MKok0cEr//6XeGtLxHLdaSzOvwe59+mq5237eOgamvPGrNb6hLS8/43AAD//wGXGSjTIQAA"
          },
          "sensitive_attributes": []
        }
      ]
    },
    {
      "module": "module.test-main.module.user_data[\"2\"]",
      "mode": "data",
      "type": "template_file",
      "name": "polygon_edge_node",
      "provider": "provider[\"registry.terraform.io/hashicorp/template\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "filename": null,
            "id": "1a6905d94c10b5c829a2b3a747050540bb50075bd21e9e7aa3db16688d23b15d",
            "rendered": "#!/bin/bash\nPOLYGON_FOLDER=\"/home/ubuntu/polygon\"\nLOGS_FOLDER=\"/home/ubuntu/polygon/logs\"\nDATA_FOLDER=\"/home/ubuntu/polygon/data\"\nEBS_DEVICE=\"/dev/nvme1n1\"\nLOG_FILE=\"$LOGS_FOLDER/init.log\"\nNODE_INIT_FILE=\"$LOGS_FOLDER/node_init.json\"\nLINUX_USER=\"ubuntu\"\nNODE_NAME=\"node-us-west-2c\"\nASSM_PARAM_PATH=\"/polygon-edge-validators\"\nASSM_REGION=\"us-west-2\"\nIP=\"$(hostname -I)\"\n\n# create a startup log\n\nTOTAL_NODES=\"4\"\n\n# create central dir that will hold chain data and logs\nif [ ! -d \"$POLYGON_FOLDER\" ];\nthen\nmkdir \"$POLYGON_FOLDER\"\nfi\n# crate logs dir\nif [ ! -d \"$LOGS_FOLDER\" ];\nthen\nmkdir \"$LOGS_FOLDER\"\nfi\n\necho \"----------- Script starting on :$(date) ----------------\" \u003e\u003e \"$LOG_FILE\"\n## Check if data directory already exists\nif [ -d \"$DATA_FOLDER\" ];\nthen\n        echo \"$DATA_FOLDER direcotory is already created. Skipping directory creation...\" \u003e\u003e \"$LOG_FILE\"\nelse\n        ERR=$(mkdir \"$DATA_FOLDER\" 2\u003e\u00261 \u003e /dev/null)\n        [ $? -eq 0 ] \u0026\u0026 echo \"Data directory created!\" \u003e\u003e \"$LOG_FILE\" || echo \"Directory creation failed! Error: $ERR\" \u003e\u003e \"$LOG_FILE\"\nfi\n\n# Wait for the system to fully boot before attemting to mount the EBS\ncounter=0\nwhile [ ! -b \"$EBS_DEVICE\" ]; \ndo\n    sleep 10\n    counter=$((counter + 1))\n    if [ $counter -ge 30 ]; \n    then\n        echo \"Could not initialize $EBS_DEVICE for more than 5 minutes. Exiting ...\"\u003e\u003e \"$LOG_FILE\"\n        exit 1\n    fi\ndone\n\n# Check if EBS storage exists\nif [ -b \"$EBS_DEVICE\" ];\nthen\n        # Check if we already have a filesystem on $EBS_DEVICE. If not create one.\n        if [[ $(file -s \"$EBS_DEVICE\") == \"$EBS_DEVICE: data\" ]];\n        then\n                ERR=$(mkfs -t xfs \"$EBS_DEVICE\" 2\u003e\u00261 \u003e /dev/null)\n                [ $? -eq 0 ] \u0026\u0026 echo \"EBS volume successfuly formated\" \u003e\u003e \"$LOG_FILE\" || echo \"Error formating EBS volume. ERR: $ERR\" \u003e\u003e \"$LOG_FILE\"\n        else\n                echo \"$EBS_DEVICE already has a file system! Skipping... \"\u003e\u003e \"$LOG_FILE\"\n        fi\n        # If block ebs device exists and it has a filesystem, check if it is mounted and mount if it is not already mounted\n        if grep -qs \"$EBS_DEVICE\" /proc/mounts;\n        then\n                echo \"EBS Volume already mounted. Skipping...\" \u003e\u003e \"$LOG_FILE\"\n        else\n                # Mount EBS volume\n                mount \"$EBS_DEVICE\" \"$DATA_FOLDER\"\n                [ $? -eq 0 ] \u0026\u0026 echo \"EBS Volume successfuly mounted!\" \u003e\u003e \"$LOG_FILE\"\n                ## Edit fstab\n                echo \"$EBS_DEVICE   $DATA_FOLDER    xfs     defaults,nofail     0 2\" \u003e\u003e /etc/fstab\n                [ $? -eq 0 ] \u0026\u0026 echo \"Fstab successfuly edited. EBS Volume added.\" \u003e\u003e \"$LOG_FILE\" || echo \"Fstab EBS volume edit failed!\" \u003e\u003e \"$LOG_FILE\"\n                ## Set right permissions for ubuntu user\n                chown -R \"$LINUX_USER\". \"$DATA_FOLDER\"\n                [ $? -eq 0 ] \u0026\u0026 echo \"User permissions on $DATA_FOLDER set...\" \u003e\u003e $LOG_FILE || echo \"Could not set $DATA_FOLDER permissions!\"\n        fi\nelse\n        echo \"No EBS Volume detected! Check if it is attached and/or if it is mounted on $EBS_DEVICE\" \u003e\u003e \"$LOG_FILE\"\nfi\n\necho \"--------------------------------------------------------------\" \u003e\u003e \"$LOG_FILE\"\necho \"Getting polygon-edge binary ...\" \u003e\u003e \"$LOG_FILE\"\n\n# wait for system to fully boot\nsleep 60\n\n\n# get polygon-edge binary from github releases\nsudo apt update \u0026\u0026 sudo apt install -y jq\nmkdir /tmp/polygon-edge\nwget -q -O /tmp/polygon-edge/polygon-edge.tar.gz \"$(curl -s https://api.github.com/repos/0xPolygon/polygon-edge/releases/latest | jq .assets[3].browser_download_url  | tr -d '\"')\"\ntar -xvf /tmp/polygon-edge/polygon-edge.tar.gz -C /tmp/polygon-edge\nsudo mv /tmp/polygon-edge/polygon-edge /usr/local/bin/\nrm -R /tmp/polygon-edge\n\n# install awscli so that we can call Lambda function\nsudo apt update \u0026\u0026 sudo apt install -y awscli\n\n# create json lambda query\njsonLambda=$(cat \u003c\u003cEOF\n{\n  \"config\": {\n\t  \"aws_region\": \"$ASSM_REGION\",\n\t  \"s3_bucket_name\": \"polygon-edge-shared-20221123172544133800000005\",\n\t  \"s3_key_name\": \"chain-config\",\n\n    \"premine\": \"100\",\n    \"chain_name\": \"\",\n\t  \"chain_id\": \"\",\n\t  \"pos\": false,\n\t  \"epoch_size\": \"\",\n\t  \"block_gas_limit\": \"\",\n\t  \"max_validator_count\": \"\",\n\t  \"min_validator_count\": \"\",\n\t  \"consensus\": \"\"\n  },\n  \"nodes\": {\n\t  \"total\": $TOTAL_NODES,\n\t  \"node_info\": {\n      \"ssm_param_id\": \"polygon-edge-validators\",\n        \"node_name\": \"$NODE_NAME\",\n        \"ip\": \"$IP\"\n\t  }\n  }\n}\nEOF\n)\n\necho \"--------------------------------------------------------------\" \u003e\u003e \"$LOG_FILE\"\necho \"System init complete. Starting node initialization ...\" \u003e\u003e \"$LOG_FILE\"\n\n# Check if data folder is empty\nif [ \"$(ls -A \"$DATA_FOLDER\")\" ]; then\n        echo \"Files in data dir found. Skipping Polygon edge initialization...\" \u003e\u003e \"$LOG_FILE\"\nelse\n        echo \"Starting node initialization\" \u003e\u003e \"$LOG_FILE\"\n        /usr/local/bin/polygon-edge secrets generate --type aws-ssm --name \"$NODE_NAME\" --extra region=\"$ASSM_REGION\",ssm-parameter-path=\"$ASSM_PARAM_PATH\" --dir \"$DATA_FOLDER/secretsConfig.json\"\n        POLYGON=$(/usr/local/bin/polygon-edge secrets init --config \"$DATA_FOLDER\"/secretsConfig.json --json 2\u003e\u00261)\n        # Check if everything went ok\n        if [ $? -eq 0 ]; then\n            echo \"Starting lambda function\" \u003e\u003e \"$LOG_FILE\"\n            aws lambda invoke --function-name \"polygon-edge-init\" --region \"$ASSM_REGION\" --payload \"$jsonLambda\" \"$LOGS_FOLDER/lambda.json\"\n        else\n                echo \"The initialization of polygon edge failed. Check log @ $LOG_FILE\" \u003e\u003e \"$LOG_FILE\"\n                echo \"$POLYGON\" \u003e\u003e \"$LOG_FILE\"\n        fi\nfi\n\nchown -R \"$LINUX_USER\". \"$POLYGON_FOLDER\"\n\necho \"ALL DONE!\" \u003e\u003e \"$LOG_FILE\"\necho \"-------- Finished on: $(date)  ----------\" \u003e\u003e \"$LOG_FILE\"\nexit 0",
            "template": "#!/bin/bash\nPOLYGON_FOLDER=\"${polygon_edge_dir}\"\nLOGS_FOLDER=\"${polygon_edge_dir}/logs\"\nDATA_FOLDER=\"${polygon_edge_dir}/data\"\nEBS_DEVICE=\"${ebs_device}\"\nLOG_FILE=\"$LOGS_FOLDER/init.log\"\nNODE_INIT_FILE=\"$LOGS_FOLDER/node_init.json\"\nLINUX_USER=\"ubuntu\"\nNODE_NAME=\"${node_name}\"\nASSM_PARAM_PATH=\"/${assm_path}\"\nASSM_REGION=\"${assm_region}\"\nIP=\"$(hostname -I)\"\n\n# create a startup log\n\nTOTAL_NODES=\"${total_nodes}\"\n\n# create central dir that will hold chain data and logs\nif [ ! -d \"$POLYGON_FOLDER\" ];\nthen\nmkdir \"$POLYGON_FOLDER\"\nfi\n# crate logs dir\nif [ ! -d \"$LOGS_FOLDER\" ];\nthen\nmkdir \"$LOGS_FOLDER\"\nfi\n\necho \"----------- Script starting on :$(date) ----------------\" \u003e\u003e \"$LOG_FILE\"\n## Check if data directory already exists\nif [ -d \"$DATA_FOLDER\" ];\nthen\n        echo \"$DATA_FOLDER direcotory is already created. Skipping directory creation...\" \u003e\u003e \"$LOG_FILE\"\nelse\n        ERR=$(mkdir \"$DATA_FOLDER\" 2\u003e\u00261 \u003e /dev/null)\n        [ $? -eq 0 ] \u0026\u0026 echo \"Data directory created!\" \u003e\u003e \"$LOG_FILE\" || echo \"Directory creation failed! Error: $ERR\" \u003e\u003e \"$LOG_FILE\"\nfi\n\n# Wait for the system to fully boot before attemting to mount the EBS\ncounter=0\nwhile [ ! -b \"$EBS_DEVICE\" ]; \ndo\n    sleep 10\n    counter=$((counter + 1))\n    if [ $counter -ge 30 ]; \n    then\n        echo \"Could not initialize $EBS_DEVICE for more than 5 minutes. Exiting ...\"\u003e\u003e \"$LOG_FILE\"\n        exit 1\n    fi\ndone\n\n# Check if EBS storage exists\nif [ -b \"$EBS_DEVICE\" ];\nthen\n        # Check if we already have a filesystem on $EBS_DEVICE. If not create one.\n        if [[ $(file -s \"$EBS_DEVICE\") == \"$EBS_DEVICE: data\" ]];\n        then\n                ERR=$(mkfs -t xfs \"$EBS_DEVICE\" 2\u003e\u00261 \u003e /dev/null)\n                [ $? -eq 0 ] \u0026\u0026 echo \"EBS volume successfuly formated\" \u003e\u003e \"$LOG_FILE\" || echo \"Error formating EBS volume. ERR: $ERR\" \u003e\u003e \"$LOG_FILE\"\n        else\n                echo \"$EBS_DEVICE already has a file system! Skipping... \"\u003e\u003e \"$LOG_FILE\"\n        fi\n        # If block ebs device exists and it has a filesystem, check if it is mounted and mount if it is not already mounted\n        if grep -qs \"$EBS_DEVICE\" /proc/mounts;\n        then\n                echo \"EBS Volume already mounted. Skipping...\" \u003e\u003e \"$LOG_FILE\"\n        else\n                # Mount EBS volume\n                mount \"$EBS_DEVICE\" \"$DATA_FOLDER\"\n                [ $? -eq 0 ] \u0026\u0026 echo \"EBS Volume successfuly mounted!\" \u003e\u003e \"$LOG_FILE\"\n                ## Edit fstab\n                echo \"$EBS_DEVICE   $DATA_FOLDER    xfs     defaults,nofail     0 2\" \u003e\u003e /etc/fstab\n                [ $? -eq 0 ] \u0026\u0026 echo \"Fstab successfuly edited. EBS Volume added.\" \u003e\u003e \"$LOG_FILE\" || echo \"Fstab EBS volume edit failed!\" \u003e\u003e \"$LOG_FILE\"\n                ## Set right permissions for ubuntu user\n                chown -R \"$LINUX_USER\". \"$DATA_FOLDER\"\n                [ $? -eq 0 ] \u0026\u0026 echo \"User permissions on $DATA_FOLDER set...\" \u003e\u003e $LOG_FILE || echo \"Could not set $DATA_FOLDER permissions!\"\n        fi\nelse\n        echo \"No EBS Volume detected! Check if it is attached and/or if it is mounted on $EBS_DEVICE\" \u003e\u003e \"$LOG_FILE\"\nfi\n\necho \"--------------------------------------------------------------\" \u003e\u003e \"$LOG_FILE\"\necho \"Getting polygon-edge binary ...\" \u003e\u003e \"$LOG_FILE\"\n\n# wait for system to fully boot\nsleep 60\n\n\n# get polygon-edge binary from github releases\nsudo apt update \u0026\u0026 sudo apt install -y jq\nmkdir /tmp/polygon-edge\nwget -q -O /tmp/polygon-edge/polygon-edge.tar.gz \"$(curl -s https://api.github.com/repos/0xPolygon/polygon-edge/releases/latest | jq .assets[3].browser_download_url  | tr -d '\"')\"\ntar -xvf /tmp/polygon-edge/polygon-edge.tar.gz -C /tmp/polygon-edge\nsudo mv /tmp/polygon-edge/polygon-edge /usr/local/bin/\nrm -R /tmp/polygon-edge\n\n# install awscli so that we can call Lambda function\nsudo apt update \u0026\u0026 sudo apt install -y awscli\n\n# create json lambda query\njsonLambda=$(cat \u003c\u003cEOF\n{\n  \"config\": {\n\t  \"aws_region\": \"$ASSM_REGION\",\n\t  \"s3_bucket_name\": \"${s3_bucket_name}\",\n\t  \"s3_key_name\": \"${s3_key_name}\",\n\n    \"premine\": \"${premine}\",\n    \"chain_name\": \"${chain_name}\",\n\t  \"chain_id\": \"${chain_id}\",\n\t  \"pos\": ${pos},\n\t  \"epoch_size\": \"${epoch_size}\",\n\t  \"block_gas_limit\": \"${block_gas_limit}\",\n\t  \"max_validator_count\": \"${max_validator_count}\",\n\t  \"min_validator_count\": \"${min_validator_count}\",\n\t  \"consensus\": \"${consensus}\"\n  },\n  \"nodes\": {\n\t  \"total\": $TOTAL_NODES,\n\t  \"node_info\": {\n      \"ssm_param_id\": \"${assm_path}\",\n        \"node_name\": \"$NODE_NAME\",\n        \"ip\": \"$IP\"\n\t  }\n  }\n}\nEOF\n)\n\necho \"--------------------------------------------------------------\" \u003e\u003e \"$LOG_FILE\"\necho \"System init complete. Starting node initialization ...\" \u003e\u003e \"$LOG_FILE\"\n\n# Check if data folder is empty\nif [ \"$(ls -A \"$DATA_FOLDER\")\" ]; then\n        echo \"Files in data dir found. Skipping Polygon edge initialization...\" \u003e\u003e \"$LOG_FILE\"\nelse\n        echo \"Starting node initialization\" \u003e\u003e \"$LOG_FILE\"\n        /usr/local/bin/polygon-edge secrets generate --type aws-ssm --name \"$NODE_NAME\" --extra region=\"$ASSM_REGION\",ssm-parameter-path=\"$ASSM_PARAM_PATH\" --dir \"$DATA_FOLDER/secretsConfig.json\"\n        POLYGON=$(/usr/local/bin/polygon-edge secrets init --config \"$DATA_FOLDER\"/secretsConfig.json --json 2\u003e\u00261)\n        # Check if everything went ok\n        if [ $? -eq 0 ]; then\n            echo \"Starting lambda function\" \u003e\u003e \"$LOG_FILE\"\n            aws lambda invoke --function-name \"${lambda_function_name}\" --region \"$ASSM_REGION\" --payload \"$jsonLambda\" \"$LOGS_FOLDER/lambda.json\"\n        else\n                echo \"The initialization of polygon edge failed. Check log @ $LOG_FILE\" \u003e\u003e \"$LOG_FILE\"\n                echo \"$POLYGON\" \u003e\u003e \"$LOG_FILE\"\n        fi\nfi\n\nchown -R \"$LINUX_USER\". \"$POLYGON_FOLDER\"\n\necho \"ALL DONE!\" \u003e\u003e \"$LOG_FILE\"\necho \"-------- Finished on: $(date)  ----------\" \u003e\u003e \"$LOG_FILE\"\nexit 0",
            "vars": {
              "assm_path": "polygon-edge-validators",
              "assm_region": "us-west-2",
              "block_gas_limit": "",
              "chain_id": "",
              "chain_name": "",
              "consensus": "",
              "ebs_device": "/dev/nvme1n1",
              "epoch_size": "",
              "lambda_function_name": "polygon-edge-init",
              "max_validator_count": "",
              "min_validator_count": "",
              "node_name": "node-us-west-2c",
              "polygon_edge_dir": "/home/ubuntu/polygon",
              "pos": "false",
              "premine": "100",
              "s3_bucket_name": "polygon-edge-shared-20221123172544133800000005",
              "s3_key_name": "chain-config",
              "total_nodes": "4"
            }
          },
          "sensitive_attributes": []
        }
      ]
    },
    {
      "module": "module.test-main.module.user_data[\"2\"]",
      "mode": "data",
      "type": "template_file",
      "name": "polygon_edge_server",
      "provider": "provider[\"registry.terraform.io/hashicorp/template\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "filename": null,
            "id": "1fcdf916dcc7008b4f87dc13fd3b4e498aad1369cbcda5a083d814948e9d83a8",
            "rendered": "#!/bin/bash\r\nDATA_DIR=\"/home/ubuntu/polygon/data\"\r\nSECRETS_FILE=\"$DATA_DIR/secretsConfig.json\"\r\nGENESIS_FILE=\"$DATA_DIR/genesis.json\"\r\nS3_GENESIS=\"polygon-edge-shared-20221123172544133800000005/genesis.json\"\r\nLOG_FILE=\"/home/ubuntu/polygon/logs/edge-server.log\"\r\n\r\n# install awscli so that we can fetch genesis.json\r\nsudo apt update \u0026\u0026 sudo apt install -y awscli\r\n\r\n# wait untill genesis.json is found in the S3 bucket\r\nwhile ! aws s3 ls polygon-edge-shared-20221123172544133800000005 | grep genesis.json \u003e /dev/null;\r\ndo\r\n  echo \"Waiting for genesis.json to appear in S3 bucket...\"\r\n  sleep 10\r\ndone\r\n\r\n# we found genesis.json, now we download it to data folder\r\naws s3 cp s3://$S3_GENESIS $DATA_DIR\r\n\r\n\r\n# Create polygon-edge service and start it after genesis.json file is detected\r\ncat \u003e /etc/systemd/system/polygon_genesis.target \u003c\u003c EOF\r\n# check if genesys.json exists\r\n[Unit]\r\nTimeoutStartSec=infinity\r\nConditionPathExists=$GENESIS_FILE\r\nExecStart=/usr/bin/sleep 5\r\nRemainAfterExit=yes\r\nEOF\r\n\r\n## TODO make server options customisable\r\ncat \u003e /etc/systemd/system/polygon-edge.service \u003c\u003c EOF\r\n[Unit]\r\nDescription=Polygon Edge Server\r\nAfter=network.target polygon_genesis.target\r\nWants=polygon_genesis.target\r\nStartLimitIntervalSec=0\r\n\r\n[Service]\r\nType=simple\r\nRestart=always\r\nRestartSec=10\r\nUser=ubuntu\r\nStandardOutput=syslog\r\nStandardError=file:$LOG_FILE\r\nExecStartPre=/bin/bash -c \"sudo rm $LOG_FILE\"\r\nExecStart=/usr/local/bin/polygon-edge server --data-dir $DATA_DIR --chain $GENESIS_FILE --libp2p 0.0.0.0:1478 --grpc-address 0.0.0.0:9632 --secrets-config $SECRETS_FILE --seal SERVER_OPTIONS\r\n\r\n[Install]\r\nWantedBy=multi-user.target\r\nEOF\r\n\r\n#### customise server options\r\n\r\n# enable Prometheus API\r\nif [ \"\" != \"\" ]; then\r\n  prometheus=\"--prometheus \"\r\nfi\r\n\r\n# set block gas limit\r\nif [ \"\" != \"\" ]; then\r\n  block_gas_target=\"--block-gas-target \"\r\nfi\r\n\r\n# set nated address\r\nif [ \"\" != \"\" ]; then\r\n nat=\"--nat \"\r\nfi\r\n\r\n# set dns name\r\nif [ \"\" != \"\" ]; then\r\n dns_name=\"--dns \"\r\nfi\r\n\r\n# set price limit\r\nif [ \"\" != \"\" ]; then\r\n price_limit=\"--price-limit \"\r\nfi\r\n\r\n# set max slots\r\nif [ \"\" != \"\" ]; then\r\n max_slots=\"--max-slots \"\r\nfi\r\n\r\n# set block time in seconds\r\nif [ \"\" != \"\" ]; then\r\n  block_time=\"--block-time \"\r\nfi\r\n\r\n# set these parameters in service file\r\nsed -i \"s/SERVER_OPTIONS/$prometheus $block_gas_target $nat $dns $price_limit $max_slots $block_time/g\" /etc/systemd/system/polygon-edge.service\r\n\r\n# change ownership of the polygon folder to ubuntu user\r\nsudo chown -R ubuntu. /home/ubuntu/polygon\r\n\r\n# Enable polygon-edge on startup\r\nsudo /usr/bin/systemctl enable polygon-edge.service\r\n\r\n# Start polygon-edge service\r\nsudo /usr/bin/systemctl start polygon-edge.service",
            "template": "#!/bin/bash\r\nDATA_DIR=\"${polygon_edge_dir}/data\"\r\nSECRETS_FILE=\"$DATA_DIR/secretsConfig.json\"\r\nGENESIS_FILE=\"$DATA_DIR/genesis.json\"\r\nS3_GENESIS=\"${s3_bucket_name}/genesis.json\"\r\nLOG_FILE=\"${polygon_edge_dir}/logs/edge-server.log\"\r\n\r\n# install awscli so that we can fetch genesis.json\r\nsudo apt update \u0026\u0026 sudo apt install -y awscli\r\n\r\n# wait untill genesis.json is found in the S3 bucket\r\nwhile ! aws s3 ls ${s3_bucket_name} | grep genesis.json \u003e /dev/null;\r\ndo\r\n  echo \"Waiting for genesis.json to appear in S3 bucket...\"\r\n  sleep 10\r\ndone\r\n\r\n# we found genesis.json, now we download it to data folder\r\naws s3 cp s3://$S3_GENESIS $DATA_DIR\r\n\r\n\r\n# Create polygon-edge service and start it after genesis.json file is detected\r\ncat \u003e /etc/systemd/system/polygon_genesis.target \u003c\u003c EOF\r\n# check if genesys.json exists\r\n[Unit]\r\nTimeoutStartSec=infinity\r\nConditionPathExists=$GENESIS_FILE\r\nExecStart=/usr/bin/sleep 5\r\nRemainAfterExit=yes\r\nEOF\r\n\r\n## TODO make server options customisable\r\ncat \u003e /etc/systemd/system/polygon-edge.service \u003c\u003c EOF\r\n[Unit]\r\nDescription=Polygon Edge Server\r\nAfter=network.target polygon_genesis.target\r\nWants=polygon_genesis.target\r\nStartLimitIntervalSec=0\r\n\r\n[Service]\r\nType=simple\r\nRestart=always\r\nRestartSec=10\r\nUser=ubuntu\r\nStandardOutput=syslog\r\nStandardError=file:$LOG_FILE\r\nExecStartPre=/bin/bash -c \"sudo rm $LOG_FILE\"\r\nExecStart=/usr/local/bin/polygon-edge server --data-dir $DATA_DIR --chain $GENESIS_FILE --libp2p 0.0.0.0:1478 --grpc-address 0.0.0.0:9632 --secrets-config $SECRETS_FILE --seal SERVER_OPTIONS\r\n\r\n[Install]\r\nWantedBy=multi-user.target\r\nEOF\r\n\r\n#### customise server options\r\n\r\n# enable Prometheus API\r\nif [ \"${prometheus_address}\" != \"\" ]; then\r\n  prometheus=\"--prometheus ${prometheus_address}\"\r\nfi\r\n\r\n# set block gas limit\r\nif [ \"${block_gas_target}\" != \"\" ]; then\r\n  block_gas_target=\"--block-gas-target ${block_gas_target}\"\r\nfi\r\n\r\n# set nated address\r\nif [ \"${nat_address}\" != \"\" ]; then\r\n nat=\"--nat ${nat_address}\"\r\nfi\r\n\r\n# set dns name\r\nif [ \"${dns_name}\" != \"\" ]; then\r\n dns_name=\"--dns ${dns_name}\"\r\nfi\r\n\r\n# set price limit\r\nif [ \"${price_limit}\" != \"\" ]; then\r\n price_limit=\"--price-limit ${price_limit}\"\r\nfi\r\n\r\n# set max slots\r\nif [ \"${max_slots}\" != \"\" ]; then\r\n max_slots=\"--max-slots ${max_slots}\"\r\nfi\r\n\r\n# set block time in seconds\r\nif [ \"${block_time}\" != \"\" ]; then\r\n  block_time=\"--block-time ${block_time}\"\r\nfi\r\n\r\n# set these parameters in service file\r\nsed -i \"s/SERVER_OPTIONS/$prometheus $block_gas_target $nat $dns $price_limit $max_slots $block_time/g\" /etc/systemd/system/polygon-edge.service\r\n\r\n# change ownership of the polygon folder to ubuntu user\r\nsudo chown -R ubuntu. ${polygon_edge_dir}\r\n\r\n# Enable polygon-edge on startup\r\nsudo /usr/bin/systemctl enable polygon-edge.service\r\n\r\n# Start polygon-edge service\r\nsudo /usr/bin/systemctl start polygon-edge.service",
            "vars": {
              "block_gas_target": "",
              "block_time": "",
              "dns_name": "",
              "max_slots": "",
              "nat_address": "",
              "polygon_edge_dir": "/home/ubuntu/polygon",
              "price_limit": "",
              "prometheus_address": "",
              "s3_bucket_name": "polygon-edge-shared-20221123172544133800000005"
            }
          },
          "sensitive_attributes": []
        }
      ]
    },
    {
      "module": "module.test-main.module.user_data[\"3\"]",
      "mode": "data",
      "type": "template_cloudinit_config",
      "name": "polygon_edge",
      "provider": "provider[\"registry.terraform.io/hashicorp/template\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "base64_encode": true,
            "gzip": true,
            "id": "1977485",
            "part": [
              {
                "content": "#!/bin/bash\nPOLYGON_FOLDER=\"/home/ubuntu/polygon\"\nLOGS_FOLDER=\"/home/ubuntu/polygon/logs\"\nDATA_FOLDER=\"/home/ubuntu/polygon/data\"\nEBS_DEVICE=\"/dev/nvme1n1\"\nLOG_FILE=\"$LOGS_FOLDER/init.log\"\nNODE_INIT_FILE=\"$LOGS_FOLDER/node_init.json\"\nLINUX_USER=\"ubuntu\"\nNODE_NAME=\"node-us-west-2d\"\nASSM_PARAM_PATH=\"/polygon-edge-validators\"\nASSM_REGION=\"us-west-2\"\nIP=\"$(hostname -I)\"\n\n# create a startup log\n\nTOTAL_NODES=\"4\"\n\n# create central dir that will hold chain data and logs\nif [ ! -d \"$POLYGON_FOLDER\" ];\nthen\nmkdir \"$POLYGON_FOLDER\"\nfi\n# crate logs dir\nif [ ! -d \"$LOGS_FOLDER\" ];\nthen\nmkdir \"$LOGS_FOLDER\"\nfi\n\necho \"----------- Script starting on :$(date) ----------------\" \u003e\u003e \"$LOG_FILE\"\n## Check if data directory already exists\nif [ -d \"$DATA_FOLDER\" ];\nthen\n        echo \"$DATA_FOLDER direcotory is already created. Skipping directory creation...\" \u003e\u003e \"$LOG_FILE\"\nelse\n        ERR=$(mkdir \"$DATA_FOLDER\" 2\u003e\u00261 \u003e /dev/null)\n        [ $? -eq 0 ] \u0026\u0026 echo \"Data directory created!\" \u003e\u003e \"$LOG_FILE\" || echo \"Directory creation failed! Error: $ERR\" \u003e\u003e \"$LOG_FILE\"\nfi\n\n# Wait for the system to fully boot before attemting to mount the EBS\ncounter=0\nwhile [ ! -b \"$EBS_DEVICE\" ]; \ndo\n    sleep 10\n    counter=$((counter + 1))\n    if [ $counter -ge 30 ]; \n    then\n        echo \"Could not initialize $EBS_DEVICE for more than 5 minutes. Exiting ...\"\u003e\u003e \"$LOG_FILE\"\n        exit 1\n    fi\ndone\n\n# Check if EBS storage exists\nif [ -b \"$EBS_DEVICE\" ];\nthen\n        # Check if we already have a filesystem on $EBS_DEVICE. If not create one.\n        if [[ $(file -s \"$EBS_DEVICE\") == \"$EBS_DEVICE: data\" ]];\n        then\n                ERR=$(mkfs -t xfs \"$EBS_DEVICE\" 2\u003e\u00261 \u003e /dev/null)\n                [ $? -eq 0 ] \u0026\u0026 echo \"EBS volume successfuly formated\" \u003e\u003e \"$LOG_FILE\" || echo \"Error formating EBS volume. ERR: $ERR\" \u003e\u003e \"$LOG_FILE\"\n        else\n                echo \"$EBS_DEVICE already has a file system! Skipping... \"\u003e\u003e \"$LOG_FILE\"\n        fi\n        # If block ebs device exists and it has a filesystem, check if it is mounted and mount if it is not already mounted\n        if grep -qs \"$EBS_DEVICE\" /proc/mounts;\n        then\n                echo \"EBS Volume already mounted. Skipping...\" \u003e\u003e \"$LOG_FILE\"\n        else\n                # Mount EBS volume\n                mount \"$EBS_DEVICE\" \"$DATA_FOLDER\"\n                [ $? -eq 0 ] \u0026\u0026 echo \"EBS Volume successfuly mounted!\" \u003e\u003e \"$LOG_FILE\"\n                ## Edit fstab\n                echo \"$EBS_DEVICE   $DATA_FOLDER    xfs     defaults,nofail     0 2\" \u003e\u003e /etc/fstab\n                [ $? -eq 0 ] \u0026\u0026 echo \"Fstab successfuly edited. EBS Volume added.\" \u003e\u003e \"$LOG_FILE\" || echo \"Fstab EBS volume edit failed!\" \u003e\u003e \"$LOG_FILE\"\n                ## Set right permissions for ubuntu user\n                chown -R \"$LINUX_USER\". \"$DATA_FOLDER\"\n                [ $? -eq 0 ] \u0026\u0026 echo \"User permissions on $DATA_FOLDER set...\" \u003e\u003e $LOG_FILE || echo \"Could not set $DATA_FOLDER permissions!\"\n        fi\nelse\n        echo \"No EBS Volume detected! Check if it is attached and/or if it is mounted on $EBS_DEVICE\" \u003e\u003e \"$LOG_FILE\"\nfi\n\necho \"--------------------------------------------------------------\" \u003e\u003e \"$LOG_FILE\"\necho \"Getting polygon-edge binary ...\" \u003e\u003e \"$LOG_FILE\"\n\n# wait for system to fully boot\nsleep 60\n\n\n# get polygon-edge binary from github releases\nsudo apt update \u0026\u0026 sudo apt install -y jq\nmkdir /tmp/polygon-edge\nwget -q -O /tmp/polygon-edge/polygon-edge.tar.gz \"$(curl -s https://api.github.com/repos/0xPolygon/polygon-edge/releases/latest | jq .assets[3].browser_download_url  | tr -d '\"')\"\ntar -xvf /tmp/polygon-edge/polygon-edge.tar.gz -C /tmp/polygon-edge\nsudo mv /tmp/polygon-edge/polygon-edge /usr/local/bin/\nrm -R /tmp/polygon-edge\n\n# install awscli so that we can call Lambda function\nsudo apt update \u0026\u0026 sudo apt install -y awscli\n\n# create json lambda query\njsonLambda=$(cat \u003c\u003cEOF\n{\n  \"config\": {\n\t  \"aws_region\": \"$ASSM_REGION\",\n\t  \"s3_bucket_name\": \"polygon-edge-shared-20221123172544133800000005\",\n\t  \"s3_key_name\": \"chain-config\",\n\n    \"premine\": \"100\",\n    \"chain_name\": \"\",\n\t  \"chain_id\": \"\",\n\t  \"pos\": false,\n\t  \"epoch_size\": \"\",\n\t  \"block_gas_limit\": \"\",\n\t  \"max_validator_count\": \"\",\n\t  \"min_validator_count\": \"\",\n\t  \"consensus\": \"\"\n  },\n  \"nodes\": {\n\t  \"total\": $TOTAL_NODES,\n\t  \"node_info\": {\n      \"ssm_param_id\": \"polygon-edge-validators\",\n        \"node_name\": \"$NODE_NAME\",\n        \"ip\": \"$IP\"\n\t  }\n  }\n}\nEOF\n)\n\necho \"--------------------------------------------------------------\" \u003e\u003e \"$LOG_FILE\"\necho \"System init complete. Starting node initialization ...\" \u003e\u003e \"$LOG_FILE\"\n\n# Check if data folder is empty\nif [ \"$(ls -A \"$DATA_FOLDER\")\" ]; then\n        echo \"Files in data dir found. Skipping Polygon edge initialization...\" \u003e\u003e \"$LOG_FILE\"\nelse\n        echo \"Starting node initialization\" \u003e\u003e \"$LOG_FILE\"\n        /usr/local/bin/polygon-edge secrets generate --type aws-ssm --name \"$NODE_NAME\" --extra region=\"$ASSM_REGION\",ssm-parameter-path=\"$ASSM_PARAM_PATH\" --dir \"$DATA_FOLDER/secretsConfig.json\"\n        POLYGON=$(/usr/local/bin/polygon-edge secrets init --config \"$DATA_FOLDER\"/secretsConfig.json --json 2\u003e\u00261)\n        # Check if everything went ok\n        if [ $? -eq 0 ]; then\n            echo \"Starting lambda function\" \u003e\u003e \"$LOG_FILE\"\n            aws lambda invoke --function-name \"polygon-edge-init\" --region \"$ASSM_REGION\" --payload \"$jsonLambda\" \"$LOGS_FOLDER/lambda.json\"\n        else\n                echo \"The initialization of polygon edge failed. Check log @ $LOG_FILE\" \u003e\u003e \"$LOG_FILE\"\n                echo \"$POLYGON\" \u003e\u003e \"$LOG_FILE\"\n        fi\nfi\n\nchown -R \"$LINUX_USER\". \"$POLYGON_FOLDER\"\n\necho \"ALL DONE!\" \u003e\u003e \"$LOG_FILE\"\necho \"-------- Finished on: $(date)  ----------\" \u003e\u003e \"$LOG_FILE\"\nexit 0",
                "content_type": "text/x-shellscript",
                "filename": "",
                "merge_type": ""
              },
              {
                "content": "#!/bin/bash\r\nDATA_DIR=\"/home/ubuntu/polygon/data\"\r\nSECRETS_FILE=\"$DATA_DIR/secretsConfig.json\"\r\nGENESIS_FILE=\"$DATA_DIR/genesis.json\"\r\nS3_GENESIS=\"polygon-edge-shared-20221123172544133800000005/genesis.json\"\r\nLOG_FILE=\"/home/ubuntu/polygon/logs/edge-server.log\"\r\n\r\n# install awscli so that we can fetch genesis.json\r\nsudo apt update \u0026\u0026 sudo apt install -y awscli\r\n\r\n# wait untill genesis.json is found in the S3 bucket\r\nwhile ! aws s3 ls polygon-edge-shared-20221123172544133800000005 | grep genesis.json \u003e /dev/null;\r\ndo\r\n  echo \"Waiting for genesis.json to appear in S3 bucket...\"\r\n  sleep 10\r\ndone\r\n\r\n# we found genesis.json, now we download it to data folder\r\naws s3 cp s3://$S3_GENESIS $DATA_DIR\r\n\r\n\r\n# Create polygon-edge service and start it after genesis.json file is detected\r\ncat \u003e /etc/systemd/system/polygon_genesis.target \u003c\u003c EOF\r\n# check if genesys.json exists\r\n[Unit]\r\nTimeoutStartSec=infinity\r\nConditionPathExists=$GENESIS_FILE\r\nExecStart=/usr/bin/sleep 5\r\nRemainAfterExit=yes\r\nEOF\r\n\r\n## TODO make server options customisable\r\ncat \u003e /etc/systemd/system/polygon-edge.service \u003c\u003c EOF\r\n[Unit]\r\nDescription=Polygon Edge Server\r\nAfter=network.target polygon_genesis.target\r\nWants=polygon_genesis.target\r\nStartLimitIntervalSec=0\r\n\r\n[Service]\r\nType=simple\r\nRestart=always\r\nRestartSec=10\r\nUser=ubuntu\r\nStandardOutput=syslog\r\nStandardError=file:$LOG_FILE\r\nExecStartPre=/bin/bash -c \"sudo rm $LOG_FILE\"\r\nExecStart=/usr/local/bin/polygon-edge server --data-dir $DATA_DIR --chain $GENESIS_FILE --libp2p 0.0.0.0:1478 --grpc-address 0.0.0.0:9632 --secrets-config $SECRETS_FILE --seal SERVER_OPTIONS\r\n\r\n[Install]\r\nWantedBy=multi-user.target\r\nEOF\r\n\r\n#### customise server options\r\n\r\n# enable Prometheus API\r\nif [ \"\" != \"\" ]; then\r\n  prometheus=\"--prometheus \"\r\nfi\r\n\r\n# set block gas limit\r\nif [ \"\" != \"\" ]; then\r\n  block_gas_target=\"--block-gas-target \"\r\nfi\r\n\r\n# set nated address\r\nif [ \"\" != \"\" ]; then\r\n nat=\"--nat \"\r\nfi\r\n\r\n# set dns name\r\nif [ \"\" != \"\" ]; then\r\n dns_name=\"--dns \"\r\nfi\r\n\r\n# set price limit\r\nif [ \"\" != \"\" ]; then\r\n price_limit=\"--price-limit \"\r\nfi\r\n\r\n# set max slots\r\nif [ \"\" != \"\" ]; then\r\n max_slots=\"--max-slots \"\r\nfi\r\n\r\n# set block time in seconds\r\nif [ \"\" != \"\" ]; then\r\n  block_time=\"--block-time \"\r\nfi\r\n\r\n# set these parameters in service file\r\nsed -i \"s/SERVER_OPTIONS/$prometheus $block_gas_target $nat $dns $price_limit $max_slots $block_time/g\" /etc/systemd/system/polygon-edge.service\r\n\r\n# change ownership of the polygon folder to ubuntu user\r\nsudo chown -R ubuntu. /home/ubuntu/polygon\r\n\r\n# Enable polygon-edge on startup\r\nsudo /usr/bin/systemctl enable polygon-edge.service\r\n\r\n# Start polygon-edge service\r\nsudo /usr/bin/systemctl start polygon-edge.service",
                "content_type": "text/x-shellscript",
                "filename": "",
                "merge_type": ""
              }
            ],
            "rendered": "H4sIAAAAAAAA/8RZbW/buJN/fQL8HSaKsf8EV1p5aHf30qp3aeL2DKRxEKfdWxSFQUsjixuJVEkqtne73/1AUpIl20nbBQ6nAkklDn+cZ85MLgTXyDW5WxV4BnmZaVZQqYOcLTF+CTNR8pjKVei/H70fvhl/uL48v/3d98wb+YhSMcHP4Hhw1PN6HiFtop7XYEvKVYKSDHkkYsbnZ/DLjOkWgT1c41IHS6JSzDIVSVbonvee5bh1zv5eMGM8mFGVejfjq9/fja+nb8dXl8Pb0A9SkWNQzkquy6AQ2WouuO9djd9NniQJMjFXvnd5fnf+NF1MNfW94ZvJ9HL4cXQxDP0gxoeAP+R4zI/tSdO3o6th6PdbhwaMMz3IxNz3rseXw+noenS3i4yLGKeW9g9l+R5df/if6YeJYccxUgFcn78fhr4hJ6UiC1SanMS+dz6ZvJ/enN+em593/x36Nd8E4zmSB5qxmGohVUV6O3w3Gl+HfoPhe6Ob0O8fpEJpTnMEMjr0PW8fIolUI1BQmkpdFpCJuefdje/Or6aGo0noP28TRsi1pBnETIJOqYYFyzJIRRZDlFLGwSgSKI8NkPJYAp9gD0gMfr9rUh8+v/R0itzL7w3Y1rqXMHusOdVgmSM7eC0Fb4O1Fw2Sh1EqwCfrBybWF53gjM9BcDjrH8RU4yGQjceH168dqjWv7+3vw0WK0T2wxIkcM4mRFnIFNJNI4xXgkildqcAy3PLCNcNQPY6/No2DFBaTqQbWGSIewOSeFYVhfH20XWOCDwaDLY4xU9icNry9DfsHtbI6jJ28/ukYXoNz/zLLDptNn6D/n0DwCxzBZ/jpp4rly670FXt7m+fD16/1hi12IaEsw3gPhlIKeQb94e3tFv/GiPvwG2UaEmGcD0GtlMYctICkzLIVzITQMMNESASqNebWrlpALkqu7Zbhm4kXmTeU4ZG3SFmGzqNm4PfX4W/sA14srOwqQyzg+Mi+1Jv7BwfVf+Hf4fjQacnaul9/J3OE0yOLZBZ3mPtClFkMXGgwyYHRjP2J0GLDSpobcXRKObyAnPFSoxrAcMmscMbSG4pqjlgyDcf2NWFeLDgaBTZeO3wzAaWFpHPsuuq2Jrqe2sJYYOOWKX0waSRhGVZmEbwtygBGiZW0SiSC46CBNAd/gv6B2Q1EdRk4hDDsfDmzEefD588vG4QOh5teniggGpbJBvATrv60yxvVPYiszBFUGUWoVFJmK2Os3Pj+465v/buiM9ZbAw0Ms494fmPQdgRv5I2Wz6wtoiqDVIGy16SMwWAAj7lNwlqWHiUwy0R0DzhTEOMDi2pnsTme6dYp7pBnENXewbTJWzb2MLb0Lg6bJeMONbcVWdsl5hILIF82rRYUUkSBpVffcIC1uT46c22cNmhr5Mf0vg/vrTBrE26ROGm7zHeT7Q/428dtf6uE2Eq127zuwzA2eVNpOvsODwLo3EMANnbME2NCy0yrZ1yYnG2/HcGJ5SBAHQW7j9gt1ltD25EIY2at0rZYHGO8ZZt1SDmQVkSildRdKN+jmQlqkGyeaihQ5kyZklTZxOsqMygVyq2NUSoWHMitQW+KOX/wz+z7QaHsnG5SZ9sCCnXtoI0waxWsbxGFuruxBbrXCfGOTzuYa9HWe4waI+Nd62zvgpZqTaPUBXQg5Hagd/P+znt8qxj7B892gWNB36G2qbVdIMOMcSpXsCvIvX1Y1DXFrnrCc7f/z0eeIZ2j3omcSJHDnOm0nIHEDKlC5akyFkALDWVhqkpj7+YT40rTLAOygj++VFVroPOiU9h7C3Me+QJkvL3YeRloKgfzP8HvH0SlzMwdmmpdqLMgoAUbOM4GkcgDiYVQwdHypmp8OpA160FGNSoNX+GPLzCgSqFWn04/D2ZSLBTKaSwWPBM0npqz4CtoaSrcf/n/OvQ9TSWQ5UPynRyTix1yWzXlD9+AgKBUMshERDPbOHoyNxG5DeftN/qmCxVlDJSouheEiHKIzNIVzWcxhaTkkSlKv9d8DrHVIpkWDzIH9qVEufLMF4ce9g8iquHVq+H4rfeXB+BHgids7p/BX96/Afh0oaYS50xw/wz8fqub859ZAnU6nZXRPeqp6eMMUacVVCmVGJOTo5OT4+OT0+NfTl48f358evrrkXterGHucdVg2N6NVLw882xm8AuJOeN2/fjoyH/mvlrSZmMF5z6yuPWpEMo/g4RmCt0HLESUThX7s73RVhfTOVXTjOVMt1Zyupw2je3U1tTtVcafWI0EV8hVqew3D+Bvw7ztq1Wjai00zfwz6Le6Xbe9atcTYWldjvSVyqcFlTSvxHysA3/WpFWHU2uq3zT4bRJW2LXRjW9O/tuw6v3tGe84/D9NkxOX6kzbAZHIiww1DmBS98KG83VP4pq0R7Jntw1ORBajNNcB5oVeuZbC7x9kCsj5xu14aLusHW3RW1NNQj1MMKkxESVvt7xV9gKbBrp8frP3rRTwhKiPlg0bCaeTjBRGErWCOXK0QwtC9KpAkx+IUjkQYgcvbT8AQnCpJQUX8eFGvCuVE+txqFGSguq0pliPggzGVhMfVLxc2HiuZk61DNWYJewffI801kFIlRk27LfjGCDE/jKd1eGujhEfUK50ahS/QK5B3HeawFZ59HK7pN+wXNZN2E8We3ShanrGH8S9MU+9sTJMJ6CN3Ea3zjIbmRgIKejKXIDg99fJ3e/OnQJ33ob6n2ji7tKtmBNJXW44V3d17aDSZybm8F/Qqoq/Ue1WlX7lAY+SJ8wWaY+XuJuTuiqnnF9dweX4erhddncTGbxlnKnUlopnUI/c4KmctWQajv5fJtE9Nzy+HD05Oe55k+HF7fBuUk9/6027QrHnvRteDyejbWKTOxRTNdnkdFpRhj94y28ircfXj07JA4eM8gGlHWlbRXyjcEpQRym0D+v9WN3kDrEVeMk1y7IOmLlHbOo3l4FOESan4KqfXjW727ORrU4hU/BjKoKvbsDQOa81DHrZ82LR8+qo+Y26gZvpEzpbtJGsQCoNjw1/5hYym+vZYc8O4CppsRKqjfMMuFiYpbq2Nl2VFu1btedVskYFqNOzIOivHQQaJzJnmFMuXDW6kdWlHeFQHru5tzmEJho3ZLJDI6aaJrDnmaq1avFdlxRXv2sfmtYAmkrTtbx6BcPxW8NIMw+yFKvqCDdF6nmfPnCmP/e8O5ajKLVN7hOMQsYTkwtXNoZjZrLhDdXp0G4L++0I6nnDJUZ2Z2jvNBO7TvEvet4t5pTxcyPkcMl0uELV8yxrPW9/H+7Gl2PI6b1TDkoQhbY9eFQqLXKm6CzD75DfNTW1gmvpa+ku0eUbc8vXtcvQWGRiD+15lr+Qo14IeV/rcLdqe95vlGsVPrZqFXFlqukR1ygfaGb0afPap4njz+h7VWComKn8jI6sN4Q0W9CVat7NPuO6HxTK0KUMC89jKuNxqYtSh2qlMjFff7YjztA40FmTwFsGupEYNrkVSAS+zQ0yb11jW/Z8tEaxBiPExIitgpogMCWL/XNUx1GAkIzNipMCjgb239nx819+BULmsogIjWOJSjVr//Hz6QkQUiXwugTqtxO9XaYZTIa3H4e30/HN3Wh8PbGaHrlM99lZC+M3q9D+FZaUCmVjq8YP9/cbh9v0RBfOyI0jwo0UOeoUSwXnN6NeVV/7sBean1XRZBJP0RCGPiHrN/B7XlKlXYW6Gu/OqQLbgD2BuG7VHPcG134jc6pI5bIb6Jza0a/T7OPYnFo0TrcAYq7AlGeP7425sj2WATDUGwCFNPH4DdksketAnbZYhMS+bsLldAkqE/oJYUzjakkMVE6XxL7s1rtmuan5TLktePwEaKV9Q7/Wu929gatTVAhN26AcustKJip7nsIYCANfBV23DfotL+lvWhv6xjp9o+F+S13Qb8St9xiugrn/3cnS8R6llM8RxIKjVCkrTOlrbvy6/K0aSy3aY9mq2GgqVbc0gF1Fjjtm6MKok0cEr//6XeGtLxHLdaSzOvwe59+mq5237eOgamvPGrNb6hLS8/43AAD//9ZNvAfTIQAA"
          },
          "sensitive_attributes": []
        }
      ]
    },
    {
      "module": "module.test-main.module.user_data[\"3\"]",
      "mode": "data",
      "type": "template_file",
      "name": "polygon_edge_node",
      "provider": "provider[\"registry.terraform.io/hashicorp/template\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "filename": null,
            "id": "0e65d79a678f27da7e055136c527cb02cc74bf8493c24be04a473344443d85de",
            "rendered": "#!/bin/bash\nPOLYGON_FOLDER=\"/home/ubuntu/polygon\"\nLOGS_FOLDER=\"/home/ubuntu/polygon/logs\"\nDATA_FOLDER=\"/home/ubuntu/polygon/data\"\nEBS_DEVICE=\"/dev/nvme1n1\"\nLOG_FILE=\"$LOGS_FOLDER/init.log\"\nNODE_INIT_FILE=\"$LOGS_FOLDER/node_init.json\"\nLINUX_USER=\"ubuntu\"\nNODE_NAME=\"node-us-west-2d\"\nASSM_PARAM_PATH=\"/polygon-edge-validators\"\nASSM_REGION=\"us-west-2\"\nIP=\"$(hostname -I)\"\n\n# create a startup log\n\nTOTAL_NODES=\"4\"\n\n# create central dir that will hold chain data and logs\nif [ ! -d \"$POLYGON_FOLDER\" ];\nthen\nmkdir \"$POLYGON_FOLDER\"\nfi\n# crate logs dir\nif [ ! -d \"$LOGS_FOLDER\" ];\nthen\nmkdir \"$LOGS_FOLDER\"\nfi\n\necho \"----------- Script starting on :$(date) ----------------\" \u003e\u003e \"$LOG_FILE\"\n## Check if data directory already exists\nif [ -d \"$DATA_FOLDER\" ];\nthen\n        echo \"$DATA_FOLDER direcotory is already created. Skipping directory creation...\" \u003e\u003e \"$LOG_FILE\"\nelse\n        ERR=$(mkdir \"$DATA_FOLDER\" 2\u003e\u00261 \u003e /dev/null)\n        [ $? -eq 0 ] \u0026\u0026 echo \"Data directory created!\" \u003e\u003e \"$LOG_FILE\" || echo \"Directory creation failed! Error: $ERR\" \u003e\u003e \"$LOG_FILE\"\nfi\n\n# Wait for the system to fully boot before attemting to mount the EBS\ncounter=0\nwhile [ ! -b \"$EBS_DEVICE\" ]; \ndo\n    sleep 10\n    counter=$((counter + 1))\n    if [ $counter -ge 30 ]; \n    then\n        echo \"Could not initialize $EBS_DEVICE for more than 5 minutes. Exiting ...\"\u003e\u003e \"$LOG_FILE\"\n        exit 1\n    fi\ndone\n\n# Check if EBS storage exists\nif [ -b \"$EBS_DEVICE\" ];\nthen\n        # Check if we already have a filesystem on $EBS_DEVICE. If not create one.\n        if [[ $(file -s \"$EBS_DEVICE\") == \"$EBS_DEVICE: data\" ]];\n        then\n                ERR=$(mkfs -t xfs \"$EBS_DEVICE\" 2\u003e\u00261 \u003e /dev/null)\n                [ $? -eq 0 ] \u0026\u0026 echo \"EBS volume successfuly formated\" \u003e\u003e \"$LOG_FILE\" || echo \"Error formating EBS volume. ERR: $ERR\" \u003e\u003e \"$LOG_FILE\"\n        else\n                echo \"$EBS_DEVICE already has a file system! Skipping... \"\u003e\u003e \"$LOG_FILE\"\n        fi\n        # If block ebs device exists and it has a filesystem, check if it is mounted and mount if it is not already mounted\n        if grep -qs \"$EBS_DEVICE\" /proc/mounts;\n        then\n                echo \"EBS Volume already mounted. Skipping...\" \u003e\u003e \"$LOG_FILE\"\n        else\n                # Mount EBS volume\n                mount \"$EBS_DEVICE\" \"$DATA_FOLDER\"\n                [ $? -eq 0 ] \u0026\u0026 echo \"EBS Volume successfuly mounted!\" \u003e\u003e \"$LOG_FILE\"\n                ## Edit fstab\n                echo \"$EBS_DEVICE   $DATA_FOLDER    xfs     defaults,nofail     0 2\" \u003e\u003e /etc/fstab\n                [ $? -eq 0 ] \u0026\u0026 echo \"Fstab successfuly edited. EBS Volume added.\" \u003e\u003e \"$LOG_FILE\" || echo \"Fstab EBS volume edit failed!\" \u003e\u003e \"$LOG_FILE\"\n                ## Set right permissions for ubuntu user\n                chown -R \"$LINUX_USER\". \"$DATA_FOLDER\"\n                [ $? -eq 0 ] \u0026\u0026 echo \"User permissions on $DATA_FOLDER set...\" \u003e\u003e $LOG_FILE || echo \"Could not set $DATA_FOLDER permissions!\"\n        fi\nelse\n        echo \"No EBS Volume detected! Check if it is attached and/or if it is mounted on $EBS_DEVICE\" \u003e\u003e \"$LOG_FILE\"\nfi\n\necho \"--------------------------------------------------------------\" \u003e\u003e \"$LOG_FILE\"\necho \"Getting polygon-edge binary ...\" \u003e\u003e \"$LOG_FILE\"\n\n# wait for system to fully boot\nsleep 60\n\n\n# get polygon-edge binary from github releases\nsudo apt update \u0026\u0026 sudo apt install -y jq\nmkdir /tmp/polygon-edge\nwget -q -O /tmp/polygon-edge/polygon-edge.tar.gz \"$(curl -s https://api.github.com/repos/0xPolygon/polygon-edge/releases/latest | jq .assets[3].browser_download_url  | tr -d '\"')\"\ntar -xvf /tmp/polygon-edge/polygon-edge.tar.gz -C /tmp/polygon-edge\nsudo mv /tmp/polygon-edge/polygon-edge /usr/local/bin/\nrm -R /tmp/polygon-edge\n\n# install awscli so that we can call Lambda function\nsudo apt update \u0026\u0026 sudo apt install -y awscli\n\n# create json lambda query\njsonLambda=$(cat \u003c\u003cEOF\n{\n  \"config\": {\n\t  \"aws_region\": \"$ASSM_REGION\",\n\t  \"s3_bucket_name\": \"polygon-edge-shared-20221123172544133800000005\",\n\t  \"s3_key_name\": \"chain-config\",\n\n    \"premine\": \"100\",\n    \"chain_name\": \"\",\n\t  \"chain_id\": \"\",\n\t  \"pos\": false,\n\t  \"epoch_size\": \"\",\n\t  \"block_gas_limit\": \"\",\n\t  \"max_validator_count\": \"\",\n\t  \"min_validator_count\": \"\",\n\t  \"consensus\": \"\"\n  },\n  \"nodes\": {\n\t  \"total\": $TOTAL_NODES,\n\t  \"node_info\": {\n      \"ssm_param_id\": \"polygon-edge-validators\",\n        \"node_name\": \"$NODE_NAME\",\n        \"ip\": \"$IP\"\n\t  }\n  }\n}\nEOF\n)\n\necho \"--------------------------------------------------------------\" \u003e\u003e \"$LOG_FILE\"\necho \"System init complete. Starting node initialization ...\" \u003e\u003e \"$LOG_FILE\"\n\n# Check if data folder is empty\nif [ \"$(ls -A \"$DATA_FOLDER\")\" ]; then\n        echo \"Files in data dir found. Skipping Polygon edge initialization...\" \u003e\u003e \"$LOG_FILE\"\nelse\n        echo \"Starting node initialization\" \u003e\u003e \"$LOG_FILE\"\n        /usr/local/bin/polygon-edge secrets generate --type aws-ssm --name \"$NODE_NAME\" --extra region=\"$ASSM_REGION\",ssm-parameter-path=\"$ASSM_PARAM_PATH\" --dir \"$DATA_FOLDER/secretsConfig.json\"\n        POLYGON=$(/usr/local/bin/polygon-edge secrets init --config \"$DATA_FOLDER\"/secretsConfig.json --json 2\u003e\u00261)\n        # Check if everything went ok\n        if [ $? -eq 0 ]; then\n            echo \"Starting lambda function\" \u003e\u003e \"$LOG_FILE\"\n            aws lambda invoke --function-name \"polygon-edge-init\" --region \"$ASSM_REGION\" --payload \"$jsonLambda\" \"$LOGS_FOLDER/lambda.json\"\n        else\n                echo \"The initialization of polygon edge failed. Check log @ $LOG_FILE\" \u003e\u003e \"$LOG_FILE\"\n                echo \"$POLYGON\" \u003e\u003e \"$LOG_FILE\"\n        fi\nfi\n\nchown -R \"$LINUX_USER\". \"$POLYGON_FOLDER\"\n\necho \"ALL DONE!\" \u003e\u003e \"$LOG_FILE\"\necho \"-------- Finished on: $(date)  ----------\" \u003e\u003e \"$LOG_FILE\"\nexit 0",
            "template": "#!/bin/bash\nPOLYGON_FOLDER=\"${polygon_edge_dir}\"\nLOGS_FOLDER=\"${polygon_edge_dir}/logs\"\nDATA_FOLDER=\"${polygon_edge_dir}/data\"\nEBS_DEVICE=\"${ebs_device}\"\nLOG_FILE=\"$LOGS_FOLDER/init.log\"\nNODE_INIT_FILE=\"$LOGS_FOLDER/node_init.json\"\nLINUX_USER=\"ubuntu\"\nNODE_NAME=\"${node_name}\"\nASSM_PARAM_PATH=\"/${assm_path}\"\nASSM_REGION=\"${assm_region}\"\nIP=\"$(hostname -I)\"\n\n# create a startup log\n\nTOTAL_NODES=\"${total_nodes}\"\n\n# create central dir that will hold chain data and logs\nif [ ! -d \"$POLYGON_FOLDER\" ];\nthen\nmkdir \"$POLYGON_FOLDER\"\nfi\n# crate logs dir\nif [ ! -d \"$LOGS_FOLDER\" ];\nthen\nmkdir \"$LOGS_FOLDER\"\nfi\n\necho \"----------- Script starting on :$(date) ----------------\" \u003e\u003e \"$LOG_FILE\"\n## Check if data directory already exists\nif [ -d \"$DATA_FOLDER\" ];\nthen\n        echo \"$DATA_FOLDER direcotory is already created. Skipping directory creation...\" \u003e\u003e \"$LOG_FILE\"\nelse\n        ERR=$(mkdir \"$DATA_FOLDER\" 2\u003e\u00261 \u003e /dev/null)\n        [ $? -eq 0 ] \u0026\u0026 echo \"Data directory created!\" \u003e\u003e \"$LOG_FILE\" || echo \"Directory creation failed! Error: $ERR\" \u003e\u003e \"$LOG_FILE\"\nfi\n\n# Wait for the system to fully boot before attemting to mount the EBS\ncounter=0\nwhile [ ! -b \"$EBS_DEVICE\" ]; \ndo\n    sleep 10\n    counter=$((counter + 1))\n    if [ $counter -ge 30 ]; \n    then\n        echo \"Could not initialize $EBS_DEVICE for more than 5 minutes. Exiting ...\"\u003e\u003e \"$LOG_FILE\"\n        exit 1\n    fi\ndone\n\n# Check if EBS storage exists\nif [ -b \"$EBS_DEVICE\" ];\nthen\n        # Check if we already have a filesystem on $EBS_DEVICE. If not create one.\n        if [[ $(file -s \"$EBS_DEVICE\") == \"$EBS_DEVICE: data\" ]];\n        then\n                ERR=$(mkfs -t xfs \"$EBS_DEVICE\" 2\u003e\u00261 \u003e /dev/null)\n                [ $? -eq 0 ] \u0026\u0026 echo \"EBS volume successfuly formated\" \u003e\u003e \"$LOG_FILE\" || echo \"Error formating EBS volume. ERR: $ERR\" \u003e\u003e \"$LOG_FILE\"\n        else\n                echo \"$EBS_DEVICE already has a file system! Skipping... \"\u003e\u003e \"$LOG_FILE\"\n        fi\n        # If block ebs device exists and it has a filesystem, check if it is mounted and mount if it is not already mounted\n        if grep -qs \"$EBS_DEVICE\" /proc/mounts;\n        then\n                echo \"EBS Volume already mounted. Skipping...\" \u003e\u003e \"$LOG_FILE\"\n        else\n                # Mount EBS volume\n                mount \"$EBS_DEVICE\" \"$DATA_FOLDER\"\n                [ $? -eq 0 ] \u0026\u0026 echo \"EBS Volume successfuly mounted!\" \u003e\u003e \"$LOG_FILE\"\n                ## Edit fstab\n                echo \"$EBS_DEVICE   $DATA_FOLDER    xfs     defaults,nofail     0 2\" \u003e\u003e /etc/fstab\n                [ $? -eq 0 ] \u0026\u0026 echo \"Fstab successfuly edited. EBS Volume added.\" \u003e\u003e \"$LOG_FILE\" || echo \"Fstab EBS volume edit failed!\" \u003e\u003e \"$LOG_FILE\"\n                ## Set right permissions for ubuntu user\n                chown -R \"$LINUX_USER\". \"$DATA_FOLDER\"\n                [ $? -eq 0 ] \u0026\u0026 echo \"User permissions on $DATA_FOLDER set...\" \u003e\u003e $LOG_FILE || echo \"Could not set $DATA_FOLDER permissions!\"\n        fi\nelse\n        echo \"No EBS Volume detected! Check if it is attached and/or if it is mounted on $EBS_DEVICE\" \u003e\u003e \"$LOG_FILE\"\nfi\n\necho \"--------------------------------------------------------------\" \u003e\u003e \"$LOG_FILE\"\necho \"Getting polygon-edge binary ...\" \u003e\u003e \"$LOG_FILE\"\n\n# wait for system to fully boot\nsleep 60\n\n\n# get polygon-edge binary from github releases\nsudo apt update \u0026\u0026 sudo apt install -y jq\nmkdir /tmp/polygon-edge\nwget -q -O /tmp/polygon-edge/polygon-edge.tar.gz \"$(curl -s https://api.github.com/repos/0xPolygon/polygon-edge/releases/latest | jq .assets[3].browser_download_url  | tr -d '\"')\"\ntar -xvf /tmp/polygon-edge/polygon-edge.tar.gz -C /tmp/polygon-edge\nsudo mv /tmp/polygon-edge/polygon-edge /usr/local/bin/\nrm -R /tmp/polygon-edge\n\n# install awscli so that we can call Lambda function\nsudo apt update \u0026\u0026 sudo apt install -y awscli\n\n# create json lambda query\njsonLambda=$(cat \u003c\u003cEOF\n{\n  \"config\": {\n\t  \"aws_region\": \"$ASSM_REGION\",\n\t  \"s3_bucket_name\": \"${s3_bucket_name}\",\n\t  \"s3_key_name\": \"${s3_key_name}\",\n\n    \"premine\": \"${premine}\",\n    \"chain_name\": \"${chain_name}\",\n\t  \"chain_id\": \"${chain_id}\",\n\t  \"pos\": ${pos},\n\t  \"epoch_size\": \"${epoch_size}\",\n\t  \"block_gas_limit\": \"${block_gas_limit}\",\n\t  \"max_validator_count\": \"${max_validator_count}\",\n\t  \"min_validator_count\": \"${min_validator_count}\",\n\t  \"consensus\": \"${consensus}\"\n  },\n  \"nodes\": {\n\t  \"total\": $TOTAL_NODES,\n\t  \"node_info\": {\n      \"ssm_param_id\": \"${assm_path}\",\n        \"node_name\": \"$NODE_NAME\",\n        \"ip\": \"$IP\"\n\t  }\n  }\n}\nEOF\n)\n\necho \"--------------------------------------------------------------\" \u003e\u003e \"$LOG_FILE\"\necho \"System init complete. Starting node initialization ...\" \u003e\u003e \"$LOG_FILE\"\n\n# Check if data folder is empty\nif [ \"$(ls -A \"$DATA_FOLDER\")\" ]; then\n        echo \"Files in data dir found. Skipping Polygon edge initialization...\" \u003e\u003e \"$LOG_FILE\"\nelse\n        echo \"Starting node initialization\" \u003e\u003e \"$LOG_FILE\"\n        /usr/local/bin/polygon-edge secrets generate --type aws-ssm --name \"$NODE_NAME\" --extra region=\"$ASSM_REGION\",ssm-parameter-path=\"$ASSM_PARAM_PATH\" --dir \"$DATA_FOLDER/secretsConfig.json\"\n        POLYGON=$(/usr/local/bin/polygon-edge secrets init --config \"$DATA_FOLDER\"/secretsConfig.json --json 2\u003e\u00261)\n        # Check if everything went ok\n        if [ $? -eq 0 ]; then\n            echo \"Starting lambda function\" \u003e\u003e \"$LOG_FILE\"\n            aws lambda invoke --function-name \"${lambda_function_name}\" --region \"$ASSM_REGION\" --payload \"$jsonLambda\" \"$LOGS_FOLDER/lambda.json\"\n        else\n                echo \"The initialization of polygon edge failed. Check log @ $LOG_FILE\" \u003e\u003e \"$LOG_FILE\"\n                echo \"$POLYGON\" \u003e\u003e \"$LOG_FILE\"\n        fi\nfi\n\nchown -R \"$LINUX_USER\". \"$POLYGON_FOLDER\"\n\necho \"ALL DONE!\" \u003e\u003e \"$LOG_FILE\"\necho \"-------- Finished on: $(date)  ----------\" \u003e\u003e \"$LOG_FILE\"\nexit 0",
            "vars": {
              "assm_path": "polygon-edge-validators",
              "assm_region": "us-west-2",
              "block_gas_limit": "",
              "chain_id": "",
              "chain_name": "",
              "consensus": "",
              "ebs_device": "/dev/nvme1n1",
              "epoch_size": "",
              "lambda_function_name": "polygon-edge-init",
              "max_validator_count": "",
              "min_validator_count": "",
              "node_name": "node-us-west-2d",
              "polygon_edge_dir": "/home/ubuntu/polygon",
              "pos": "false",
              "premine": "100",
              "s3_bucket_name": "polygon-edge-shared-20221123172544133800000005",
              "s3_key_name": "chain-config",
              "total_nodes": "4"
            }
          },
          "sensitive_attributes": []
        }
      ]
    },
    {
      "module": "module.test-main.module.user_data[\"3\"]",
      "mode": "data",
      "type": "template_file",
      "name": "polygon_edge_server",
      "provider": "provider[\"registry.terraform.io/hashicorp/template\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "filename": null,
            "id": "1fcdf916dcc7008b4f87dc13fd3b4e498aad1369cbcda5a083d814948e9d83a8",
            "rendered": "#!/bin/bash\r\nDATA_DIR=\"/home/ubuntu/polygon/data\"\r\nSECRETS_FILE=\"$DATA_DIR/secretsConfig.json\"\r\nGENESIS_FILE=\"$DATA_DIR/genesis.json\"\r\nS3_GENESIS=\"polygon-edge-shared-20221123172544133800000005/genesis.json\"\r\nLOG_FILE=\"/home/ubuntu/polygon/logs/edge-server.log\"\r\n\r\n# install awscli so that we can fetch genesis.json\r\nsudo apt update \u0026\u0026 sudo apt install -y awscli\r\n\r\n# wait untill genesis.json is found in the S3 bucket\r\nwhile ! aws s3 ls polygon-edge-shared-20221123172544133800000005 | grep genesis.json \u003e /dev/null;\r\ndo\r\n  echo \"Waiting for genesis.json to appear in S3 bucket...\"\r\n  sleep 10\r\ndone\r\n\r\n# we found genesis.json, now we download it to data folder\r\naws s3 cp s3://$S3_GENESIS $DATA_DIR\r\n\r\n\r\n# Create polygon-edge service and start it after genesis.json file is detected\r\ncat \u003e /etc/systemd/system/polygon_genesis.target \u003c\u003c EOF\r\n# check if genesys.json exists\r\n[Unit]\r\nTimeoutStartSec=infinity\r\nConditionPathExists=$GENESIS_FILE\r\nExecStart=/usr/bin/sleep 5\r\nRemainAfterExit=yes\r\nEOF\r\n\r\n## TODO make server options customisable\r\ncat \u003e /etc/systemd/system/polygon-edge.service \u003c\u003c EOF\r\n[Unit]\r\nDescription=Polygon Edge Server\r\nAfter=network.target polygon_genesis.target\r\nWants=polygon_genesis.target\r\nStartLimitIntervalSec=0\r\n\r\n[Service]\r\nType=simple\r\nRestart=always\r\nRestartSec=10\r\nUser=ubuntu\r\nStandardOutput=syslog\r\nStandardError=file:$LOG_FILE\r\nExecStartPre=/bin/bash -c \"sudo rm $LOG_FILE\"\r\nExecStart=/usr/local/bin/polygon-edge server --data-dir $DATA_DIR --chain $GENESIS_FILE --libp2p 0.0.0.0:1478 --grpc-address 0.0.0.0:9632 --secrets-config $SECRETS_FILE --seal SERVER_OPTIONS\r\n\r\n[Install]\r\nWantedBy=multi-user.target\r\nEOF\r\n\r\n#### customise server options\r\n\r\n# enable Prometheus API\r\nif [ \"\" != \"\" ]; then\r\n  prometheus=\"--prometheus \"\r\nfi\r\n\r\n# set block gas limit\r\nif [ \"\" != \"\" ]; then\r\n  block_gas_target=\"--block-gas-target \"\r\nfi\r\n\r\n# set nated address\r\nif [ \"\" != \"\" ]; then\r\n nat=\"--nat \"\r\nfi\r\n\r\n# set dns name\r\nif [ \"\" != \"\" ]; then\r\n dns_name=\"--dns \"\r\nfi\r\n\r\n# set price limit\r\nif [ \"\" != \"\" ]; then\r\n price_limit=\"--price-limit \"\r\nfi\r\n\r\n# set max slots\r\nif [ \"\" != \"\" ]; then\r\n max_slots=\"--max-slots \"\r\nfi\r\n\r\n# set block time in seconds\r\nif [ \"\" != \"\" ]; then\r\n  block_time=\"--block-time \"\r\nfi\r\n\r\n# set these parameters in service file\r\nsed -i \"s/SERVER_OPTIONS/$prometheus $block_gas_target $nat $dns $price_limit $max_slots $block_time/g\" /etc/systemd/system/polygon-edge.service\r\n\r\n# change ownership of the polygon folder to ubuntu user\r\nsudo chown -R ubuntu. /home/ubuntu/polygon\r\n\r\n# Enable polygon-edge on startup\r\nsudo /usr/bin/systemctl enable polygon-edge.service\r\n\r\n# Start polygon-edge service\r\nsudo /usr/bin/systemctl start polygon-edge.service",
            "template": "#!/bin/bash\r\nDATA_DIR=\"${polygon_edge_dir}/data\"\r\nSECRETS_FILE=\"$DATA_DIR/secretsConfig.json\"\r\nGENESIS_FILE=\"$DATA_DIR/genesis.json\"\r\nS3_GENESIS=\"${s3_bucket_name}/genesis.json\"\r\nLOG_FILE=\"${polygon_edge_dir}/logs/edge-server.log\"\r\n\r\n# install awscli so that we can fetch genesis.json\r\nsudo apt update \u0026\u0026 sudo apt install -y awscli\r\n\r\n# wait untill genesis.json is found in the S3 bucket\r\nwhile ! aws s3 ls ${s3_bucket_name} | grep genesis.json \u003e /dev/null;\r\ndo\r\n  echo \"Waiting for genesis.json to appear in S3 bucket...\"\r\n  sleep 10\r\ndone\r\n\r\n# we found genesis.json, now we download it to data folder\r\naws s3 cp s3://$S3_GENESIS $DATA_DIR\r\n\r\n\r\n# Create polygon-edge service and start it after genesis.json file is detected\r\ncat \u003e /etc/systemd/system/polygon_genesis.target \u003c\u003c EOF\r\n# check if genesys.json exists\r\n[Unit]\r\nTimeoutStartSec=infinity\r\nConditionPathExists=$GENESIS_FILE\r\nExecStart=/usr/bin/sleep 5\r\nRemainAfterExit=yes\r\nEOF\r\n\r\n## TODO make server options customisable\r\ncat \u003e /etc/systemd/system/polygon-edge.service \u003c\u003c EOF\r\n[Unit]\r\nDescription=Polygon Edge Server\r\nAfter=network.target polygon_genesis.target\r\nWants=polygon_genesis.target\r\nStartLimitIntervalSec=0\r\n\r\n[Service]\r\nType=simple\r\nRestart=always\r\nRestartSec=10\r\nUser=ubuntu\r\nStandardOutput=syslog\r\nStandardError=file:$LOG_FILE\r\nExecStartPre=/bin/bash -c \"sudo rm $LOG_FILE\"\r\nExecStart=/usr/local/bin/polygon-edge server --data-dir $DATA_DIR --chain $GENESIS_FILE --libp2p 0.0.0.0:1478 --grpc-address 0.0.0.0:9632 --secrets-config $SECRETS_FILE --seal SERVER_OPTIONS\r\n\r\n[Install]\r\nWantedBy=multi-user.target\r\nEOF\r\n\r\n#### customise server options\r\n\r\n# enable Prometheus API\r\nif [ \"${prometheus_address}\" != \"\" ]; then\r\n  prometheus=\"--prometheus ${prometheus_address}\"\r\nfi\r\n\r\n# set block gas limit\r\nif [ \"${block_gas_target}\" != \"\" ]; then\r\n  block_gas_target=\"--block-gas-target ${block_gas_target}\"\r\nfi\r\n\r\n# set nated address\r\nif [ \"${nat_address}\" != \"\" ]; then\r\n nat=\"--nat ${nat_address}\"\r\nfi\r\n\r\n# set dns name\r\nif [ \"${dns_name}\" != \"\" ]; then\r\n dns_name=\"--dns ${dns_name}\"\r\nfi\r\n\r\n# set price limit\r\nif [ \"${price_limit}\" != \"\" ]; then\r\n price_limit=\"--price-limit ${price_limit}\"\r\nfi\r\n\r\n# set max slots\r\nif [ \"${max_slots}\" != \"\" ]; then\r\n max_slots=\"--max-slots ${max_slots}\"\r\nfi\r\n\r\n# set block time in seconds\r\nif [ \"${block_time}\" != \"\" ]; then\r\n  block_time=\"--block-time ${block_time}\"\r\nfi\r\n\r\n# set these parameters in service file\r\nsed -i \"s/SERVER_OPTIONS/$prometheus $block_gas_target $nat $dns $price_limit $max_slots $block_time/g\" /etc/systemd/system/polygon-edge.service\r\n\r\n# change ownership of the polygon folder to ubuntu user\r\nsudo chown -R ubuntu. ${polygon_edge_dir}\r\n\r\n# Enable polygon-edge on startup\r\nsudo /usr/bin/systemctl enable polygon-edge.service\r\n\r\n# Start polygon-edge service\r\nsudo /usr/bin/systemctl start polygon-edge.service",
            "vars": {
              "block_gas_target": "",
              "block_time": "",
              "dns_name": "",
              "max_slots": "",
              "nat_address": "",
              "polygon_edge_dir": "/home/ubuntu/polygon",
              "price_limit": "",
              "prometheus_address": "",
              "s3_bucket_name": "polygon-edge-shared-20221123172544133800000005"
            }
          },
          "sensitive_attributes": []
        }
      ]
    },
    {
      "module": "module.test-main.module.vpc",
      "mode": "data",
      "type": "aws_availability_zones",
      "name": "current",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "all_availability_zones": null,
            "exclude_names": null,
            "exclude_zone_ids": null,
            "filter": null,
            "group_names": [
              "us-west-2"
            ],
            "id": "us-west-2",
            "names": [
              "us-west-2a",
              "us-west-2b",
              "us-west-2c",
              "us-west-2d"
            ],
            "state": null,
            "timeouts": null,
            "zone_ids": [
              "usw2-az2",
              "usw2-az1",
              "usw2-az3",
              "usw2-az4"
            ]
          },
          "sensitive_attributes": []
        }
      ]
    },
    {
      "module": "module.test-main.module.vpc",
      "mode": "managed",
      "type": "aws_eip",
      "name": "nat",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "index_key": "us-west-2a",
          "schema_version": 0,
          "attributes": {
            "address": null,
            "allocation_id": "eipalloc-089c63a95ea3f9045",
            "associate_with_private_ip": null,
            "association_id": "",
            "carrier_ip": "",
            "customer_owned_ip": "",
            "customer_owned_ipv4_pool": "",
            "domain": "vpc",
            "id": "eipalloc-089c63a95ea3f9045",
            "instance": "",
            "network_border_group": "us-west-2",
            "network_interface": "",
            "private_dns": null,
            "private_ip": "",
            "public_dns": "ec2-44-237-176-125.us-west-2.compute.amazonaws.com",
            "public_ip": "44.237.176.125",
            "public_ipv4_pool": "amazon",
            "tags": {
              "Name": "nat-public-us-west-2a"
            },
            "tags_all": {
              "Name": "nat-public-us-west-2a"
            },
            "timeouts": null,
            "vpc": true
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiZGVsZXRlIjoxODAwMDAwMDAwMDAsInJlYWQiOjkwMDAwMDAwMDAwMCwidXBkYXRlIjozMDAwMDAwMDAwMDB9fQ==",
          "dependencies": [
            "module.test-main.module.vpc.data.aws_availability_zones.current",
            "module.test-main.module.vpc.data.aws_vpc_ipam_preview_next_cidr.main"
          ]
        },
        {
          "index_key": "us-west-2b",
          "schema_version": 0,
          "attributes": {
            "address": null,
            "allocation_id": "eipalloc-0b61248de341d8dc5",
            "associate_with_private_ip": null,
            "association_id": "",
            "carrier_ip": "",
            "customer_owned_ip": "",
            "customer_owned_ipv4_pool": "",
            "domain": "vpc",
            "id": "eipalloc-0b61248de341d8dc5",
            "instance": "",
            "network_border_group": "us-west-2",
            "network_interface": "",
            "private_dns": null,
            "private_ip": "",
            "public_dns": "ec2-44-232-193-158.us-west-2.compute.amazonaws.com",
            "public_ip": "44.232.193.158",
            "public_ipv4_pool": "amazon",
            "tags": {
              "Name": "nat-public-us-west-2b"
            },
            "tags_all": {
              "Name": "nat-public-us-west-2b"
            },
            "timeouts": null,
            "vpc": true
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiZGVsZXRlIjoxODAwMDAwMDAwMDAsInJlYWQiOjkwMDAwMDAwMDAwMCwidXBkYXRlIjozMDAwMDAwMDAwMDB9fQ==",
          "dependencies": [
            "module.test-main.module.vpc.data.aws_availability_zones.current",
            "module.test-main.module.vpc.data.aws_vpc_ipam_preview_next_cidr.main"
          ]
        },
        {
          "index_key": "us-west-2c",
          "schema_version": 0,
          "attributes": {
            "address": null,
            "allocation_id": "eipalloc-097da84e3bef1e96d",
            "associate_with_private_ip": null,
            "association_id": "",
            "carrier_ip": "",
            "customer_owned_ip": "",
            "customer_owned_ipv4_pool": "",
            "domain": "vpc",
            "id": "eipalloc-097da84e3bef1e96d",
            "instance": "",
            "network_border_group": "us-west-2",
            "network_interface": "",
            "private_dns": null,
            "private_ip": "",
            "public_dns": "ec2-34-211-152-158.us-west-2.compute.amazonaws.com",
            "public_ip": "34.211.152.158",
            "public_ipv4_pool": "amazon",
            "tags": {
              "Name": "nat-public-us-west-2c"
            },
            "tags_all": {
              "Name": "nat-public-us-west-2c"
            },
            "timeouts": null,
            "vpc": true
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiZGVsZXRlIjoxODAwMDAwMDAwMDAsInJlYWQiOjkwMDAwMDAwMDAwMCwidXBkYXRlIjozMDAwMDAwMDAwMDB9fQ==",
          "dependencies": [
            "module.test-main.module.vpc.data.aws_availability_zones.current",
            "module.test-main.module.vpc.data.aws_vpc_ipam_preview_next_cidr.main"
          ]
        },
        {
          "index_key": "us-west-2d",
          "schema_version": 0,
          "attributes": {
            "address": null,
            "allocation_id": "eipalloc-0b8c88c820826f1cf",
            "associate_with_private_ip": null,
            "association_id": "",
            "carrier_ip": "",
            "customer_owned_ip": "",
            "customer_owned_ipv4_pool": "",
            "domain": "vpc",
            "id": "eipalloc-0b8c88c820826f1cf",
            "instance": "",
            "network_border_group": "us-west-2",
            "network_interface": "",
            "private_dns": null,
            "private_ip": "",
            "public_dns": "ec2-52-10-87-237.us-west-2.compute.amazonaws.com",
            "public_ip": "52.10.87.237",
            "public_ipv4_pool": "amazon",
            "tags": {
              "Name": "nat-public-us-west-2d"
            },
            "tags_all": {
              "Name": "nat-public-us-west-2d"
            },
            "timeouts": null,
            "vpc": true
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiZGVsZXRlIjoxODAwMDAwMDAwMDAsInJlYWQiOjkwMDAwMDAwMDAwMCwidXBkYXRlIjozMDAwMDAwMDAwMDB9fQ==",
          "dependencies": [
            "module.test-main.module.vpc.data.aws_availability_zones.current",
            "module.test-main.module.vpc.data.aws_vpc_ipam_preview_next_cidr.main"
          ]
        }
      ]
    },
    {
      "module": "module.test-main.module.vpc",
      "mode": "managed",
      "type": "aws_internet_gateway",
      "name": "main",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "index_key": 0,
          "schema_version": 0,
          "attributes": {
            "arn": "arn:aws:ec2:us-west-2:897347591745:internet-gateway/igw-0df3ff70012a79c44",
            "id": "igw-0df3ff70012a79c44",
            "owner_id": "897347591745",
            "tags": {
              "Name": "polygon-edge-vpc"
            },
            "tags_all": {
              "Name": "polygon-edge-vpc"
            },
            "timeouts": null,
            "vpc_id": "vpc-07e09592f822fc612"
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjoxMjAwMDAwMDAwMDAwLCJkZWxldGUiOjEyMDAwMDAwMDAwMDAsInVwZGF0ZSI6MTIwMDAwMDAwMDAwMH19",
          "dependencies": [
            "module.test-main.module.vpc.aws_vpc.main",
            "module.test-main.module.vpc.data.aws_availability_zones.current",
            "module.test-main.module.vpc.data.aws_vpc_ipam_preview_next_cidr.main",
            "module.test-main.module.vpc.data.awscc_ec2_vpc.main"
          ]
        }
      ]
    },
    {
      "module": "module.test-main.module.vpc",
      "mode": "managed",
      "type": "aws_nat_gateway",
      "name": "main",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "index_key": "us-west-2a",
          "schema_version": 0,
          "attributes": {
            "allocation_id": "eipalloc-089c63a95ea3f9045",
            "connectivity_type": "public",
            "id": "nat-0ed4eb3a1874a2606",
            "network_interface_id": "eni-06f85155cda96fbf4",
            "private_ip": "10.250.4.214",
            "public_ip": "44.237.176.125",
            "subnet_id": "subnet-0d48961594339d9c4",
            "tags": {
              "Name": "nat-public-us-west-2a"
            },
            "tags_all": {
              "Name": "nat-public-us-west-2a"
            }
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "module.test-main.module.vpc.aws_eip.nat",
            "module.test-main.module.vpc.aws_internet_gateway.main",
            "module.test-main.module.vpc.aws_subnet.public",
            "module.test-main.module.vpc.aws_vpc.main",
            "module.test-main.module.vpc.data.aws_availability_zones.current",
            "module.test-main.module.vpc.data.aws_vpc_ipam_preview_next_cidr.main",
            "module.test-main.module.vpc.data.awscc_ec2_vpc.main"
          ]
        },
        {
          "index_key": "us-west-2b",
          "schema_version": 0,
          "attributes": {
            "allocation_id": "eipalloc-0b61248de341d8dc5",
            "connectivity_type": "public",
            "id": "nat-0c6b1807add6ccd39",
            "network_interface_id": "eni-0318c3c79edffbf7b",
            "private_ip": "10.250.5.10",
            "public_ip": "44.232.193.158",
            "subnet_id": "subnet-01f1d9f368e1727b5",
            "tags": {
              "Name": "nat-public-us-west-2b"
            },
            "tags_all": {
              "Name": "nat-public-us-west-2b"
            }
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "module.test-main.module.vpc.aws_eip.nat",
            "module.test-main.module.vpc.aws_internet_gateway.main",
            "module.test-main.module.vpc.aws_subnet.public",
            "module.test-main.module.vpc.aws_vpc.main",
            "module.test-main.module.vpc.data.aws_availability_zones.current",
            "module.test-main.module.vpc.data.aws_vpc_ipam_preview_next_cidr.main",
            "module.test-main.module.vpc.data.awscc_ec2_vpc.main"
          ]
        },
        {
          "index_key": "us-west-2c",
          "schema_version": 0,
          "attributes": {
            "allocation_id": "eipalloc-097da84e3bef1e96d",
            "connectivity_type": "public",
            "id": "nat-0004078d153520dc2",
            "network_interface_id": "eni-0b47cd848dba32ceb",
            "private_ip": "10.250.6.82",
            "public_ip": "34.211.152.158",
            "subnet_id": "subnet-0f5298afee86ec355",
            "tags": {
              "Name": "nat-public-us-west-2c"
            },
            "tags_all": {
              "Name": "nat-public-us-west-2c"
            }
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "module.test-main.module.vpc.aws_eip.nat",
            "module.test-main.module.vpc.aws_internet_gateway.main",
            "module.test-main.module.vpc.aws_subnet.public",
            "module.test-main.module.vpc.aws_vpc.main",
            "module.test-main.module.vpc.data.aws_availability_zones.current",
            "module.test-main.module.vpc.data.aws_vpc_ipam_preview_next_cidr.main",
            "module.test-main.module.vpc.data.awscc_ec2_vpc.main"
          ]
        },
        {
          "index_key": "us-west-2d",
          "schema_version": 0,
          "attributes": {
            "allocation_id": "eipalloc-0b8c88c820826f1cf",
            "connectivity_type": "public",
            "id": "nat-0e38779912c84dd6a",
            "network_interface_id": "eni-0346396d90b73973e",
            "private_ip": "10.250.7.183",
            "public_ip": "52.10.87.237",
            "subnet_id": "subnet-01702216d0cbcc097",
            "tags": {
              "Name": "nat-public-us-west-2d"
            },
            "tags_all": {
              "Name": "nat-public-us-west-2d"
            }
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "module.test-main.module.vpc.aws_eip.nat",
            "module.test-main.module.vpc.aws_internet_gateway.main",
            "module.test-main.module.vpc.aws_subnet.public",
            "module.test-main.module.vpc.aws_vpc.main",
            "module.test-main.module.vpc.data.aws_availability_zones.current",
            "module.test-main.module.vpc.data.aws_vpc_ipam_preview_next_cidr.main",
            "module.test-main.module.vpc.data.awscc_ec2_vpc.main"
          ]
        }
      ]
    },
    {
      "module": "module.test-main.module.vpc",
      "mode": "managed",
      "type": "aws_route",
      "name": "private_to_nat",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "index_key": "us-west-2a",
          "schema_version": 0,
          "attributes": {
            "carrier_gateway_id": "",
            "core_network_arn": "",
            "destination_cidr_block": "0.0.0.0/0",
            "destination_ipv6_cidr_block": "",
            "destination_prefix_list_id": "",
            "egress_only_gateway_id": "",
            "gateway_id": "",
            "id": "r-rtb-007b51cc21747f5b11080289494",
            "instance_id": "",
            "instance_owner_id": "",
            "local_gateway_id": "",
            "nat_gateway_id": "nat-0ed4eb3a1874a2606",
            "network_interface_id": "",
            "origin": "CreateRoute",
            "route_table_id": "rtb-007b51cc21747f5b1",
            "state": "active",
            "timeouts": null,
            "transit_gateway_id": "",
            "vpc_endpoint_id": "",
            "vpc_peering_connection_id": ""
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjozMDAwMDAwMDAwMDAsImRlbGV0ZSI6MzAwMDAwMDAwMDAwLCJ1cGRhdGUiOjEyMDAwMDAwMDAwMH19",
          "dependencies": [
            "module.test-main.module.vpc.aws_eip.nat",
            "module.test-main.module.vpc.aws_internet_gateway.main",
            "module.test-main.module.vpc.aws_nat_gateway.main",
            "module.test-main.module.vpc.aws_subnet.public",
            "module.test-main.module.vpc.aws_vpc.main",
            "module.test-main.module.vpc.awscc_ec2_route_table.private",
            "module.test-main.module.vpc.data.aws_availability_zones.current",
            "module.test-main.module.vpc.data.aws_vpc_ipam_preview_next_cidr.main",
            "module.test-main.module.vpc.data.awscc_ec2_vpc.main"
          ]
        },
        {
          "index_key": "us-west-2b",
          "schema_version": 0,
          "attributes": {
            "carrier_gateway_id": "",
            "core_network_arn": "",
            "destination_cidr_block": "0.0.0.0/0",
            "destination_ipv6_cidr_block": "",
            "destination_prefix_list_id": "",
            "egress_only_gateway_id": "",
            "gateway_id": "",
            "id": "r-rtb-09a3833069ee0acb11080289494",
            "instance_id": "",
            "instance_owner_id": "",
            "local_gateway_id": "",
            "nat_gateway_id": "nat-0c6b1807add6ccd39",
            "network_interface_id": "",
            "origin": "CreateRoute",
            "route_table_id": "rtb-09a3833069ee0acb1",
            "state": "active",
            "timeouts": null,
            "transit_gateway_id": "",
            "vpc_endpoint_id": "",
            "vpc_peering_connection_id": ""
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjozMDAwMDAwMDAwMDAsImRlbGV0ZSI6MzAwMDAwMDAwMDAwLCJ1cGRhdGUiOjEyMDAwMDAwMDAwMH19",
          "dependencies": [
            "module.test-main.module.vpc.aws_eip.nat",
            "module.test-main.module.vpc.aws_internet_gateway.main",
            "module.test-main.module.vpc.aws_nat_gateway.main",
            "module.test-main.module.vpc.aws_subnet.public",
            "module.test-main.module.vpc.aws_vpc.main",
            "module.test-main.module.vpc.awscc_ec2_route_table.private",
            "module.test-main.module.vpc.data.aws_availability_zones.current",
            "module.test-main.module.vpc.data.aws_vpc_ipam_preview_next_cidr.main",
            "module.test-main.module.vpc.data.awscc_ec2_vpc.main"
          ]
        },
        {
          "index_key": "us-west-2c",
          "schema_version": 0,
          "attributes": {
            "carrier_gateway_id": "",
            "core_network_arn": "",
            "destination_cidr_block": "0.0.0.0/0",
            "destination_ipv6_cidr_block": "",
            "destination_prefix_list_id": "",
            "egress_only_gateway_id": "",
            "gateway_id": "",
            "id": "r-rtb-0a0ebc3e2ee714e441080289494",
            "instance_id": "",
            "instance_owner_id": "",
            "local_gateway_id": "",
            "nat_gateway_id": "nat-0004078d153520dc2",
            "network_interface_id": "",
            "origin": "CreateRoute",
            "route_table_id": "rtb-0a0ebc3e2ee714e44",
            "state": "active",
            "timeouts": null,
            "transit_gateway_id": "",
            "vpc_endpoint_id": "",
            "vpc_peering_connection_id": ""
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjozMDAwMDAwMDAwMDAsImRlbGV0ZSI6MzAwMDAwMDAwMDAwLCJ1cGRhdGUiOjEyMDAwMDAwMDAwMH19",
          "dependencies": [
            "module.test-main.module.vpc.aws_eip.nat",
            "module.test-main.module.vpc.aws_internet_gateway.main",
            "module.test-main.module.vpc.aws_nat_gateway.main",
            "module.test-main.module.vpc.aws_subnet.public",
            "module.test-main.module.vpc.aws_vpc.main",
            "module.test-main.module.vpc.awscc_ec2_route_table.private",
            "module.test-main.module.vpc.data.aws_availability_zones.current",
            "module.test-main.module.vpc.data.aws_vpc_ipam_preview_next_cidr.main",
            "module.test-main.module.vpc.data.awscc_ec2_vpc.main"
          ]
        },
        {
          "index_key": "us-west-2d",
          "schema_version": 0,
          "attributes": {
            "carrier_gateway_id": "",
            "core_network_arn": "",
            "destination_cidr_block": "0.0.0.0/0",
            "destination_ipv6_cidr_block": "",
            "destination_prefix_list_id": "",
            "egress_only_gateway_id": "",
            "gateway_id": "",
            "id": "r-rtb-09eb8423769363e6c1080289494",
            "instance_id": "",
            "instance_owner_id": "",
            "local_gateway_id": "",
            "nat_gateway_id": "nat-0e38779912c84dd6a",
            "network_interface_id": "",
            "origin": "CreateRoute",
            "route_table_id": "rtb-09eb8423769363e6c",
            "state": "active",
            "timeouts": null,
            "transit_gateway_id": "",
            "vpc_endpoint_id": "",
            "vpc_peering_connection_id": ""
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjozMDAwMDAwMDAwMDAsImRlbGV0ZSI6MzAwMDAwMDAwMDAwLCJ1cGRhdGUiOjEyMDAwMDAwMDAwMH19",
          "dependencies": [
            "module.test-main.module.vpc.aws_eip.nat",
            "module.test-main.module.vpc.aws_internet_gateway.main",
            "module.test-main.module.vpc.aws_nat_gateway.main",
            "module.test-main.module.vpc.aws_subnet.public",
            "module.test-main.module.vpc.aws_vpc.main",
            "module.test-main.module.vpc.awscc_ec2_route_table.private",
            "module.test-main.module.vpc.data.aws_availability_zones.current",
            "module.test-main.module.vpc.data.aws_vpc_ipam_preview_next_cidr.main",
            "module.test-main.module.vpc.data.awscc_ec2_vpc.main"
          ]
        }
      ]
    },
    {
      "module": "module.test-main.module.vpc",
      "mode": "managed",
      "type": "aws_route",
      "name": "public_to_igw",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "index_key": "us-west-2a",
          "schema_version": 0,
          "attributes": {
            "carrier_gateway_id": "",
            "core_network_arn": "",
            "destination_cidr_block": "0.0.0.0/0",
            "destination_ipv6_cidr_block": "",
            "destination_prefix_list_id": "",
            "egress_only_gateway_id": "",
            "gateway_id": "igw-0df3ff70012a79c44",
            "id": "r-rtb-0f3acd10009031df71080289494",
            "instance_id": "",
            "instance_owner_id": "",
            "local_gateway_id": "",
            "nat_gateway_id": "",
            "network_interface_id": "",
            "origin": "CreateRoute",
            "route_table_id": "rtb-0f3acd10009031df7",
            "state": "active",
            "timeouts": null,
            "transit_gateway_id": "",
            "vpc_endpoint_id": "",
            "vpc_peering_connection_id": ""
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjozMDAwMDAwMDAwMDAsImRlbGV0ZSI6MzAwMDAwMDAwMDAwLCJ1cGRhdGUiOjEyMDAwMDAwMDAwMH19",
          "dependencies": [
            "module.test-main.module.vpc.aws_internet_gateway.main",
            "module.test-main.module.vpc.aws_vpc.main",
            "module.test-main.module.vpc.awscc_ec2_route_table.public",
            "module.test-main.module.vpc.data.aws_availability_zones.current",
            "module.test-main.module.vpc.data.aws_vpc_ipam_preview_next_cidr.main",
            "module.test-main.module.vpc.data.awscc_ec2_vpc.main"
          ]
        },
        {
          "index_key": "us-west-2b",
          "schema_version": 0,
          "attributes": {
            "carrier_gateway_id": "",
            "core_network_arn": "",
            "destination_cidr_block": "0.0.0.0/0",
            "destination_ipv6_cidr_block": "",
            "destination_prefix_list_id": "",
            "egress_only_gateway_id": "",
            "gateway_id": "igw-0df3ff70012a79c44",
            "id": "r-rtb-0592d5fe2ec2dc15c1080289494",
            "instance_id": "",
            "instance_owner_id": "",
            "local_gateway_id": "",
            "nat_gateway_id": "",
            "network_interface_id": "",
            "origin": "CreateRoute",
            "route_table_id": "rtb-0592d5fe2ec2dc15c",
            "state": "active",
            "timeouts": null,
            "transit_gateway_id": "",
            "vpc_endpoint_id": "",
            "vpc_peering_connection_id": ""
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjozMDAwMDAwMDAwMDAsImRlbGV0ZSI6MzAwMDAwMDAwMDAwLCJ1cGRhdGUiOjEyMDAwMDAwMDAwMH19",
          "dependencies": [
            "module.test-main.module.vpc.aws_internet_gateway.main",
            "module.test-main.module.vpc.aws_vpc.main",
            "module.test-main.module.vpc.awscc_ec2_route_table.public",
            "module.test-main.module.vpc.data.aws_availability_zones.current",
            "module.test-main.module.vpc.data.aws_vpc_ipam_preview_next_cidr.main",
            "module.test-main.module.vpc.data.awscc_ec2_vpc.main"
          ]
        },
        {
          "index_key": "us-west-2c",
          "schema_version": 0,
          "attributes": {
            "carrier_gateway_id": "",
            "core_network_arn": "",
            "destination_cidr_block": "0.0.0.0/0",
            "destination_ipv6_cidr_block": "",
            "destination_prefix_list_id": "",
            "egress_only_gateway_id": "",
            "gateway_id": "igw-0df3ff70012a79c44",
            "id": "r-rtb-0c46f736abf9bbefb1080289494",
            "instance_id": "",
            "instance_owner_id": "",
            "local_gateway_id": "",
            "nat_gateway_id": "",
            "network_interface_id": "",
            "origin": "CreateRoute",
            "route_table_id": "rtb-0c46f736abf9bbefb",
            "state": "active",
            "timeouts": null,
            "transit_gateway_id": "",
            "vpc_endpoint_id": "",
            "vpc_peering_connection_id": ""
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjozMDAwMDAwMDAwMDAsImRlbGV0ZSI6MzAwMDAwMDAwMDAwLCJ1cGRhdGUiOjEyMDAwMDAwMDAwMH19",
          "dependencies": [
            "module.test-main.module.vpc.aws_internet_gateway.main",
            "module.test-main.module.vpc.aws_vpc.main",
            "module.test-main.module.vpc.awscc_ec2_route_table.public",
            "module.test-main.module.vpc.data.aws_availability_zones.current",
            "module.test-main.module.vpc.data.aws_vpc_ipam_preview_next_cidr.main",
            "module.test-main.module.vpc.data.awscc_ec2_vpc.main"
          ]
        },
        {
          "index_key": "us-west-2d",
          "schema_version": 0,
          "attributes": {
            "carrier_gateway_id": "",
            "core_network_arn": "",
            "destination_cidr_block": "0.0.0.0/0",
            "destination_ipv6_cidr_block": "",
            "destination_prefix_list_id": "",
            "egress_only_gateway_id": "",
            "gateway_id": "igw-0df3ff70012a79c44",
            "id": "r-rtb-0c2c7ba404c5931bd1080289494",
            "instance_id": "",
            "instance_owner_id": "",
            "local_gateway_id": "",
            "nat_gateway_id": "",
            "network_interface_id": "",
            "origin": "CreateRoute",
            "route_table_id": "rtb-0c2c7ba404c5931bd",
            "state": "active",
            "timeouts": null,
            "transit_gateway_id": "",
            "vpc_endpoint_id": "",
            "vpc_peering_connection_id": ""
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjozMDAwMDAwMDAwMDAsImRlbGV0ZSI6MzAwMDAwMDAwMDAwLCJ1cGRhdGUiOjEyMDAwMDAwMDAwMH19",
          "dependencies": [
            "module.test-main.module.vpc.aws_internet_gateway.main",
            "module.test-main.module.vpc.aws_vpc.main",
            "module.test-main.module.vpc.awscc_ec2_route_table.public",
            "module.test-main.module.vpc.data.aws_availability_zones.current",
            "module.test-main.module.vpc.data.aws_vpc_ipam_preview_next_cidr.main",
            "module.test-main.module.vpc.data.awscc_ec2_vpc.main"
          ]
        }
      ]
    },
    {
      "module": "module.test-main.module.vpc",
      "mode": "managed",
      "type": "aws_subnet",
      "name": "private",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "index_key": "us-west-2a",
          "schema_version": 1,
          "attributes": {
            "arn": "arn:aws:ec2:us-west-2:897347591745:subnet/subnet-0037bee82e69b1ad5",
            "assign_ipv6_address_on_creation": false,
            "availability_zone": "us-west-2a",
            "availability_zone_id": "usw2-az2",
            "cidr_block": "10.250.0.0/24",
            "customer_owned_ipv4_pool": "",
            "enable_dns64": false,
            "enable_resource_name_dns_a_record_on_launch": false,
            "enable_resource_name_dns_aaaa_record_on_launch": false,
            "id": "subnet-0037bee82e69b1ad5",
            "ipv6_cidr_block": "",
            "ipv6_cidr_block_association_id": "",
            "ipv6_native": false,
            "map_customer_owned_ip_on_launch": false,
            "map_public_ip_on_launch": false,
            "outpost_arn": "",
            "owner_id": "897347591745",
            "private_dns_hostname_type_on_launch": "ip-name",
            "tags": {
              "Name": "private-us-west-2a"
            },
            "tags_all": {
              "Name": "private-us-west-2a"
            },
            "timeouts": null,
            "vpc_id": "vpc-07e09592f822fc612"
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMDAsImRlbGV0ZSI6MTIwMDAwMDAwMDAwMH0sInNjaGVtYV92ZXJzaW9uIjoiMSJ9",
          "dependencies": [
            "module.test-main.module.vpc.aws_vpc.main",
            "module.test-main.module.vpc.aws_vpc_ipv4_cidr_block_association.secondary",
            "module.test-main.module.vpc.data.aws_availability_zones.current",
            "module.test-main.module.vpc.data.aws_vpc_ipam_preview_next_cidr.main",
            "module.test-main.module.vpc.data.awscc_ec2_vpc.main"
          ]
        },
        {
          "index_key": "us-west-2b",
          "schema_version": 1,
          "attributes": {
            "arn": "arn:aws:ec2:us-west-2:897347591745:subnet/subnet-06b9ebee4df3c4fa2",
            "assign_ipv6_address_on_creation": false,
            "availability_zone": "us-west-2b",
            "availability_zone_id": "usw2-az1",
            "cidr_block": "10.250.1.0/24",
            "customer_owned_ipv4_pool": "",
            "enable_dns64": false,
            "enable_resource_name_dns_a_record_on_launch": false,
            "enable_resource_name_dns_aaaa_record_on_launch": false,
            "id": "subnet-06b9ebee4df3c4fa2",
            "ipv6_cidr_block": "",
            "ipv6_cidr_block_association_id": "",
            "ipv6_native": false,
            "map_customer_owned_ip_on_launch": false,
            "map_public_ip_on_launch": false,
            "outpost_arn": "",
            "owner_id": "897347591745",
            "private_dns_hostname_type_on_launch": "ip-name",
            "tags": {
              "Name": "private-us-west-2b"
            },
            "tags_all": {
              "Name": "private-us-west-2b"
            },
            "timeouts": null,
            "vpc_id": "vpc-07e09592f822fc612"
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMDAsImRlbGV0ZSI6MTIwMDAwMDAwMDAwMH0sInNjaGVtYV92ZXJzaW9uIjoiMSJ9",
          "dependencies": [
            "module.test-main.module.vpc.aws_vpc.main",
            "module.test-main.module.vpc.aws_vpc_ipv4_cidr_block_association.secondary",
            "module.test-main.module.vpc.data.aws_availability_zones.current",
            "module.test-main.module.vpc.data.aws_vpc_ipam_preview_next_cidr.main",
            "module.test-main.module.vpc.data.awscc_ec2_vpc.main"
          ]
        },
        {
          "index_key": "us-west-2c",
          "schema_version": 1,
          "attributes": {
            "arn": "arn:aws:ec2:us-west-2:897347591745:subnet/subnet-0ba72a769a967726a",
            "assign_ipv6_address_on_creation": false,
            "availability_zone": "us-west-2c",
            "availability_zone_id": "usw2-az3",
            "cidr_block": "10.250.2.0/24",
            "customer_owned_ipv4_pool": "",
            "enable_dns64": false,
            "enable_resource_name_dns_a_record_on_launch": false,
            "enable_resource_name_dns_aaaa_record_on_launch": false,
            "id": "subnet-0ba72a769a967726a",
            "ipv6_cidr_block": "",
            "ipv6_cidr_block_association_id": "",
            "ipv6_native": false,
            "map_customer_owned_ip_on_launch": false,
            "map_public_ip_on_launch": false,
            "outpost_arn": "",
            "owner_id": "897347591745",
            "private_dns_hostname_type_on_launch": "ip-name",
            "tags": {
              "Name": "private-us-west-2c"
            },
            "tags_all": {
              "Name": "private-us-west-2c"
            },
            "timeouts": null,
            "vpc_id": "vpc-07e09592f822fc612"
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMDAsImRlbGV0ZSI6MTIwMDAwMDAwMDAwMH0sInNjaGVtYV92ZXJzaW9uIjoiMSJ9",
          "dependencies": [
            "module.test-main.module.vpc.aws_vpc.main",
            "module.test-main.module.vpc.aws_vpc_ipv4_cidr_block_association.secondary",
            "module.test-main.module.vpc.data.aws_availability_zones.current",
            "module.test-main.module.vpc.data.aws_vpc_ipam_preview_next_cidr.main",
            "module.test-main.module.vpc.data.awscc_ec2_vpc.main"
          ]
        },
        {
          "index_key": "us-west-2d",
          "schema_version": 1,
          "attributes": {
            "arn": "arn:aws:ec2:us-west-2:897347591745:subnet/subnet-05b131386b6ec3cb8",
            "assign_ipv6_address_on_creation": false,
            "availability_zone": "us-west-2d",
            "availability_zone_id": "usw2-az4",
            "cidr_block": "10.250.3.0/24",
            "customer_owned_ipv4_pool": "",
            "enable_dns64": false,
            "enable_resource_name_dns_a_record_on_launch": false,
            "enable_resource_name_dns_aaaa_record_on_launch": false,
            "id": "subnet-05b131386b6ec3cb8",
            "ipv6_cidr_block": "",
            "ipv6_cidr_block_association_id": "",
            "ipv6_native": false,
            "map_customer_owned_ip_on_launch": false,
            "map_public_ip_on_launch": false,
            "outpost_arn": "",
            "owner_id": "897347591745",
            "private_dns_hostname_type_on_launch": "ip-name",
            "tags": {
              "Name": "private-us-west-2d"
            },
            "tags_all": {
              "Name": "private-us-west-2d"
            },
            "timeouts": null,
            "vpc_id": "vpc-07e09592f822fc612"
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMDAsImRlbGV0ZSI6MTIwMDAwMDAwMDAwMH0sInNjaGVtYV92ZXJzaW9uIjoiMSJ9",
          "dependencies": [
            "module.test-main.module.vpc.aws_vpc.main",
            "module.test-main.module.vpc.aws_vpc_ipv4_cidr_block_association.secondary",
            "module.test-main.module.vpc.data.aws_availability_zones.current",
            "module.test-main.module.vpc.data.aws_vpc_ipam_preview_next_cidr.main",
            "module.test-main.module.vpc.data.awscc_ec2_vpc.main"
          ]
        }
      ]
    },
    {
      "module": "module.test-main.module.vpc",
      "mode": "managed",
      "type": "aws_subnet",
      "name": "public",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "index_key": "us-west-2a",
          "schema_version": 1,
          "attributes": {
            "arn": "arn:aws:ec2:us-west-2:897347591745:subnet/subnet-0d48961594339d9c4",
            "assign_ipv6_address_on_creation": false,
            "availability_zone": "us-west-2a",
            "availability_zone_id": "usw2-az2",
            "cidr_block": "10.250.4.0/24",
            "customer_owned_ipv4_pool": "",
            "enable_dns64": false,
            "enable_resource_name_dns_a_record_on_launch": false,
            "enable_resource_name_dns_aaaa_record_on_launch": false,
            "id": "subnet-0d48961594339d9c4",
            "ipv6_cidr_block": "",
            "ipv6_cidr_block_association_id": "",
            "ipv6_native": false,
            "map_customer_owned_ip_on_launch": false,
            "map_public_ip_on_launch": false,
            "outpost_arn": "",
            "owner_id": "897347591745",
            "private_dns_hostname_type_on_launch": "ip-name",
            "tags": {
              "Name": "public-us-west-2a"
            },
            "tags_all": {
              "Name": "public-us-west-2a"
            },
            "timeouts": null,
            "vpc_id": "vpc-07e09592f822fc612"
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMDAsImRlbGV0ZSI6MTIwMDAwMDAwMDAwMH0sInNjaGVtYV92ZXJzaW9uIjoiMSJ9",
          "dependencies": [
            "module.test-main.module.vpc.aws_vpc.main",
            "module.test-main.module.vpc.data.aws_availability_zones.current",
            "module.test-main.module.vpc.data.aws_vpc_ipam_preview_next_cidr.main",
            "module.test-main.module.vpc.data.awscc_ec2_vpc.main"
          ]
        },
        {
          "index_key": "us-west-2b",
          "schema_version": 1,
          "attributes": {
            "arn": "arn:aws:ec2:us-west-2:897347591745:subnet/subnet-01f1d9f368e1727b5",
            "assign_ipv6_address_on_creation": false,
            "availability_zone": "us-west-2b",
            "availability_zone_id": "usw2-az1",
            "cidr_block": "10.250.5.0/24",
            "customer_owned_ipv4_pool": "",
            "enable_dns64": false,
            "enable_resource_name_dns_a_record_on_launch": false,
            "enable_resource_name_dns_aaaa_record_on_launch": false,
            "id": "subnet-01f1d9f368e1727b5",
            "ipv6_cidr_block": "",
            "ipv6_cidr_block_association_id": "",
            "ipv6_native": false,
            "map_customer_owned_ip_on_launch": false,
            "map_public_ip_on_launch": false,
            "outpost_arn": "",
            "owner_id": "897347591745",
            "private_dns_hostname_type_on_launch": "ip-name",
            "tags": {
              "Name": "public-us-west-2b"
            },
            "tags_all": {
              "Name": "public-us-west-2b"
            },
            "timeouts": null,
            "vpc_id": "vpc-07e09592f822fc612"
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMDAsImRlbGV0ZSI6MTIwMDAwMDAwMDAwMH0sInNjaGVtYV92ZXJzaW9uIjoiMSJ9",
          "dependencies": [
            "module.test-main.module.vpc.aws_vpc.main",
            "module.test-main.module.vpc.data.aws_availability_zones.current",
            "module.test-main.module.vpc.data.aws_vpc_ipam_preview_next_cidr.main",
            "module.test-main.module.vpc.data.awscc_ec2_vpc.main"
          ]
        },
        {
          "index_key": "us-west-2c",
          "schema_version": 1,
          "attributes": {
            "arn": "arn:aws:ec2:us-west-2:897347591745:subnet/subnet-0f5298afee86ec355",
            "assign_ipv6_address_on_creation": false,
            "availability_zone": "us-west-2c",
            "availability_zone_id": "usw2-az3",
            "cidr_block": "10.250.6.0/24",
            "customer_owned_ipv4_pool": "",
            "enable_dns64": false,
            "enable_resource_name_dns_a_record_on_launch": false,
            "enable_resource_name_dns_aaaa_record_on_launch": false,
            "id": "subnet-0f5298afee86ec355",
            "ipv6_cidr_block": "",
            "ipv6_cidr_block_association_id": "",
            "ipv6_native": false,
            "map_customer_owned_ip_on_launch": false,
            "map_public_ip_on_launch": false,
            "outpost_arn": "",
            "owner_id": "897347591745",
            "private_dns_hostname_type_on_launch": "ip-name",
            "tags": {
              "Name": "public-us-west-2c"
            },
            "tags_all": {
              "Name": "public-us-west-2c"
            },
            "timeouts": null,
            "vpc_id": "vpc-07e09592f822fc612"
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMDAsImRlbGV0ZSI6MTIwMDAwMDAwMDAwMH0sInNjaGVtYV92ZXJzaW9uIjoiMSJ9",
          "dependencies": [
            "module.test-main.module.vpc.aws_vpc.main",
            "module.test-main.module.vpc.data.aws_availability_zones.current",
            "module.test-main.module.vpc.data.aws_vpc_ipam_preview_next_cidr.main",
            "module.test-main.module.vpc.data.awscc_ec2_vpc.main"
          ]
        },
        {
          "index_key": "us-west-2d",
          "schema_version": 1,
          "attributes": {
            "arn": "arn:aws:ec2:us-west-2:897347591745:subnet/subnet-01702216d0cbcc097",
            "assign_ipv6_address_on_creation": false,
            "availability_zone": "us-west-2d",
            "availability_zone_id": "usw2-az4",
            "cidr_block": "10.250.7.0/24",
            "customer_owned_ipv4_pool": "",
            "enable_dns64": false,
            "enable_resource_name_dns_a_record_on_launch": false,
            "enable_resource_name_dns_aaaa_record_on_launch": false,
            "id": "subnet-01702216d0cbcc097",
            "ipv6_cidr_block": "",
            "ipv6_cidr_block_association_id": "",
            "ipv6_native": false,
            "map_customer_owned_ip_on_launch": false,
            "map_public_ip_on_launch": false,
            "outpost_arn": "",
            "owner_id": "897347591745",
            "private_dns_hostname_type_on_launch": "ip-name",
            "tags": {
              "Name": "public-us-west-2d"
            },
            "tags_all": {
              "Name": "public-us-west-2d"
            },
            "timeouts": null,
            "vpc_id": "vpc-07e09592f822fc612"
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMDAsImRlbGV0ZSI6MTIwMDAwMDAwMDAwMH0sInNjaGVtYV92ZXJzaW9uIjoiMSJ9",
          "dependencies": [
            "module.test-main.module.vpc.aws_vpc.main",
            "module.test-main.module.vpc.data.aws_availability_zones.current",
            "module.test-main.module.vpc.data.aws_vpc_ipam_preview_next_cidr.main",
            "module.test-main.module.vpc.data.awscc_ec2_vpc.main"
          ]
        }
      ]
    },
    {
      "module": "module.test-main.module.vpc",
      "mode": "managed",
      "type": "aws_vpc",
      "name": "main",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "index_key": 0,
          "schema_version": 1,
          "attributes": {
            "arn": "arn:aws:ec2:us-west-2:897347591745:vpc/vpc-07e09592f822fc612",
            "assign_generated_ipv6_cidr_block": false,
            "cidr_block": "10.250.0.0/16",
            "default_network_acl_id": "acl-0408355632062fd96",
            "default_route_table_id": "rtb-0a3c5cc762b61eb50",
            "default_security_group_id": "sg-068db7dc50126c04d",
            "dhcp_options_id": "dopt-02e1b2308d5944527",
            "enable_classiclink": false,
            "enable_classiclink_dns_support": false,
            "enable_dns_hostnames": true,
            "enable_dns_support": true,
            "enable_network_address_usage_metrics": false,
            "id": "vpc-07e09592f822fc612",
            "instance_tenancy": "default",
            "ipv4_ipam_pool_id": null,
            "ipv4_netmask_length": null,
            "ipv6_association_id": "",
            "ipv6_cidr_block": "",
            "ipv6_cidr_block_network_border_group": "",
            "ipv6_ipam_pool_id": "",
            "ipv6_netmask_length": 0,
            "main_route_table_id": "rtb-0a3c5cc762b61eb50",
            "owner_id": "897347591745",
            "tags": {
              "Name": "polygon-edge-vpc"
            },
            "tags_all": {
              "Name": "polygon-edge-vpc"
            }
          },
          "sensitive_attributes": [],
          "private": "eyJzY2hlbWFfdmVyc2lvbiI6IjEifQ==",
          "dependencies": [
            "module.test-main.module.vpc.data.aws_vpc_ipam_preview_next_cidr.main"
          ]
        }
      ]
    },
    {
      "module": "module.test-main.module.vpc",
      "mode": "managed",
      "type": "awscc_ec2_route_table",
      "name": "private",
      "provider": "provider[\"registry.terraform.io/hashicorp/awscc\"]",
      "instances": [
        {
          "index_key": "us-west-2a",
          "schema_version": 1,
          "attributes": {
            "id": "rtb-007b51cc21747f5b1",
            "route_table_id": "rtb-007b51cc21747f5b1",
            "tags": [
              {
                "key": "Name",
                "value": "private-us-west-2a"
              }
            ],
            "vpc_id": "vpc-07e09592f822fc612"
          },
          "sensitive_attributes": [],
          "dependencies": [
            "module.test-main.module.vpc.aws_vpc.main",
            "module.test-main.module.vpc.data.aws_availability_zones.current",
            "module.test-main.module.vpc.data.aws_vpc_ipam_preview_next_cidr.main",
            "module.test-main.module.vpc.data.awscc_ec2_vpc.main"
          ]
        },
        {
          "index_key": "us-west-2b",
          "schema_version": 1,
          "attributes": {
            "id": "rtb-09a3833069ee0acb1",
            "route_table_id": "rtb-09a3833069ee0acb1",
            "tags": [
              {
                "key": "Name",
                "value": "private-us-west-2b"
              }
            ],
            "vpc_id": "vpc-07e09592f822fc612"
          },
          "sensitive_attributes": [],
          "dependencies": [
            "module.test-main.module.vpc.aws_vpc.main",
            "module.test-main.module.vpc.data.aws_availability_zones.current",
            "module.test-main.module.vpc.data.aws_vpc_ipam_preview_next_cidr.main",
            "module.test-main.module.vpc.data.awscc_ec2_vpc.main"
          ]
        },
        {
          "index_key": "us-west-2c",
          "schema_version": 1,
          "attributes": {
            "id": "rtb-0a0ebc3e2ee714e44",
            "route_table_id": "rtb-0a0ebc3e2ee714e44",
            "tags": [
              {
                "key": "Name",
                "value": "private-us-west-2c"
              }
            ],
            "vpc_id": "vpc-07e09592f822fc612"
          },
          "sensitive_attributes": [],
          "dependencies": [
            "module.test-main.module.vpc.aws_vpc.main",
            "module.test-main.module.vpc.data.aws_availability_zones.current",
            "module.test-main.module.vpc.data.aws_vpc_ipam_preview_next_cidr.main",
            "module.test-main.module.vpc.data.awscc_ec2_vpc.main"
          ]
        },
        {
          "index_key": "us-west-2d",
          "schema_version": 1,
          "attributes": {
            "id": "rtb-09eb8423769363e6c",
            "route_table_id": "rtb-09eb8423769363e6c",
            "tags": [
              {
                "key": "Name",
                "value": "private-us-west-2d"
              }
            ],
            "vpc_id": "vpc-07e09592f822fc612"
          },
          "sensitive_attributes": [],
          "dependencies": [
            "module.test-main.module.vpc.aws_vpc.main",
            "module.test-main.module.vpc.data.aws_availability_zones.current",
            "module.test-main.module.vpc.data.aws_vpc_ipam_preview_next_cidr.main",
            "module.test-main.module.vpc.data.awscc_ec2_vpc.main"
          ]
        }
      ]
    },
    {
      "module": "module.test-main.module.vpc",
      "mode": "managed",
      "type": "awscc_ec2_route_table",
      "name": "public",
      "provider": "provider[\"registry.terraform.io/hashicorp/awscc\"]",
      "instances": [
        {
          "index_key": "us-west-2a",
          "schema_version": 1,
          "attributes": {
            "id": "rtb-0f3acd10009031df7",
            "route_table_id": "rtb-0f3acd10009031df7",
            "tags": [
              {
                "key": "Name",
                "value": "public-us-west-2a"
              }
            ],
            "vpc_id": "vpc-07e09592f822fc612"
          },
          "sensitive_attributes": [],
          "dependencies": [
            "module.test-main.module.vpc.aws_vpc.main",
            "module.test-main.module.vpc.data.aws_availability_zones.current",
            "module.test-main.module.vpc.data.aws_vpc_ipam_preview_next_cidr.main",
            "module.test-main.module.vpc.data.awscc_ec2_vpc.main"
          ]
        },
        {
          "index_key": "us-west-2b",
          "schema_version": 1,
          "attributes": {
            "id": "rtb-0592d5fe2ec2dc15c",
            "route_table_id": "rtb-0592d5fe2ec2dc15c",
            "tags": [
              {
                "key": "Name",
                "value": "public-us-west-2b"
              }
            ],
            "vpc_id": "vpc-07e09592f822fc612"
          },
          "sensitive_attributes": [],
          "dependencies": [
            "module.test-main.module.vpc.aws_vpc.main",
            "module.test-main.module.vpc.data.aws_availability_zones.current",
            "module.test-main.module.vpc.data.aws_vpc_ipam_preview_next_cidr.main",
            "module.test-main.module.vpc.data.awscc_ec2_vpc.main"
          ]
        },
        {
          "index_key": "us-west-2c",
          "schema_version": 1,
          "attributes": {
            "id": "rtb-0c46f736abf9bbefb",
            "route_table_id": "rtb-0c46f736abf9bbefb",
            "tags": [
              {
                "key": "Name",
                "value": "public-us-west-2c"
              }
            ],
            "vpc_id": "vpc-07e09592f822fc612"
          },
          "sensitive_attributes": [],
          "dependencies": [
            "module.test-main.module.vpc.aws_vpc.main",
            "module.test-main.module.vpc.data.aws_availability_zones.current",
            "module.test-main.module.vpc.data.aws_vpc_ipam_preview_next_cidr.main",
            "module.test-main.module.vpc.data.awscc_ec2_vpc.main"
          ]
        },
        {
          "index_key": "us-west-2d",
          "schema_version": 1,
          "attributes": {
            "id": "rtb-0c2c7ba404c5931bd",
            "route_table_id": "rtb-0c2c7ba404c5931bd",
            "tags": [
              {
                "key": "Name",
                "value": "public-us-west-2d"
              }
            ],
            "vpc_id": "vpc-07e09592f822fc612"
          },
          "sensitive_attributes": [],
          "dependencies": [
            "module.test-main.module.vpc.aws_vpc.main",
            "module.test-main.module.vpc.data.aws_availability_zones.current",
            "module.test-main.module.vpc.data.aws_vpc_ipam_preview_next_cidr.main",
            "module.test-main.module.vpc.data.awscc_ec2_vpc.main"
          ]
        }
      ]
    },
    {
      "module": "module.test-main.module.vpc",
      "mode": "managed",
      "type": "awscc_ec2_subnet_route_table_association",
      "name": "private",
      "provider": "provider[\"registry.terraform.io/hashicorp/awscc\"]",
      "instances": [
        {
          "index_key": "us-west-2a",
          "schema_version": 1,
          "attributes": {
            "id": "rtbassoc-056c93e24ae4c30ea",
            "route_table_id": "rtb-007b51cc21747f5b1",
            "subnet_id": "subnet-0037bee82e69b1ad5"
          },
          "sensitive_attributes": [],
          "dependencies": [
            "module.test-main.module.vpc.aws_subnet.private",
            "module.test-main.module.vpc.aws_vpc.main",
            "module.test-main.module.vpc.aws_vpc_ipv4_cidr_block_association.secondary",
            "module.test-main.module.vpc.awscc_ec2_route_table.private",
            "module.test-main.module.vpc.data.aws_availability_zones.current",
            "module.test-main.module.vpc.data.aws_vpc_ipam_preview_next_cidr.main",
            "module.test-main.module.vpc.data.awscc_ec2_vpc.main"
          ]
        },
        {
          "index_key": "us-west-2b",
          "schema_version": 1,
          "attributes": {
            "id": "rtbassoc-0d29f38f38a713c18",
            "route_table_id": "rtb-09a3833069ee0acb1",
            "subnet_id": "subnet-06b9ebee4df3c4fa2"
          },
          "sensitive_attributes": [],
          "dependencies": [
            "module.test-main.module.vpc.aws_subnet.private",
            "module.test-main.module.vpc.aws_vpc.main",
            "module.test-main.module.vpc.aws_vpc_ipv4_cidr_block_association.secondary",
            "module.test-main.module.vpc.awscc_ec2_route_table.private",
            "module.test-main.module.vpc.data.aws_availability_zones.current",
            "module.test-main.module.vpc.data.aws_vpc_ipam_preview_next_cidr.main",
            "module.test-main.module.vpc.data.awscc_ec2_vpc.main"
          ]
        },
        {
          "index_key": "us-west-2c",
          "schema_version": 1,
          "attributes": {
            "id": "rtbassoc-05c546ed96cb254f0",
            "route_table_id": "rtb-0a0ebc3e2ee714e44",
            "subnet_id": "subnet-0ba72a769a967726a"
          },
          "sensitive_attributes": [],
          "dependencies": [
            "module.test-main.module.vpc.aws_subnet.private",
            "module.test-main.module.vpc.aws_vpc.main",
            "module.test-main.module.vpc.aws_vpc_ipv4_cidr_block_association.secondary",
            "module.test-main.module.vpc.awscc_ec2_route_table.private",
            "module.test-main.module.vpc.data.aws_availability_zones.current",
            "module.test-main.module.vpc.data.aws_vpc_ipam_preview_next_cidr.main",
            "module.test-main.module.vpc.data.awscc_ec2_vpc.main"
          ]
        },
        {
          "index_key": "us-west-2d",
          "schema_version": 1,
          "attributes": {
            "id": "rtbassoc-0dae86bc751b0064a",
            "route_table_id": "rtb-09eb8423769363e6c",
            "subnet_id": "subnet-05b131386b6ec3cb8"
          },
          "sensitive_attributes": [],
          "dependencies": [
            "module.test-main.module.vpc.aws_subnet.private",
            "module.test-main.module.vpc.aws_vpc.main",
            "module.test-main.module.vpc.aws_vpc_ipv4_cidr_block_association.secondary",
            "module.test-main.module.vpc.awscc_ec2_route_table.private",
            "module.test-main.module.vpc.data.aws_availability_zones.current",
            "module.test-main.module.vpc.data.aws_vpc_ipam_preview_next_cidr.main",
            "module.test-main.module.vpc.data.awscc_ec2_vpc.main"
          ]
        }
      ]
    },
    {
      "module": "module.test-main.module.vpc",
      "mode": "managed",
      "type": "awscc_ec2_subnet_route_table_association",
      "name": "public",
      "provider": "provider[\"registry.terraform.io/hashicorp/awscc\"]",
      "instances": [
        {
          "index_key": "us-west-2a",
          "schema_version": 1,
          "attributes": {
            "id": "rtbassoc-051beddae08786ed9",
            "route_table_id": "rtb-0f3acd10009031df7",
            "subnet_id": "subnet-0d48961594339d9c4"
          },
          "sensitive_attributes": [],
          "dependencies": [
            "module.test-main.module.vpc.aws_subnet.public",
            "module.test-main.module.vpc.aws_vpc.main",
            "module.test-main.module.vpc.awscc_ec2_route_table.public",
            "module.test-main.module.vpc.data.aws_availability_zones.current",
            "module.test-main.module.vpc.data.aws_vpc_ipam_preview_next_cidr.main",
            "module.test-main.module.vpc.data.awscc_ec2_vpc.main"
          ]
        },
        {
          "index_key": "us-west-2b",
          "schema_version": 1,
          "attributes": {
            "id": "rtbassoc-0486073e4f0808bd7",
            "route_table_id": "rtb-0592d5fe2ec2dc15c",
            "subnet_id": "subnet-01f1d9f368e1727b5"
          },
          "sensitive_attributes": [],
          "dependencies": [
            "module.test-main.module.vpc.aws_subnet.public",
            "module.test-main.module.vpc.aws_vpc.main",
            "module.test-main.module.vpc.awscc_ec2_route_table.public",
            "module.test-main.module.vpc.data.aws_availability_zones.current",
            "module.test-main.module.vpc.data.aws_vpc_ipam_preview_next_cidr.main",
            "module.test-main.module.vpc.data.awscc_ec2_vpc.main"
          ]
        },
        {
          "index_key": "us-west-2c",
          "schema_version": 1,
          "attributes": {
            "id": "rtbassoc-0516f42609bb18814",
            "route_table_id": "rtb-0c46f736abf9bbefb",
            "subnet_id": "subnet-0f5298afee86ec355"
          },
          "sensitive_attributes": [],
          "dependencies": [
            "module.test-main.module.vpc.aws_subnet.public",
            "module.test-main.module.vpc.aws_vpc.main",
            "module.test-main.module.vpc.awscc_ec2_route_table.public",
            "module.test-main.module.vpc.data.aws_availability_zones.current",
            "module.test-main.module.vpc.data.aws_vpc_ipam_preview_next_cidr.main",
            "module.test-main.module.vpc.data.awscc_ec2_vpc.main"
          ]
        },
        {
          "index_key": "us-west-2d",
          "schema_version": 1,
          "attributes": {
            "id": "rtbassoc-0d44fa2ef25e878e2",
            "route_table_id": "rtb-0c2c7ba404c5931bd",
            "subnet_id": "subnet-01702216d0cbcc097"
          },
          "sensitive_attributes": [],
          "dependencies": [
            "module.test-main.module.vpc.aws_subnet.public",
            "module.test-main.module.vpc.aws_vpc.main",
            "module.test-main.module.vpc.awscc_ec2_route_table.public",
            "module.test-main.module.vpc.data.aws_availability_zones.current",
            "module.test-main.module.vpc.data.aws_vpc_ipam_preview_next_cidr.main",
            "module.test-main.module.vpc.data.awscc_ec2_vpc.main"
          ]
        }
      ]
    },
    {
      "module": "module.test-main.module.vpc.module.flow_logs[0]",
      "mode": "managed",
      "type": "aws_flow_log",
      "name": "main",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "arn": "arn:aws:ec2:us-west-2:897347591745:vpc-flow-log/fl-015341bae66c4fe31",
            "destination_options": [],
            "eni_id": null,
            "iam_role_arn": "arn:aws:iam::897347591745:role/polygon-edge-vpc-cw-access-role-20221123172544131400000002",
            "id": "fl-015341bae66c4fe31",
            "log_destination": "arn:aws:logs:us-west-2:897347591745:log-group:polygon-edge-vpc-vpc-flow-logs-20221123172544131400000001",
            "log_destination_type": "cloud-watch-logs",
            "log_format": "${version} ${account-id} ${interface-id} ${srcaddr} ${dstaddr} ${srcport} ${dstport} ${protocol} ${packets} ${bytes} ${start} ${end} ${action} ${log-status}",
            "log_group_name": "polygon-edge-vpc-vpc-flow-logs-20221123172544131400000001",
            "max_aggregation_interval": 600,
            "subnet_id": null,
            "tags": {
              "Name": "polygon-edge-vpc"
            },
            "tags_all": {
              "Name": "polygon-edge-vpc"
            },
            "traffic_type": "ALL",
            "transit_gateway_attachment_id": null,
            "transit_gateway_id": null,
            "vpc_id": "vpc-07e09592f822fc612"
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "module.test-main.module.vpc.aws_vpc.main",
            "module.test-main.module.vpc.data.aws_vpc_ipam_preview_next_cidr.main",
            "module.test-main.module.vpc.data.awscc_ec2_vpc.main",
            "module.test-main.module.vpc.module.flow_logs.module.cloudwatch_log_group.aws_cloudwatch_log_group.main",
            "module.test-main.module.vpc.module.flow_logs.module.cloudwatch_log_group.aws_iam_role.main"
          ]
        }
      ]
    },
    {
      "module": "module.test-main.module.vpc.module.flow_logs[0].module.cloudwatch_log_group[0]",
      "mode": "data",
      "type": "aws_iam_policy_document",
      "name": "main",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "id": "2182999790",
            "json": "{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Sid\": \"PolygonEdgeVpcLogsToCW\",\n      \"Effect\": \"Allow\",\n      \"Action\": [\n        \"logs:PutLogEvents\",\n        \"logs:DescribeLogStreams\",\n        \"logs:DescribeLogGroups\",\n        \"logs:CreateLogStream\",\n        \"logs:CreateLogGroup\"\n      ],\n      \"Resource\": \"*\"\n    }\n  ]\n}",
            "override_json": null,
            "override_policy_documents": null,
            "policy_id": null,
            "source_json": null,
            "source_policy_documents": null,
            "statement": [
              {
                "actions": [
                  "logs:CreateLogGroup",
                  "logs:CreateLogStream",
                  "logs:DescribeLogGroups",
                  "logs:DescribeLogStreams",
                  "logs:PutLogEvents"
                ],
                "condition": [],
                "effect": "Allow",
                "not_actions": [],
                "not_principals": [],
                "not_resources": [],
                "principals": [],
                "resources": [
                  "*"
                ],
                "sid": "PolygonEdgeVpcLogsToCW"
              }
            ],
            "version": "2012-10-17"
          },
          "sensitive_attributes": []
        }
      ]
    },
    {
      "module": "module.test-main.module.vpc.module.flow_logs[0].module.cloudwatch_log_group[0]",
      "mode": "managed",
      "type": "aws_cloudwatch_log_group",
      "name": "main",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "arn": "arn:aws:logs:us-west-2:897347591745:log-group:polygon-edge-vpc-vpc-flow-logs-20221123172544131400000001",
            "id": "polygon-edge-vpc-vpc-flow-logs-20221123172544131400000001",
            "kms_key_id": "",
            "name": "polygon-edge-vpc-vpc-flow-logs-20221123172544131400000001",
            "name_prefix": "polygon-edge-vpc-vpc-flow-logs-",
            "retention_in_days": 180,
            "tags": null,
            "tags_all": {}
          },
          "sensitive_attributes": [],
          "private": "bnVsbA=="
        }
      ]
    },
    {
      "module": "module.test-main.module.vpc.module.flow_logs[0].module.cloudwatch_log_group[0]",
      "mode": "managed",
      "type": "aws_iam_policy",
      "name": "main",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "arn": "arn:aws:iam::897347591745:policy/polygon-edge-vpc-cw-access-policy-20221123172544132000000004",
            "description": "Cloudwatch permissions policy for polygon-edge-vpc with vpc-flow-logs",
            "id": "arn:aws:iam::897347591745:policy/polygon-edge-vpc-cw-access-policy-20221123172544132000000004",
            "name": "polygon-edge-vpc-cw-access-policy-20221123172544132000000004",
            "name_prefix": "polygon-edge-vpc-cw-access-policy-",
            "path": "/",
            "policy": "{\"Statement\":[{\"Action\":[\"logs:PutLogEvents\",\"logs:DescribeLogStreams\",\"logs:DescribeLogGroups\",\"logs:CreateLogStream\",\"logs:CreateLogGroup\"],\"Effect\":\"Allow\",\"Resource\":\"*\",\"Sid\":\"PolygonEdgeVpcLogsToCW\"}],\"Version\":\"2012-10-17\"}",
            "policy_id": "ANPA5B3QVTZARHHOACV5Y",
            "tags": null,
            "tags_all": {}
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "module.test-main.module.vpc.module.flow_logs.module.cloudwatch_log_group.data.aws_iam_policy_document.main"
          ]
        }
      ]
    },
    {
      "module": "module.test-main.module.vpc.module.flow_logs[0].module.cloudwatch_log_group[0]",
      "mode": "managed",
      "type": "aws_iam_role",
      "name": "main",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "arn": "arn:aws:iam::897347591745:role/polygon-edge-vpc-cw-access-role-20221123172544131400000002",
            "assume_role_policy": "{\"Statement\":[{\"Action\":\"sts:AssumeRole\",\"Effect\":\"Allow\",\"Principal\":{\"Service\":\"vpc-flow-logs.amazonaws.com\"},\"Sid\":\"PolygonEdgeVpcVpcFlowLogsCloudwatchTrust\"}],\"Version\":\"2012-10-17\"}",
            "create_date": "2022-11-23T17:25:45Z",
            "description": "Cloudwatch permissions role for polygon-edge-vpc with vpc-flow-logs",
            "force_detach_policies": false,
            "id": "polygon-edge-vpc-cw-access-role-20221123172544131400000002",
            "inline_policy": [],
            "managed_policy_arns": [],
            "max_session_duration": 3600,
            "name": "polygon-edge-vpc-cw-access-role-20221123172544131400000002",
            "name_prefix": "polygon-edge-vpc-cw-access-role-",
            "path": "/",
            "permissions_boundary": null,
            "tags": null,
            "tags_all": {},
            "unique_id": "AROA5B3QVTZAXXVUWOPMG"
          },
          "sensitive_attributes": [],
          "private": "bnVsbA=="
        }
      ]
    },
    {
      "module": "module.test-main.module.vpc.module.flow_logs[0].module.cloudwatch_log_group[0]",
      "mode": "managed",
      "type": "aws_iam_role_policy_attachment",
      "name": "main",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "id": "polygon-edge-vpc-cw-access-role-20221123172544131400000002-20221123172547388300000009",
            "policy_arn": "arn:aws:iam::897347591745:policy/polygon-edge-vpc-cw-access-policy-20221123172544132000000004",
            "role": "polygon-edge-vpc-cw-access-role-20221123172544131400000002"
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "module.test-main.module.vpc.module.flow_logs.module.cloudwatch_log_group.aws_iam_policy.main",
            "module.test-main.module.vpc.module.flow_logs.module.cloudwatch_log_group.aws_iam_role.main",
            "module.test-main.module.vpc.module.flow_logs.module.cloudwatch_log_group.data.aws_iam_policy_document.main"
          ]
        }
      ]
    }
  ]
}
